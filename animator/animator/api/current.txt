// Signature format: 3.0
package androidx.animator {

  public class AccelerateDecelerateInterpolator implements androidx.animator.Interpolator {
    ctor public AccelerateDecelerateInterpolator();
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class AccelerateInterpolator implements androidx.animator.Interpolator {
    ctor public AccelerateInterpolator();
    ctor public AccelerateInterpolator(float);
    ctor public AccelerateInterpolator(android.content.Context, android.util.AttributeSet);
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public abstract class Animator implements java.lang.Cloneable {
    ctor public Animator();
    method public void addListener(androidx.animator.Animator.AnimatorListener);
    method public void addPauseListener(androidx.animator.Animator.AnimatorPauseListener);
    method public void addUpdateListener(androidx.animator.Animator.AnimatorUpdateListener);
    method public void cancel();
    method public androidx.animator.Animator clone();
    method public void end();
    method public abstract long getDuration();
    method public androidx.animator.Interpolator? getInterpolator();
    method public abstract long getStartDelay();
    method public long getTotalDuration();
    method public boolean isPaused();
    method public abstract boolean isRunning();
    method public boolean isStarted();
    method public void pause();
    method public void removeAllListeners();
    method public void removeAllUpdateListeners();
    method public void removeListener(androidx.animator.Animator.AnimatorListener);
    method public void removePauseListener(androidx.animator.Animator.AnimatorPauseListener);
    method public void removeUpdateListener(androidx.animator.Animator.AnimatorUpdateListener);
    method public void resume();
    method public abstract androidx.animator.Animator setDuration(@IntRange(from=0) long);
    method public abstract void setInterpolator(androidx.animator.Interpolator?);
    method public abstract void setStartDelay(@IntRange(from=0) long);
    method public void setTarget(Object?);
    method public void setupEndValues();
    method public void setupStartValues();
    method public void start();
    field public static final long DURATION_INFINITE = -1L; // 0xffffffffffffffffL
  }

  public static interface Animator.AnimatorListener {
    method public void onAnimationCancel(androidx.animator.Animator);
    method public default void onAnimationEnd(androidx.animator.Animator, boolean);
    method public void onAnimationEnd(androidx.animator.Animator);
    method public void onAnimationRepeat(androidx.animator.Animator);
    method public default void onAnimationStart(androidx.animator.Animator, boolean);
    method public void onAnimationStart(androidx.animator.Animator);
  }

  public static interface Animator.AnimatorPauseListener {
    method public void onAnimationPause(androidx.animator.Animator);
    method public void onAnimationResume(androidx.animator.Animator);
  }

  public static interface Animator.AnimatorUpdateListener {
    method public void onAnimationUpdate(androidx.animator.Animator);
  }

  public class AnimatorInflater {
    method public static androidx.animator.Animator loadAnimator(android.content.Context, @AnimatorRes int) throws android.content.res.Resources.NotFoundException;
    method public static androidx.animator.Animator loadAnimator(android.content.res.Resources, android.content.res.Resources.Theme?, @AnimatorRes int) throws android.content.res.Resources.NotFoundException;
    method public static androidx.animator.Interpolator loadInterpolator(android.content.Context, @AnimatorRes @InterpolatorRes int) throws android.content.res.Resources.NotFoundException;
  }

  public abstract class AnimatorListenerAdapter implements androidx.animator.Animator.AnimatorListener androidx.animator.Animator.AnimatorPauseListener {
    ctor public AnimatorListenerAdapter();
    method public void onAnimationCancel(androidx.animator.Animator);
    method public void onAnimationEnd(androidx.animator.Animator);
    method public void onAnimationPause(androidx.animator.Animator);
    method public void onAnimationRepeat(androidx.animator.Animator);
    method public void onAnimationResume(androidx.animator.Animator);
    method public void onAnimationStart(androidx.animator.Animator);
  }

  public final class AnimatorSet extends androidx.animator.Animator {
    ctor public AnimatorSet();
    method public boolean canReverse();
    method public androidx.animator.AnimatorSet clone();
    method public java.util.ArrayList<androidx.animator.Animator!> getChildAnimations();
    method public long getCurrentPlayTime();
    method public long getDuration();
    method public long getStartDelay();
    method public boolean isRunning();
    method public androidx.animator.AnimatorSet.Builder play(androidx.animator.Animator);
    method public void playSequentially(androidx.animator.Animator!...);
    method public void playSequentially(java.util.List<androidx.animator.Animator!>);
    method public void playTogether(androidx.animator.Animator!...);
    method public void playTogether(java.util.Collection<androidx.animator.Animator!>);
    method public void reverse();
    method public void setCurrentPlayTime(long);
    method public androidx.animator.AnimatorSet setDuration(long);
    method public void setInterpolator(androidx.animator.Interpolator?);
    method public void setStartDelay(long);
  }

  public class AnimatorSet.Builder {
    method public androidx.animator.AnimatorSet.Builder after(androidx.animator.Animator);
    method public androidx.animator.AnimatorSet.Builder after(long);
    method public androidx.animator.AnimatorSet.Builder before(androidx.animator.Animator);
    method public androidx.animator.AnimatorSet.Builder with(androidx.animator.Animator);
  }

  public class AnticipateInterpolator implements androidx.animator.Interpolator {
    ctor public AnticipateInterpolator();
    ctor public AnticipateInterpolator(float);
    ctor public AnticipateInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class AnticipateOvershootInterpolator implements androidx.animator.Interpolator {
    ctor public AnticipateOvershootInterpolator();
    ctor public AnticipateOvershootInterpolator(float);
    ctor public AnticipateOvershootInterpolator(float, float);
    ctor public AnticipateOvershootInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public final class ArgbEvaluator implements androidx.animator.TypeEvaluator<java.lang.Integer> {
    method public Integer evaluate(float, Integer, Integer);
    method public static androidx.animator.ArgbEvaluator getInstance();
  }

  public abstract class BidirectionalTypeConverter<T, V> extends androidx.animator.TypeConverter<T,V> {
    ctor public BidirectionalTypeConverter(Class<T!>, Class<V!>);
    method public abstract T convertBack(V);
    method public androidx.animator.BidirectionalTypeConverter<V!,T!> invert();
  }

  public class BounceInterpolator implements androidx.animator.Interpolator {
    ctor public BounceInterpolator();
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class CycleInterpolator implements androidx.animator.Interpolator {
    ctor public CycleInterpolator(float);
    ctor public CycleInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class DecelerateInterpolator implements androidx.animator.Interpolator {
    ctor public DecelerateInterpolator();
    ctor public DecelerateInterpolator(float);
    ctor public DecelerateInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public final class FloatArrayEvaluator implements androidx.animator.TypeEvaluator<float[]> {
    ctor public FloatArrayEvaluator();
    ctor public FloatArrayEvaluator(float[]?);
    method public float[] evaluate(float, float[], float[]);
  }

  public final class FloatEvaluator implements androidx.animator.TypeEvaluator<java.lang.Float> {
    method public Float evaluate(float, Float, Float);
    method public static androidx.animator.FloatEvaluator getInstance();
  }

  public abstract class FloatProperty<T> extends android.util.Property<T,java.lang.Float> {
    ctor public FloatProperty(String);
    ctor public FloatProperty();
    method public final void set(T, Float);
    method public abstract void setValue(T, float);
  }

  public class IntArrayEvaluator implements androidx.animator.TypeEvaluator<int[]> {
    ctor public IntArrayEvaluator();
    ctor public IntArrayEvaluator(int[]?);
    method public int[] evaluate(float, int[], int[]);
  }

  public class IntEvaluator implements androidx.animator.TypeEvaluator<java.lang.Integer> {
    method public Integer evaluate(float, Integer, Integer);
    method public static androidx.animator.IntEvaluator getInstance();
  }

  public abstract class IntProperty<T> extends android.util.Property<T,java.lang.Integer> {
    ctor public IntProperty(String);
    ctor public IntProperty();
    method public final void set(T, Integer);
    method public abstract void setValue(T, int);
  }

  public interface Interpolator {
    method public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public abstract class Keyframe<T> implements java.lang.Cloneable {
    ctor public Keyframe();
    method public abstract androidx.animator.Keyframe<T!> clone();
    method @FloatRange(from=0, to=1) public float getFraction();
    method public androidx.animator.Interpolator? getInterpolator();
    method public Class<?> getType();
    method public abstract T? getValue();
    method public boolean hasValue();
    method public static androidx.animator.Keyframe<java.lang.Float!> ofFloat(@FloatRange(from=0, to=1) float, float);
    method public static androidx.animator.Keyframe<java.lang.Float!> ofFloat(@FloatRange(from=0, to=1) float);
    method public static androidx.animator.Keyframe<java.lang.Integer!> ofInt(@FloatRange(from=0, to=1) float, int);
    method public static androidx.animator.Keyframe<java.lang.Integer!> ofInt(@FloatRange(from=0, to=1) float);
    method public static <T> androidx.animator.Keyframe<T!> ofObject(@FloatRange(from=0, to=1) float, T?);
    method public static <T> androidx.animator.Keyframe<T!> ofObject(@FloatRange(from=0, to=1) float);
    method public void setFraction(@FloatRange(from=0, to=1) float);
    method public void setInterpolator(androidx.animator.Interpolator?);
    method public abstract void setValue(T?);
  }

  public class LinearInterpolator implements androidx.animator.Interpolator {
    ctor public LinearInterpolator();
    ctor public LinearInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(from=0, to=1) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public final class ObjectAnimator extends androidx.animator.ValueAnimator {
    ctor public ObjectAnimator();
    method public androidx.animator.ObjectAnimator clone();
    method public String getPropertyName();
    method public Object? getTarget();
    method public static androidx.animator.ObjectAnimator ofArgb(Object, String, int...);
    method public static <T> androidx.animator.ObjectAnimator ofArgb(T, android.util.Property<T!,java.lang.Integer!>, int...);
    method public static androidx.animator.ObjectAnimator ofFloat(Object, String, float...);
    method public static androidx.animator.ObjectAnimator ofFloat(Object, String?, String?, android.graphics.Path);
    method public static <T> androidx.animator.ObjectAnimator ofFloat(T, android.util.Property<T!,java.lang.Float!>, float...);
    method public static <T> androidx.animator.ObjectAnimator ofFloat(T, android.util.Property<T!,java.lang.Float!>?, android.util.Property<T!,java.lang.Float!>?, android.graphics.Path);
    method public static androidx.animator.ObjectAnimator ofInt(Object, String, int...);
    method public static androidx.animator.ObjectAnimator ofInt(Object, String, String, android.graphics.Path);
    method public static <T> androidx.animator.ObjectAnimator ofInt(T, android.util.Property<T!,java.lang.Integer!>, int...);
    method public static <T> androidx.animator.ObjectAnimator ofInt(T, android.util.Property<T!,java.lang.Integer!>?, android.util.Property<T!,java.lang.Integer!>?, android.graphics.Path);
    method public static androidx.animator.ObjectAnimator ofMultiFloat(Object, String, float[]![]);
    method public static androidx.animator.ObjectAnimator ofMultiFloat(Object, String, android.graphics.Path);
    method @java.lang.SafeVarargs public static <T> androidx.animator.ObjectAnimator ofMultiFloat(Object, String, androidx.animator.TypeConverter<T!,float[]!>, androidx.animator.TypeEvaluator<T!>, T!...);
    method public static androidx.animator.ObjectAnimator ofMultiInt(Object, String, int[]![]);
    method public static androidx.animator.ObjectAnimator ofMultiInt(Object, String, android.graphics.Path);
    method @java.lang.SafeVarargs public static <T> androidx.animator.ObjectAnimator ofMultiInt(Object, String, androidx.animator.TypeConverter<T!,int[]!>, androidx.animator.TypeEvaluator<T!>, T!...);
    method public static androidx.animator.ObjectAnimator ofObject(Object, String, androidx.animator.TypeEvaluator, java.lang.Object!...);
    method public static androidx.animator.ObjectAnimator ofObject(Object, String, androidx.animator.TypeConverter<android.graphics.PointF!,?>?, android.graphics.Path);
    method @java.lang.SafeVarargs public static <T, V> androidx.animator.ObjectAnimator ofObject(T, android.util.Property<T!,V!>, androidx.animator.TypeEvaluator<V!>, V!...);
    method @java.lang.SafeVarargs public static <T, V, P> androidx.animator.ObjectAnimator ofObject(T, android.util.Property<T!,P!>, androidx.animator.TypeConverter<V!,P!>, androidx.animator.TypeEvaluator<V!>, V!...);
    method public static <T, V> androidx.animator.ObjectAnimator ofObject(T, android.util.Property<T!,V!>, androidx.animator.TypeConverter<android.graphics.PointF!,V!>, android.graphics.Path);
    method public static androidx.animator.ObjectAnimator ofPropertyValuesHolder(Object, androidx.animator.PropertyValuesHolder!...);
    method public void setAutoCancel(boolean);
    method public androidx.animator.ObjectAnimator setDuration(long);
    method public void setProperty(android.util.Property);
    method public void setPropertyName(String);
  }

  public class OvershootInterpolator implements androidx.animator.Interpolator {
    ctor public OvershootInterpolator();
    ctor public OvershootInterpolator(float);
    ctor public OvershootInterpolator(android.content.Context, android.util.AttributeSet?);
    method @FloatRange(from=0) public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class PathInterpolator implements androidx.animator.Interpolator {
    ctor public PathInterpolator(android.graphics.Path);
    ctor public PathInterpolator(float, float);
    ctor public PathInterpolator(float, float, float, float);
    ctor public PathInterpolator(android.content.Context, android.util.AttributeSet?, org.xmlpull.v1.XmlPullParser);
    ctor public PathInterpolator(android.content.res.Resources, android.content.res.Resources.Theme?, android.util.AttributeSet?, org.xmlpull.v1.XmlPullParser);
    method public float getInterpolation(@FloatRange(from=0, to=1) float);
  }

  public class PointFEvaluator implements androidx.animator.TypeEvaluator<android.graphics.PointF> {
    ctor public PointFEvaluator();
    ctor public PointFEvaluator(android.graphics.PointF);
    method public android.graphics.PointF evaluate(float, android.graphics.PointF, android.graphics.PointF);
  }

  public class PropertyValuesHolder implements java.lang.Cloneable {
    method public androidx.animator.PropertyValuesHolder clone();
    method public String getPropertyName();
    method public static androidx.animator.PropertyValuesHolder ofFloat(String, float...);
    method public static androidx.animator.PropertyValuesHolder ofFloat(android.util.Property<?,java.lang.Float!>, float...);
    method public static androidx.animator.PropertyValuesHolder ofInt(String, int...);
    method public static androidx.animator.PropertyValuesHolder ofInt(android.util.Property<?,java.lang.Integer!>, int...);
    method @java.lang.SafeVarargs public static androidx.animator.PropertyValuesHolder ofKeyframe(String, androidx.animator.Keyframe!...);
    method @java.lang.SafeVarargs public static androidx.animator.PropertyValuesHolder ofKeyframe(android.util.Property, androidx.animator.Keyframe!...);
    method public static androidx.animator.PropertyValuesHolder ofMultiFloat(String, float[]![]);
    method public static androidx.animator.PropertyValuesHolder ofMultiFloat(String, android.graphics.Path);
    method @java.lang.SafeVarargs public static <V> androidx.animator.PropertyValuesHolder ofMultiFloat(String, androidx.animator.TypeConverter<V!,float[]!>, androidx.animator.TypeEvaluator<V!>, V!...);
    method @java.lang.SafeVarargs public static <T> androidx.animator.PropertyValuesHolder ofMultiFloat(String, androidx.animator.TypeConverter<T!,float[]!>, androidx.animator.TypeEvaluator<T!>, androidx.animator.Keyframe!...);
    method public static androidx.animator.PropertyValuesHolder ofMultiInt(String, int[]![]);
    method public static androidx.animator.PropertyValuesHolder ofMultiInt(String, android.graphics.Path);
    method @java.lang.SafeVarargs public static <V> androidx.animator.PropertyValuesHolder ofMultiInt(String, androidx.animator.TypeConverter<V!,int[]!>, androidx.animator.TypeEvaluator<V!>, V!...);
    method @java.lang.SafeVarargs public static <T> androidx.animator.PropertyValuesHolder ofMultiInt(String, androidx.animator.TypeConverter<T!,int[]!>, androidx.animator.TypeEvaluator<T!>, androidx.animator.Keyframe!...);
    method public static androidx.animator.PropertyValuesHolder ofObject(String, androidx.animator.TypeEvaluator, java.lang.Object!...);
    method public static androidx.animator.PropertyValuesHolder ofObject(String, androidx.animator.TypeConverter<android.graphics.PointF!,?>, android.graphics.Path);
    method @java.lang.SafeVarargs public static <V> androidx.animator.PropertyValuesHolder ofObject(android.util.Property, androidx.animator.TypeEvaluator<V!>, V!...);
    method @java.lang.SafeVarargs public static <T, V> androidx.animator.PropertyValuesHolder ofObject(android.util.Property<?,V!>, androidx.animator.TypeConverter<T!,V!>, androidx.animator.TypeEvaluator<T!>, T!...);
    method public static <V> androidx.animator.PropertyValuesHolder ofObject(android.util.Property<?,V!>, androidx.animator.TypeConverter<android.graphics.PointF!,V!>, android.graphics.Path);
    method public void setConverter(androidx.animator.TypeConverter);
    method public void setEvaluator(androidx.animator.TypeEvaluator);
    method public void setFloatValues(float...);
    method public void setIntValues(int...);
    method public void setKeyframes(androidx.animator.Keyframe!...);
    method public void setObjectValues(java.lang.Object!...);
    method public void setProperty(android.util.Property);
    method public void setPropertyName(String);
  }

  public class RectEvaluator implements androidx.animator.TypeEvaluator<android.graphics.Rect> {
    ctor public RectEvaluator();
    ctor public RectEvaluator(android.graphics.Rect);
    method public android.graphics.Rect evaluate(float, android.graphics.Rect, android.graphics.Rect);
  }

  public class TimeAnimator extends androidx.animator.ValueAnimator {
    ctor public TimeAnimator();
    method public void setTimeListener(androidx.animator.TimeAnimator.TimeListener?);
  }

  public static interface TimeAnimator.TimeListener {
    method public void onTimeUpdate(androidx.animator.TimeAnimator, long, long);
  }

  public abstract class TypeConverter<T, V> {
    ctor public TypeConverter(Class<T!>, Class<V!>);
    method public abstract V convert(T);
  }

  public interface TypeEvaluator<T> {
    method public T evaluate(float, T, T);
  }

  public class ValueAnimator extends androidx.animator.Animator {
    ctor public ValueAnimator();
    method public static boolean areAnimatorsEnabled();
    method public androidx.animator.ValueAnimator clone();
    method public float getAnimatedFraction();
    method public Object getAnimatedValue();
    method public Object? getAnimatedValue(String);
    method public long getCurrentPlayTime();
    method public long getDuration();
    method public static long getFrameDelay();
    method public String getNameForTrace();
    method public int getRepeatCount();
    method public int getRepeatMode();
    method public long getStartDelay();
    method public androidx.animator.PropertyValuesHolder![] getValues();
    method public boolean isRunning();
    method public static androidx.animator.ValueAnimator ofArgb(int...);
    method public static androidx.animator.ValueAnimator ofFloat(float...);
    method public static androidx.animator.ValueAnimator ofInt(int...);
    method public static androidx.animator.ValueAnimator ofObject(androidx.animator.TypeEvaluator, java.lang.Object!...);
    method public static androidx.animator.ValueAnimator ofPropertyValuesHolder(androidx.animator.PropertyValuesHolder!...);
    method public void reverse();
    method public void setCurrentFraction(float);
    method public void setCurrentPlayTime(long);
    method public androidx.animator.ValueAnimator setDuration(long);
    method public void setEvaluator(androidx.animator.TypeEvaluator);
    method public void setFloatValues(float...);
    method public static void setFrameDelay(long);
    method public void setIntValues(int...);
    method public void setInterpolator(androidx.animator.Interpolator?);
    method public void setNameForTrace(String);
    method public void setObjectValues(java.lang.Object!...);
    method public void setRepeatCount(int);
    method public void setRepeatMode(int);
    method public void setStartDelay(long);
    method public void setValues(androidx.animator.PropertyValuesHolder!...);
    field public static final int INFINITE = -1; // 0xffffffff
    field public static final int RESTART = 1; // 0x1
    field public static final int REVERSE = 2; // 0x2
  }

}

