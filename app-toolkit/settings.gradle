/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Calling includeProject(name, filePath) is shorthand for:
//
//   include(name)
//   project(name).projectDir = new File(filePath)
//
// Note that <name> directly controls the Gradle project name, and also indirectly sets:
//   the project name in the IDE
//   the Maven artifactId
//
def includeProject(name, filePath) {
    settings.include(name)

    def file
    if (filePath instanceof String) {
        file = new File(filePath)
    } else {
        file = filePath
    }
    project(name).projectDir = file
}

// If you change this file, you should also change the settings gradle inside
// the sub project.

def inAppToolkitProject = rootProject.name == "app-toolkit"
def supportRoot
if (inAppToolkitProject) {
    supportRoot = new File(rootProject.projectDir, "..").getCanonicalFile()
} else {
    supportRoot = rootProject.projectDir
}

println "support root:${supportRoot}"

includeProject(":arch:common", new File(supportRoot, "app-toolkit/common"))
includeProject(":arch:core-testing", new File(supportRoot, "app-toolkit/core-testing"))
includeProject(":arch:runtime", new File(supportRoot, "app-toolkit/runtime"))
includeProject(":lifecycle:common", new File(supportRoot, "lifecycle/common"))
includeProject(":lifecycle:common-java8", new File(supportRoot, "lifecycle/common-java8"))
includeProject(":lifecycle:compiler", new File(supportRoot, "lifecycle/compiler"))
includeProject(":lifecycle:extensions", new File(supportRoot, "lifecycle/extensions"))
includeProject(":lifecycle:integration-tests:testapp", new File(supportRoot, "lifecycle/integration-tests/testapp"))
includeProject(":lifecycle:livedata-core", new File(supportRoot, "lifecycle/livedata-core"))
includeProject(":lifecycle:livedata", new File(supportRoot, "lifecycle/livedata"))
includeProject(":lifecycle:reactivestreams", new File(supportRoot, "lifecycle/reactivestreams"))
includeProject(":lifecycle:runtime", new File(supportRoot, "lifecycle/runtime"))
includeProject(":lifecycle:viewmodel", new File(supportRoot, "lifecycle/viewmodel"))
includeProject(":paging:common", new File(supportRoot, "paging/common"))
includeProject(":paging:integration-tests:testapp", new File(supportRoot, "paging/integration-tests/testapp"))
includeProject(":paging:runtime", new File(supportRoot, "paging/runtime"))
includeProject(":persistence:db", new File(supportRoot, "persistence/db"))
includeProject(":persistence:db-framework", new File(supportRoot, "persistence/db-framework"))
includeProject(":room:common", new File(supportRoot, "room/common"))
includeProject(":room:compiler", new File(supportRoot, "room/compiler"))
includeProject(":room:guava", new File(supportRoot, "room/guava"))
includeProject(":room:integration-tests:testapp", new File(supportRoot, "room/integration-tests/testapp"))
includeProject(":room:integration-tests:kotlintestapp", new File(supportRoot, "room/integration-tests/kotlintestapp"))
includeProject(":room:migration", new File(supportRoot, "room/migration"))
includeProject(":room:runtime", new File(supportRoot, "room/runtime"))
includeProject(":room:rxjava2", new File(supportRoot, "room/rxjava2"))
includeProject(":room:testing", new File(supportRoot, "room/testing"))

includeProject(":jetifier-core", new File(supportRoot, "jetifier/jetifier/core"))
includeProject(":jetifier-gradle-plugin", new File(supportRoot, "jetifier/jetifier/gradle-plugin"))
includeProject(":jetifier-standalone", new File(supportRoot, "jetifier/jetifier/standalone"))
includeProject(":jetifier-preprocessor", new File(supportRoot, "jetifier/jetifier/preprocessor"))

/////////////////////////////
//
// External
//
/////////////////////////////

apply(from: new File(supportRoot, 'include-composite-deps.gradle'))
