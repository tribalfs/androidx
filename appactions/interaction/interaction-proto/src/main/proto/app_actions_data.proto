/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package androidx.appactions.interaction.proto;

import "google/protobuf/struct.proto";

option java_package = "androidx.appactions.interaction.proto";
option java_outer_classname = "AppActionsDataProto";
option java_multiple_files = true;

message ParamValue {
  // If this parameter matched an Entity, `identifier` of that Entity.
  optional string identifier = 1;

  oneof value {
    string string_value = 2;
    bool bool_value = 3;
    double number_value = 4;
    google.protobuf.Struct struct_value = 6;
  }
  reserved 5;  // Deleted DateTime value.
}

message Entity {
  // A unique identifier of the entity.
  optional string identifier = 1;

  // Name of the entity
  string name = 2;

  // Alternate names for the entity.
  repeated string alternate_names = 3;

  oneof entity_value {
    // Structured entity value.
    google.protobuf.Struct struct_value = 4;
    string string_value = 5;
    bool bool_value = 6;
    double number_value = 7;
  }
}

// Data for disambiguation of the parameter value.
message DisambiguationData {
  // Entities used to disambiguate the parameter value.
  repeated Entity entities = 1;
}

// Current value from the app for the associated param.
// Next ID: 4
message CurrentValue {
  // Current value of the associated parameter. Must have an entity identifier
  // if the status == ACCEPTED.
  ParamValue value = 1;

  enum Status {
    UNKNOWN = 0;
    // The value has been set for the associated parameter, but the app hasn't
    // validated it yet. This usually happens when the app is prompting other
    // parameter and want to handle this one later.
    PENDING = 1;
    // This value needs to be disambiguated through assistant.
    DISAMBIG = 4;
    // This value is accepted for this parameter during this dialogue.
    ACCEPTED = 2;
    // This value is rejected by this dialogue.
    REJECTED = 3;
  }

  // Data for disambiguate this value. Only be filled if status == DISAMBIG.
  DisambiguationData disambiguation_data = 3;

  // The state of the parameter value, which can be pending, accepted or
  // rejected.
  Status status = 2;
}

// Represents the data to describe app actions.
// Next ID: 5
message AppActionsContext {

  message AppAction {
    // Name of the intent. For example: actions.intent.UPDATE_FORM_FIELD
    string name = 1;

    // One intent can be registered multiple times. Use this field to identify
    // the intents. Developers can set this field via `fulfillmentId` in both shortcuts.xml and the
    // Capability library of the AppInteractionSDK.
    string identifier = 2;

    repeated IntentParameter params = 4;

    // The importance of this App Action, ranging from -10 to 10. The higher the
    // number, the higher its priority. If there are multiple App Actions with
    // the same name, and different identifier, then the action with the higher
    // priority will be selected.
    optional int32 priority = 5;

    // Describes the dialog status for this action. If does not exist, app
    // action must be fulfilled as one-shot action.
    optional TaskInfo task_info = 6;

    // Set to true if the capability requires confirmation OR if the capability
    // has optional confirmation and the developer has provided a confirmation
    // callback.
    bool needs_confirmation = 7;

    // Describes the restrictions needed to execute this action.
    // It would be set by the app and checked by the assistant to ensure the
    // restrictions can be supported.
    repeated Restriction restrictions = 8;
  }

  // Next ID: 9
  message IntentParameter {
    // The built-in-intent parameter name. For example: "textField.name".
    string name = 1;

    // Current values of the associated parameter.
    repeated CurrentValue current_value = 7 [deprecated = true];

    // List of possible values for this parameter.
    repeated Entity possible_entities = 3;

    // Whether this parameter is required for the intent.
    //
    // If true, Assistant won't send the fulfillment request to the app when
    // the parameter is absent from the user query.
    bool is_required = 4;

    // Whether the entity matched is required for this intent.
    //
    // If true, Assistant will skip this parameter if the argument from the user
    // query doesn't match any of the possible entities.
    bool entity_match_required = 5;

    // If true, Assistant will reject this capability if this param is set in
    // argument.
    //
    // Note: when an intent parameter is prohibited, it cannot be required, nor
    // can it require entity match; therefore, even if |is_required| or
    // |entity_match_required| is set to true, they would be simply ignored.
    bool is_prohibited = 6;

    // Whether or not this parameter field is focused right now.
    // If yes, it usually suggests that Assistant will prompt the value for this
    // argument.
    bool is_focused = 8 [deprecated = true];

    reserved 2;
  }

  message AppDialogState {
    // Each App capability can be associated with multiple dialogs. Use this
    // field to identify the dialog instance.
    string session_identifier = 1;

    // Identifier of the corresponding capability that this dialog state maps
    // to. This field maps to AppActionsContext.AppAction.identifier.
    string fulfillment_identifier = 2;

    // List of BII intent parameters of this dialog.
    repeated DialogParameter params = 3;

    // Validation errors of this dialog, including both slot-level and
    // task-level validation errors. Leave empty if validation is successful.
    repeated ValidationError validation_errors = 4;
  }

  message DialogParameter {
    // The built-in-intent parameter name. For example: "textField.name".
    string name = 1;

    // Current values of the associated parameter.
    repeated CurrentValue current_value = 2;

    bool is_focused = 3 [deprecated = true];
  }

  message ValidationError {
    message Slot {
      // Name of this slot, e.g. "timer.duration".
      string name = 1;
    }

    // The list of slots that are affected by this error.
    repeated Slot slots = 1;

    // TODO(b/269659830): Add link to below description.
    // The validation error status with parameters (if any), where all parameter
    // values should use the string type. These will correspond to the supported
    // validation errors defined in BII definitions (link), and transformed
    // as described in (link). For example, DurationTooShort with parameter min
    // duration 1 second can be represented as such:
    //
    // fields {
    //   key: "@type"
    //   value: { string_value: "DurationTooShort" }
    // }
    // fields {
    //   key: "minDuration"
    //   value: { string_value: "PT1S" }
    // }
    google.protobuf.Struct error = 2;
  }


  // Current version of the protocol. Populated with from the interaction-capabiliites-core library.
  optional Version version = 4;

  // Represents the dynamic capabilities declared by an App. Capabilities
  // declare the types of actions a developer can take to launch an app and jump
  // directly to performing a specific task. Dynamic capabilities are not
  // declared in shortcuts.xml, but are added during runtime.
  repeated AppAction actions = 1;

  // Represents the current dialog state, which is a list of built-in-intent
  // parameters and corresponding values from users. App
  // Dialog is a transaction session of intent and intent parameters.
  repeated AppDialogState dialog_states = 3;

  // This field contains the info for current focused text input.
  TextInputState text_input_state = 2;
}

// Next ID: 3
message TaskInfo {
  reserved 2;

  // Whether the app supports partial fulfillment with multi-turn dialog.
  bool supports_partial_fulfillment = 1;
}

// Represents the data used to perform an intent.
// Next ID: 7
message FulfillmentRequest {
  message Fulfillment {
    // Name of the intent. For example: actions.intent.UPDATE_FORM_FIELD
    string name = 1;

    // The identifier of the intent. This field is corresponding to the
    // |identifier| field with in `AppActionsContext.AppAction`.
    string identifier = 2;

    message FulfillmentValue {
      // The resolved value for the parameter.
      ParamValue value = 1;

      // Contains a list of disambig entities for the param.
      // If not empty, this indicates to render the disambiguation options for
      // this value.
      DisambiguationData disambig_data = 2;
    }

    message FulfillmentParam {
      // The alias for the built-in-intent parameter. For example:
      // "textField.name".
      string name = 1;

      // The updated values for this parameter.
      repeated ParamValue values = 2 [deprecated = true];

      // The values and disambig data for this parameter.
      repeated FulfillmentValue fulfillment_values = 3;
    }

    repeated FulfillmentParam params = 3;

    enum Type {
      UNKNOWN_TYPE = 0;
      // Assistant is asking to sync the current state with the app. The intent
      // will be executed if:
      // - App-side checks have passed:
      //     - no validation failures
      //     - no intent (value) suggestions
      //     - no confirmation suggestions or user has confirmed intent
      // - Assistant-side checks have passed
      SYNC = 1;
      // Assistant confirms an ongoing task with the app.
      // Deprecated: set SyncStatus = INTENT_CONFIRMED instead.
      CONFIRM = 2 [deprecated = true];
      // Assistant cancels an ongoing task of the app.
      CANCEL = 3;
      // Deprecated: Delete this enum value after cleaning up references
      TERMINATE = 4 [deprecated = true];
    }

    enum SyncStatus {
      UNKNOWN_SYNC_STATUS = 0;
      // Assistant-side checks have not passed and the App should not execute
      // yet even if App-side checks pass.
      SLOTS_INCOMPLETE = 1;
      // Assistant-side checks have passed. The App may execute or suggest
      // confirmation if App-side validation succeeds.
      SLOTS_COMPLETE = 2;
      // User confirmed the intent and the App should execute. This indicates
      // that the App has requested confirmation so it should not request
      // confirmation again.
      INTENT_CONFIRMED = 3;
    }

    // The current progress of handling the dialog.
    optional Type type = 5;

    // The status of the SYNC request. Only set when fulfillment type == SYNC.
    optional SyncStatus sync_status = 6;

    reserved 4;
  }

  // This field should be treated as an optional field. Only the first
  // fulfilment will be respected if multiple fulfillment exists.
  repeated Fulfillment fulfillments = 1;
}

message FulfillmentResponse {
  SpeechResponse speech_response = 1;

  // Whether Assistant should start dictation as a result of performing this
  // direct action.
  bool start_dictation = 2;

  message StructuredOutput {
    message OutputValue {
      // The name of the output parameter.
      string name = 1;

      // The value of the output.
      repeated ParamValue values = 2;
    }

    // The output values.
    repeated OutputValue output_values = 1;
  }

  oneof output {
    // The output of the execution returned to Assistant.
    StructuredOutput execution_output = 3;
    // The output for confirmation returned to Assistant.
    StructuredOutput confirmation_data = 4;
  }

  message SpeechResponse {
    oneof response {
      // On receipt, assistant will see whether this is an SSML response
      // or plain text for TTS generation.
      string text_to_speech = 1;
    }
    // The language of the response in IETF BCP 47 format. e.g. "en-US".
    // This will be used to generate TTS with the correct language.
    string language = 2;
  }
}

// Represents the data related to input field state. It includes the app action
// info associated to focusable text inputs, and also focus and content state of
// the text input field.
message TextInputState {
  // Contains the app action info used to look up the app action and entity name
  // for the focusable input state.
  repeated ActionBinding action_binding = 1;

  message ActionBinding {
    // The id of app action which the focusable property belong to.
    string action_identifier = 1;

    // The id of entity associated with the input field.
    string focusable_property_identifier = 2;

    // Whether the text input related to this action is focused.
    bool is_focused = 3;

    // Current state of input content.
    ContentState content_state = 4;
  }

  enum ContentState {
    UNKNOWN = 0;
    // Current input has no content.
    NO_CONTENT = 1;
    // Current input has content
    HAS_CONTENT = 2;
  }
}

// Versioning to maintain compatibility
message Version {
  // The major version.
  optional uint64 major = 1;

  // The minor version.
  optional uint64 minor = 2;

  // The patch version.
  optional uint64 patch = 3;

  // The prerelease version suffix.
  optional string prerelease_id = 4;
}

// Restrictions to run a specific AppAction.
message Restriction {
  oneof requirement {
    // If true, the corresponding AppAction requires assistant to
    // start dictation.
    bool text_input = 1;
  }
}

// Represents the result of sending an execution request to a capability.
// NEXT_ID: 2
message AppInteractionMetadata {

  // The error status of capability execution.
  // NEXT_ID: 10
  enum ErrorStatus {
    // Unexpected error occurred.
    UNKNOWN_ERROR_STATUS = 0;
    // The current capability session was cancelled, likely because a new request was sent to the
    // capability before the first had time to complete.
    CANCELED = 1;
    // Developer provided callback has timed out. Note, there might be a transport level timeout in
    // addition to the capability specific one, which may be less than the capability timeout. In
    // such cases, the capability should receive a fulfillment request with CANCEL status.
    TIMEOUT = 2;
    // Invalid data was sent to the capability. This could be a nonsensical request Type or
    // malformed arguments (e.g. wrong data format for a BII argument).
    INVALID_REQUEST = 3;
    // An exception was thrown from a developer-provided callback.
    EXTERNAL_EXCEPTION = 7;
    // Tried to send request to a particular capability session, but that session has not been
    // started or has already ended.
    SESSION_NOT_FOUND = 8;
    // Tried to start up a session for a particular capability ID but the capability was not found.
    CAPABILITY_NOT_FOUND = 9;
    // UI was requested but there is no UI currently set.
    NO_UI_ELEMENTS = 10;
    // Internal error occurred.
    INTERNAL = 11;
  }

  // ErrorStatus of capability execution. Can be logged to a dashboard to
  ErrorStatus error_status = 1;
}
