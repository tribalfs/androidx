/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package androidx.appactions.interaction.proto;

import "app_actions_data.proto";

option java_package = "androidx.appactions.interaction.proto";
option java_outer_classname = "GroundingProto";
option java_multiple_files = true;

message GroundingRequest {
  message Request {
    // SearchAction retrieved from the descriptor.
    optional .androidx.appactions.interaction.proto.ParamValue search_action = 1;

    // Max number of the results to return, API may return less results.
    // If this is not set, default will be ${fixed number we defined}.
    optional int32 page_size = 2;

    // Token to get the subsequent page, itâ€™s retrieved by the last API call.
    optional bytes page_token = 3;

    // Identifier of the expected EntityProvider.
    optional string entity_provider_id = 4;
  }

  optional Request request = 1;
}

message GroundingResponse {
  enum Status {
    DEFAULT_UNKNOWN = 0;
    SUCCESS = 1;
    TIMEOUT = 2;   // Entity lookup timeout.
    CANCELED = 3;  // Entity lookup canceled, e.g. caller cancels the RPC.
    INVALID_PAGE_TOKEN =
        4;  // Invalid the token when querying the following pages.
    INVALID_ENTITY_ARGUMENT = 5;  // Entity cannot be parsed correctly.
    INVALID_ENTITY_PROVIDER = 6;  // EntityProvider cannot be found.
  }

  message Candidate {
    // Information for the grounded entity.
    optional .androidx.appactions.interaction.proto.Entity grounded_entity = 1;
  }

  message Response {
    // Whether the request succeeds or the reason of the failure.
    optional Status status = 1;

    repeated Candidate candidates = 2;

    // The token to retrieve candidates from the next page, will not be omitted
    // if there are no more candidates.
    optional bytes next_page_token = 3;
  }

  optional Response response = 1;
}
