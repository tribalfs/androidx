/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package androidx.appactions.interaction.service.proto;

import "app_actions_data.proto";
import "grounding.proto";
import "touch_event.proto";

option java_package = "androidx.appactions.interaction.service.proto";
option java_outer_classname = "AppInteractionServiceProto";

// Request from host client (Assistant) to service provider (app) as part of the
// RequestFulfillment streaming call. Throughout a dialog facilitated by the
// provider, host might send multiple Request every time the
// user issues a query. This proto contains user's query (parsed into BII).
// NEXT_ID: 3
message Request {
  // This session id corresponds to the one in [AppDialogState]. Session id is used to identify the
  // hosts. When there are multiple hosts connecting to the provider at the same time for different
  // requests, provider can use the session_ids to distinguish sessions, thus providing different
  // responses to different hosts.
  string session_identifier = 1;
  // FulfillmentRequest contains the request data sent from Assistant, such as
  // new values of BII arguments.
  .androidx.appactions.interaction.proto.FulfillmentRequest fulfillment_request = 2;
}

// Response from service provider (app) to host client (Assistant) as part of
// the RequestFulfillment streaming call. While the RequestFulfillment streaming
// call is not completed, provider can stream Response when
// there is new TTS to play or new UI to display.
// NEXT_ID: 7
message Response {
  // Response of the capability invocation. Contains single-turn information
  // (such as structured data for TTS). State updates (e.g. slot value changes)
  // are reflected in the app_actions_context).
  .androidx.appactions.interaction.proto.FulfillmentResponse fulfillment_response = 1;
  // Context from the app. This should invalidate the Assistant app cache.
  .androidx.appactions.interaction.proto.AppActionsContext app_actions_context = 2;
  // Signal to the host that there is a new UI (RemoteViews or Tiles) ready to
  // be requested.
  UiUpdate ui_update = 3;
  // Signal to the host that there is a new UI (RemoteViews or Tiles) ready to
  // be requested, specifically for a list view.
  CollectionUpdate collection_update = 4;
  Status ending_status = 5;
  // Additional single-turn response data (in addition to
  // 'fulfillment_response') when the capability processing was triggered via
  // manual input.
  .androidx.appactions.interaction.proto.TouchEventMetadata touch_event_metadata = 6;
}

// The ending status of the dialog.
// NEXT_ID: 3
message Status {
  string message = 1;
  Code status_code = 2;

  enum Code {
    CODE_UNSPECIFIED = 0;
    COMPLETE = 1;
    USER_CANCELED = 2;
    ERROR = 3;
    TIMEOUT = 4;
  }
}
// NEXT_ID: 1
message UiUpdate {}

// NEXT_ID: 2
message CollectionUpdate {
  repeated int32 view_ids = 1;
}

// Host request to fetch UI
// NEXT_ID: 3
message UiRequest {
  int32 session_id = 1 [deprecated = true];
  // This session id corresponds to the one in [AppDialogState]. Indicates the UiResponse should
  // contain only the responses for this particular session.
  string session_identifier = 2;
}

// A wrapper for weartile Layout and Resources
// NEXT_ID: 3
message TileLayout {
  // bytes for androidx.wear.tiles.proto.Layout
  bytes layout = 1;
  // bytes for androidx.wear.tiles.proto.Resources
  bytes resources = 2;
}

// Information about the RemoteViews.
// NEXT_ID: 5
message RemoteViewsInfo {
  oneof width {
    // Fixed width in dp. Won't resize when host width changes.
    float width_dp = 1;
    // Take up as much horizontal space as possible, automatically resizes when
    // host width changes
    bool width_match_parent = 2;
  }
  oneof height {
    // Fixed height in dp. Won't resize when host height changes.
    float height_dp = 3;
    // Take up as much vertical space as possible, automatically resizes when
    // host height changes
    bool height_match_parent = 4;
  }
}

// Provider response to return UI. If the UI is RemoteViews, it will be attached
// as trailer metadata of the response.
// NEXT_ID: 3
message UiResponse {
  oneof ui_type {
    TileLayout tile_layout = 1;
    RemoteViewsInfo remote_views_info = 2;
  }
}

// NEXT_ID: 5
message HostProperties {
  // The width of the host area (in dp) where the app content can be displayed.
  float host_view_width_dp = 1;

  // The height of the host area (in dp) where the app content can be displayed.
  float host_view_height_dp = 2;

  DeviceType device_type = 3;

  bool requires_ui = 4;

  enum ResponseType {
    // default
    TYPE_UNSPECIFIED = 0;

    // The host supports displaying UI, text, and speech.
    SPEECH_AND_UI = 1;

    // The host supports playing TTS and receiving user voice query.
    SPEECH_ONLY = 2;

    // The host supports displaying a string text
    UI_ONLY = 3;
  }

  enum DeviceType {
    UNSPECIFIED = 0;   // default
    MOBILE = 1;        // the host is an Android phone or tablet.
    ANDROID_AUTO = 2;  // the host is an Android Auto device.
    WEAR_OS = 3;       // The host is a WearOS device.
    SPEAKER = 4;       // The host is a smart speaker.
  }
}

// Request containing the specification of the host to prepare the session.
// NEXT_ID: 5
message StartSessionRequest {
  HostProperties host_properties = 1;
  // Name of the BII e.g. "actions.intent.CREATE_TIMER"
  string intent_name = 2;
  // Fulfillment identifier associated with this BII. The developer sets this
  // field in their shortcuts.xml e.g. "create-timer-1"
  string identifier = 3;
  // Unique session ID generated by Assistant. The server (app) should create a
  // new Session for the given identifiers above and assign this field to it.
  string session_identifier = 4;
}

// Response providing a session_id. Session_id works like a cookie in browser.
// It is used to identify a session.
// NEXT_ID: 2
message StartSessionResponse {
  int32 session_id = 1 [deprecated = true];
}

// Request and response corresponding to methods on IRemoteViewsFactory.aidl
// frameworks/base/core/java/com/android/internal/widget/IRemoteViewsFactory.aidl
// NEXT_ID: 11
message CollectionRequest {
  int32 session_id = 1 [deprecated = true];
  // This session id corresponds to the one in [AppDialogState]. Indicates the CollectionResponse
  // should contain only the responses for this particular session.
  string session_identifier = 10;
  int32 view_id = 2;
  oneof request_data {
    OnDestroy on_destroy = 3;
    GetCount get_count = 4;
    GetViewAt get_view_at = 5;
    GetLoadingView get_loading_view = 6;
    GetViewTypeCount get_view_type_count = 7;
    GetItemId get_item_id = 8;
    HasStableIds has_stable_ids = 9;
  }

  message OnDestroy {}
  message GetCount {}
  message GetViewAt {
    int32 position = 1;
  }
  message GetLoadingView {}
  message GetViewTypeCount {}
  message GetItemId {
    int32 position = 1;
  }
  message HasStableIds {}
}

// NEXT_ID: 5
message CollectionResponse {
  oneof response_data {
    GetCount get_count = 1;
    GetViewTypeCount get_view_type_count = 2;
    GetItemId get_item_id = 3;
    HasStableIds has_stable_ids = 4;
  }

  message GetCount {
    int32 count = 1;
  }
  message GetViewTypeCount {
    int32 view_type_count = 1;
  }
  message GetItemId {
    int64 item_id = 1;
  }
  message HasStableIds {
    bool has_stable_ids = 1;
  }
}

// Service between Assistant app and 3P app. The 3P app acts as the server and the Assistant app is
// the client that binds to it. This GRPC service facilitates the communication with the 3P app.
service AppInteractionService {
  // Start up a session.
  rpc StartUpSession(stream StartSessionRequest)
      returns (stream StartSessionResponse);

  // Send request fulfillment.
  rpc SendRequestFulfillment(Request) returns (Response);

  // Request RemoteViews or TileLayout. This method is called after the
  // AppInteractionService SDK returns a signal in the Response of
  // RequestFulfillment. The Response.ui_update signal indicates that the app
  // provider has requested to send UI to Assistant. RemoteViews are not
  // directly sent in the response of this method, but passed in the gRPC
  // 'metadata'
  // (https://grpc.io/docs/what-is-grpc/core-concepts/#metadata).
  // TileLayout is sent directly as protos in the UiResponse.
  rpc RequestUi(UiRequest) returns (UiResponse);

  // Request RemoteViews specifically regarding a collection view / list items.
  // Similar to the RequestUI RPC, the response might contain RemoteViews in
  // gRPC 'metadata'.
  rpc RequestCollection(CollectionRequest) returns (CollectionResponse);

  // Request grounded candidates from the app
  rpc RequestGrounding(.androidx.appactions.interaction.proto.GroundingRequest)
      returns (.androidx.appactions.interaction.proto.GroundingResponse);
}