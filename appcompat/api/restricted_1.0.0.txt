// Signature format: 3.0
package androidx.appcompat.app {

  public abstract class ActionBar {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean closeOptionsMenu();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean collapseActionView();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void dispatchMenuVisibilityChanged(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean invalidateOptionsMenu();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isTitleTruncated();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void onConfigurationChanged(android.content.res.Configuration!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean onKeyShortcut(int, android.view.KeyEvent!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean onMenuKeyEvent(android.view.KeyEvent!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean openOptionsMenu();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setDefaultDisplayHomeAsUpEnabled(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setShowHideAnimationEnabled(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setWindowTitle(CharSequence!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.view.ActionMode! startActionMode(androidx.appcompat.view.ActionMode.Callback!);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface ActionBar.DisplayOptions {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface ActionBar.NavigationMode {
  }

  public static class AlertDialog.Builder {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.app.AlertDialog.Builder! setRecycleOnMeasureEnabled(boolean);
    method @Deprecated @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.app.AlertDialog.Builder! setView(android.view.View!, int, int, int, int);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface AppCompatDelegate.NightMode {
  }

  public class AppCompatDialog implements androidx.appcompat.app.AppCompatCallback {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void invalidateOptionsMenu();
  }

  public class AppCompatDialogFragment {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setupDialog(android.app.Dialog!, int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class WindowDecorActionBar extends androidx.appcompat.app.ActionBar implements androidx.appcompat.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback {
    ctor public WindowDecorActionBar(android.app.Activity!, boolean);
    ctor public WindowDecorActionBar(android.app.Dialog!);
    ctor @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public WindowDecorActionBar(android.view.View!);
    method public void addOnMenuVisibilityListener(androidx.appcompat.app.ActionBar.OnMenuVisibilityListener!);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, int);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, boolean);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, int, boolean);
    method public void animateToMode(boolean);
    method public void doHide(boolean);
    method public void doShow(boolean);
    method public void enableContentAnimations(boolean);
    method public android.view.View! getCustomView();
    method public int getDisplayOptions();
    method public int getHeight();
    method public int getNavigationItemCount();
    method public int getNavigationMode();
    method public int getSelectedNavigationIndex();
    method public androidx.appcompat.app.ActionBar.Tab! getSelectedTab();
    method public CharSequence! getSubtitle();
    method public androidx.appcompat.app.ActionBar.Tab! getTabAt(int);
    method public int getTabCount();
    method public CharSequence! getTitle();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public void hide();
    method public void hideForSystem();
    method public boolean isShowing();
    method public androidx.appcompat.app.ActionBar.Tab! newTab();
    method public void onContentScrollStarted();
    method public void onContentScrollStopped();
    method public void onWindowVisibilityChanged(int);
    method public void removeAllTabs();
    method public void removeOnMenuVisibilityListener(androidx.appcompat.app.ActionBar.OnMenuVisibilityListener!);
    method public void removeTab(androidx.appcompat.app.ActionBar.Tab!);
    method public void removeTabAt(int);
    method public boolean requestFocus();
    method public void selectTab(androidx.appcompat.app.ActionBar.Tab!);
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable!);
    method public void setCustomView(int);
    method public void setCustomView(android.view.View!);
    method public void setCustomView(android.view.View!, androidx.appcompat.app.ActionBar.LayoutParams!);
    method public void setDisplayHomeAsUpEnabled(boolean);
    method public void setDisplayOptions(int);
    method public void setDisplayOptions(int, int);
    method public void setDisplayShowCustomEnabled(boolean);
    method public void setDisplayShowHomeEnabled(boolean);
    method public void setDisplayShowTitleEnabled(boolean);
    method public void setDisplayUseLogoEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setListNavigationCallbacks(android.widget.SpinnerAdapter!, androidx.appcompat.app.ActionBar.OnNavigationListener!);
    method public void setLogo(int);
    method public void setLogo(android.graphics.drawable.Drawable!);
    method public void setNavigationMode(int);
    method public void setSelectedNavigationItem(int);
    method public void setSubtitle(int);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(int);
    method public void setTitle(CharSequence!);
    method public void show();
    method public void showForSystem();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class WindowDecorActionBar.ActionModeImpl extends androidx.appcompat.view.ActionMode implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor public WindowDecorActionBar.ActionModeImpl(android.content.Context!, androidx.appcompat.view.ActionMode.Callback!);
    method public boolean dispatchOnCreate();
    method public void finish();
    method public android.view.View! getCustomView();
    method public android.view.Menu! getMenu();
    method public android.view.MenuInflater! getMenuInflater();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public void invalidate();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCustomView(android.view.View!);
    method public void setSubtitle(CharSequence!);
    method public void setSubtitle(int);
    method public void setTitle(CharSequence!);
    method public void setTitle(int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class WindowDecorActionBar.TabImpl extends androidx.appcompat.app.ActionBar.Tab {
    ctor public WindowDecorActionBar.TabImpl();
    method public androidx.appcompat.app.ActionBar.TabListener! getCallback();
    method public CharSequence! getContentDescription();
    method public android.view.View! getCustomView();
    method public android.graphics.drawable.Drawable! getIcon();
    method public int getPosition();
    method public Object! getTag();
    method public CharSequence! getText();
    method public void select();
    method public androidx.appcompat.app.ActionBar.Tab! setContentDescription(int);
    method public androidx.appcompat.app.ActionBar.Tab! setContentDescription(CharSequence!);
    method public androidx.appcompat.app.ActionBar.Tab! setCustomView(android.view.View!);
    method public androidx.appcompat.app.ActionBar.Tab! setCustomView(int);
    method public androidx.appcompat.app.ActionBar.Tab! setIcon(android.graphics.drawable.Drawable!);
    method public androidx.appcompat.app.ActionBar.Tab! setIcon(int);
    method public void setPosition(int);
    method public androidx.appcompat.app.ActionBar.Tab! setTabListener(androidx.appcompat.app.ActionBar.TabListener!);
    method public androidx.appcompat.app.ActionBar.Tab! setTag(Object!);
    method public androidx.appcompat.app.ActionBar.Tab! setText(CharSequence!);
    method public androidx.appcompat.app.ActionBar.Tab! setText(int);
  }

}

package androidx.appcompat.graphics.drawable {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class DrawableWrapper {
    ctor public DrawableWrapper(android.graphics.drawable.Drawable!);
    method public void draw(android.graphics.Canvas!);
    method public int getChangingConfigurations();
    method public android.graphics.drawable.Drawable! getCurrent();
    method public int getIntrinsicHeight();
    method public int getIntrinsicWidth();
    method public int getMinimumHeight();
    method public int getMinimumWidth();
    method public int getOpacity();
    method public boolean getPadding(android.graphics.Rect!);
    method public int[]! getState();
    method public android.graphics.Region! getTransparentRegion();
    method public android.graphics.drawable.Drawable! getWrappedDrawable();
    method public void invalidateDrawable(android.graphics.drawable.Drawable!);
    method public boolean isAutoMirrored();
    method public boolean isStateful();
    method public void jumpToCurrentState();
    method protected void onBoundsChange(android.graphics.Rect!);
    method protected boolean onLevelChange(int);
    method public void scheduleDrawable(android.graphics.drawable.Drawable!, Runnable!, long);
    method public void setAlpha(int);
    method public void setAutoMirrored(boolean);
    method public void setChangingConfigurations(int);
    method public void setColorFilter(android.graphics.ColorFilter!);
    method public void setDither(boolean);
    method public void setFilterBitmap(boolean);
    method public void setHotspot(float, float);
    method public void setHotspotBounds(int, int, int, int);
    method public boolean setState(int[]!);
    method public void setTint(int);
    method public void setTintList(android.content.res.ColorStateList!);
    method public void setTintMode(android.graphics.PorterDuff.Mode!);
    method public boolean setVisible(boolean, boolean);
    method public void setWrappedDrawable(android.graphics.drawable.Drawable!);
    method public void unscheduleDrawable(android.graphics.drawable.Drawable!, Runnable!);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface DrawerArrowDrawable.ArrowDirection {
  }

}

package androidx.appcompat.text {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class AllCapsTransformationMethod {
    ctor public AllCapsTransformationMethod(android.content.Context!);
    method public CharSequence! getTransformation(CharSequence!, android.view.View!);
    method public void onFocusChanged(android.view.View!, CharSequence!, boolean, int, android.graphics.Rect!);
  }

}

package androidx.appcompat.view {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionBarPolicy {
    method public boolean enableHomeButtonByDefault();
    method public static androidx.appcompat.view.ActionBarPolicy! get(android.content.Context!);
    method public int getEmbeddedMenuWidthLimit();
    method public int getMaxActionButtons();
    method public int getStackedTabMaxWidth();
    method public int getTabContainerHeight();
    method public boolean hasEmbeddedTabs();
    method public boolean showsOverflowMenuButton();
  }

  public abstract class ActionMode {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isUiFocusable();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class StandaloneActionMode extends androidx.appcompat.view.ActionMode implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor public StandaloneActionMode(android.content.Context!, androidx.appcompat.widget.ActionBarContextView!, androidx.appcompat.view.ActionMode.Callback!, boolean);
    method public void finish();
    method public android.view.View! getCustomView();
    method public android.view.Menu! getMenu();
    method public android.view.MenuInflater! getMenuInflater();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public void invalidate();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCustomView(android.view.View!);
    method public void setSubtitle(CharSequence!);
    method public void setSubtitle(int);
    method public void setTitle(CharSequence!);
    method public void setTitle(int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class SupportActionModeWrapper {
    ctor public SupportActionModeWrapper(android.content.Context!, androidx.appcompat.view.ActionMode!);
    method public void finish();
    method public android.view.View! getCustomView();
    method public android.view.Menu! getMenu();
    method public android.view.MenuInflater! getMenuInflater();
    method public CharSequence! getSubtitle();
    method public Object! getTag();
    method public CharSequence! getTitle();
    method public boolean getTitleOptionalHint();
    method public void invalidate();
    method public boolean isTitleOptional();
    method public void setCustomView(android.view.View!);
    method public void setSubtitle(CharSequence!);
    method public void setSubtitle(int);
    method public void setTag(Object!);
    method public void setTitle(CharSequence!);
    method public void setTitle(int);
    method public void setTitleOptionalHint(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class SupportActionModeWrapper.CallbackWrapper implements androidx.appcompat.view.ActionMode.Callback {
    ctor public SupportActionModeWrapper.CallbackWrapper(android.content.Context!, android.view.ActionMode.Callback!);
    method public android.view.ActionMode! getActionModeWrapper(androidx.appcompat.view.ActionMode!);
    method public boolean onActionItemClicked(androidx.appcompat.view.ActionMode!, android.view.MenuItem!);
    method public boolean onCreateActionMode(androidx.appcompat.view.ActionMode!, android.view.Menu!);
    method public void onDestroyActionMode(androidx.appcompat.view.ActionMode!);
    method public boolean onPrepareActionMode(androidx.appcompat.view.ActionMode!, android.view.Menu!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class SupportMenuInflater {
    ctor public SupportMenuInflater(android.content.Context!);
    method public void inflate(@LayoutRes int, android.view.Menu!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ViewPropertyAnimatorCompatSet {
    ctor public ViewPropertyAnimatorCompatSet();
    method public void cancel();
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! play(androidx.core.view.ViewPropertyAnimatorCompat!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! playSequentially(androidx.core.view.ViewPropertyAnimatorCompat!, androidx.core.view.ViewPropertyAnimatorCompat!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setDuration(long);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setInterpolator(android.view.animation.Interpolator!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setListener(androidx.core.view.ViewPropertyAnimatorListener!);
    method public void start();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class WindowCallbackWrapper {
    ctor public WindowCallbackWrapper(android.view.Window.Callback!);
    method public boolean dispatchGenericMotionEvent(android.view.MotionEvent!);
    method public boolean dispatchKeyEvent(android.view.KeyEvent!);
    method public boolean dispatchKeyShortcutEvent(android.view.KeyEvent!);
    method public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent!);
    method public boolean dispatchTouchEvent(android.view.MotionEvent!);
    method public boolean dispatchTrackballEvent(android.view.MotionEvent!);
    method public void onActionModeFinished(android.view.ActionMode!);
    method public void onActionModeStarted(android.view.ActionMode!);
    method public void onAttachedToWindow();
    method public void onContentChanged();
    method public boolean onCreatePanelMenu(int, android.view.Menu!);
    method public android.view.View! onCreatePanelView(int);
    method public void onDetachedFromWindow();
    method public boolean onMenuItemSelected(int, android.view.MenuItem!);
    method public boolean onMenuOpened(int, android.view.Menu!);
    method public void onPanelClosed(int, android.view.Menu!);
    method @RequiresApi(26) public void onPointerCaptureChanged(boolean);
    method public boolean onPreparePanel(int, android.view.View!, android.view.Menu!);
    method @RequiresApi(24) public void onProvideKeyboardShortcuts(java.util.List<android.view.KeyboardShortcutGroup>!, android.view.Menu!, int);
    method @RequiresApi(23) public boolean onSearchRequested(android.view.SearchEvent!);
    method public boolean onSearchRequested();
    method public void onWindowAttributesChanged(android.view.WindowManager.LayoutParams!);
    method public void onWindowFocusChanged(boolean);
    method public android.view.ActionMode! onWindowStartingActionMode(android.view.ActionMode.Callback!);
    method @RequiresApi(23) public android.view.ActionMode! onWindowStartingActionMode(android.view.ActionMode.Callback!, int);
  }

}

package androidx.appcompat.view.menu {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionMenuItem {
    ctor public ActionMenuItem(android.content.Context!, int, int, int, int, CharSequence!);
    method public boolean collapseActionView();
    method public boolean expandActionView();
    method public android.view.ActionProvider! getActionProvider();
    method public android.view.View! getActionView();
    method public int getAlphabeticModifiers();
    method public char getAlphabeticShortcut();
    method public CharSequence! getContentDescription();
    method public int getGroupId();
    method public android.graphics.drawable.Drawable! getIcon();
    method public android.content.res.ColorStateList! getIconTintList();
    method public android.graphics.PorterDuff.Mode! getIconTintMode();
    method public android.content.Intent! getIntent();
    method public int getItemId();
    method public android.view.ContextMenu.ContextMenuInfo! getMenuInfo();
    method public int getNumericModifiers();
    method public char getNumericShortcut();
    method public int getOrder();
    method public android.view.SubMenu! getSubMenu();
    method public androidx.core.view.ActionProvider! getSupportActionProvider();
    method public CharSequence! getTitle();
    method public CharSequence! getTitleCondensed();
    method public CharSequence! getTooltipText();
    method public boolean hasSubMenu();
    method public boolean invoke();
    method public boolean isActionViewExpanded();
    method public boolean isCheckable();
    method public boolean isChecked();
    method public boolean isEnabled();
    method public boolean isVisible();
    method public android.view.MenuItem! setActionProvider(android.view.ActionProvider!);
    method public androidx.core.internal.view.SupportMenuItem! setActionView(android.view.View!);
    method public androidx.core.internal.view.SupportMenuItem! setActionView(int);
    method public android.view.MenuItem! setAlphabeticShortcut(char);
    method public android.view.MenuItem! setAlphabeticShortcut(char, int);
    method public android.view.MenuItem! setCheckable(boolean);
    method public android.view.MenuItem! setChecked(boolean);
    method public androidx.core.internal.view.SupportMenuItem! setContentDescription(CharSequence!);
    method public android.view.MenuItem! setEnabled(boolean);
    method public androidx.appcompat.view.menu.ActionMenuItem! setExclusiveCheckable(boolean);
    method public android.view.MenuItem! setIcon(android.graphics.drawable.Drawable!);
    method public android.view.MenuItem! setIcon(int);
    method public android.view.MenuItem! setIconTintList(android.content.res.ColorStateList?);
    method public android.view.MenuItem! setIconTintMode(android.graphics.PorterDuff.Mode!);
    method public android.view.MenuItem! setIntent(android.content.Intent!);
    method public android.view.MenuItem! setNumericShortcut(char);
    method public android.view.MenuItem! setNumericShortcut(char, int);
    method public android.view.MenuItem! setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener!);
    method public android.view.MenuItem! setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener!);
    method public android.view.MenuItem! setShortcut(char, char);
    method public android.view.MenuItem! setShortcut(char, char, int, int);
    method public void setShowAsAction(int);
    method public androidx.core.internal.view.SupportMenuItem! setShowAsActionFlags(int);
    method public androidx.core.internal.view.SupportMenuItem! setSupportActionProvider(androidx.core.view.ActionProvider!);
    method public android.view.MenuItem! setTitle(CharSequence!);
    method public android.view.MenuItem! setTitle(int);
    method public android.view.MenuItem! setTitleCondensed(CharSequence!);
    method public androidx.core.internal.view.SupportMenuItem! setTooltipText(CharSequence!);
    method public android.view.MenuItem! setVisible(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionMenuItemView extends androidx.appcompat.widget.AppCompatTextView implements androidx.appcompat.widget.ActionMenuView.ActionMenuChildView androidx.appcompat.view.menu.MenuView.ItemView {
    ctor public ActionMenuItemView(android.content.Context!);
    ctor public ActionMenuItemView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionMenuItemView(android.content.Context!, android.util.AttributeSet!, int);
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public boolean hasText();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method public boolean needsDividerAfter();
    method public boolean needsDividerBefore();
    method public void onClick(android.view.View!);
    method public void onConfigurationChanged(android.content.res.Configuration!);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setExpandedFormat(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder.ItemInvoker!);
    method public void setPadding(int, int, int, int);
    method public void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView.PopupCallback!);
    method public void setShortcut(boolean, char);
    method public void setTitle(CharSequence!);
    method public boolean showsIcon();
  }

  public abstract static class ActionMenuItemView.PopupCallback {
    ctor public ActionMenuItemView.PopupCallback();
    method public abstract androidx.appcompat.view.menu.ShowableListMenu! getPopup();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public abstract class BaseMenuPresenter implements androidx.appcompat.view.menu.MenuPresenter {
    ctor public BaseMenuPresenter(android.content.Context!, int, int);
    method protected void addItemView(android.view.View!, int);
    method public abstract void bindItemView(androidx.appcompat.view.menu.MenuItemImpl!, androidx.appcompat.view.menu.MenuView.ItemView!);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public androidx.appcompat.view.menu.MenuView.ItemView! createItemView(android.view.ViewGroup!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method protected boolean filterLeftoverView(android.view.ViewGroup!, int);
    method public boolean flagActionItems();
    method public androidx.appcompat.view.menu.MenuPresenter.Callback! getCallback();
    method public int getId();
    method public android.view.View! getItemView(androidx.appcompat.view.menu.MenuItemImpl!, android.view.View!, android.view.ViewGroup!);
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setId(int);
    method public boolean shouldIncludeItem(int, androidx.appcompat.view.menu.MenuItemImpl!);
    method public void updateMenuView(boolean);
    field protected android.content.Context! mContext;
    field protected android.view.LayoutInflater! mInflater;
    field protected androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field protected androidx.appcompat.view.menu.MenuView! mMenuView;
    field protected android.content.Context! mSystemContext;
    field protected android.view.LayoutInflater! mSystemInflater;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ExpandedMenuView implements androidx.appcompat.view.menu.MenuBuilder.ItemInvoker androidx.appcompat.view.menu.MenuView {
    ctor public ExpandedMenuView(android.content.Context!, android.util.AttributeSet!);
    ctor public ExpandedMenuView(android.content.Context!, android.util.AttributeSet!, int);
    method public int getWindowAnimations();
    method public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
    method protected void onDetachedFromWindow();
    method public void onItemClick(android.widget.AdapterView!, android.view.View!, int, long);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ListMenuItemView implements androidx.appcompat.view.menu.MenuView.ItemView {
    ctor public ListMenuItemView(android.content.Context!, android.util.AttributeSet!);
    ctor public ListMenuItemView(android.content.Context!, android.util.AttributeSet!, int);
    method public void adjustListItemSelectionBounds(android.graphics.Rect!);
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method protected void onFinishInflate();
    method protected void onMeasure(int, int);
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setForceShowIcon(boolean);
    method public void setGroupDividerEnabled(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setShortcut(boolean, char);
    method public void setTitle(CharSequence!);
    method public boolean showsIcon();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ListMenuPresenter implements androidx.appcompat.view.menu.MenuPresenter {
    ctor public ListMenuPresenter(android.content.Context!, int);
    ctor public ListMenuPresenter(int, int);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean flagActionItems();
    method public android.widget.ListAdapter! getAdapter();
    method public int getId();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onItemClick(android.widget.AdapterView<?>!, android.view.View!, int, long);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void restoreHierarchyState(android.os.Bundle!);
    method public void saveHierarchyState(android.os.Bundle!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setId(int);
    method public void setItemIndexOffset(int);
    method public void updateMenuView(boolean);
    field public static final String VIEWS_TAG = "android:menu:list";
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class MenuAdapter {
    ctor public MenuAdapter(androidx.appcompat.view.menu.MenuBuilder!, android.view.LayoutInflater!, boolean, int);
    method public androidx.appcompat.view.menu.MenuBuilder! getAdapterMenu();
    method public int getCount();
    method public boolean getForceShowIcon();
    method public androidx.appcompat.view.menu.MenuItemImpl! getItem(int);
    method public long getItemId(int);
    method public android.view.View! getView(int, android.view.View!, android.view.ViewGroup!);
    method public void notifyDataSetChanged();
    method public void setForceShowIcon(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class MenuBuilder {
    ctor public MenuBuilder(android.content.Context!);
    method public android.view.MenuItem! add(CharSequence!);
    method public android.view.MenuItem! add(int);
    method public android.view.MenuItem! add(int, int, int, CharSequence!);
    method public android.view.MenuItem! add(int, int, int, int);
    method public int addIntentOptions(int, int, int, android.content.ComponentName!, android.content.Intent[]!, android.content.Intent!, int, android.view.MenuItem[]!);
    method protected android.view.MenuItem! addInternal(int, int, int, CharSequence!);
    method public void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!);
    method public void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!, android.content.Context!);
    method public android.view.SubMenu! addSubMenu(CharSequence!);
    method public android.view.SubMenu! addSubMenu(int);
    method public android.view.SubMenu! addSubMenu(int, int, int, CharSequence!);
    method public android.view.SubMenu! addSubMenu(int, int, int, int);
    method public void changeMenuMode();
    method public void clear();
    method public void clearAll();
    method public void clearHeader();
    method public final void close(boolean);
    method public void close();
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method public int findGroupIndex(int);
    method public int findGroupIndex(int, int);
    method public android.view.MenuItem! findItem(int);
    method public int findItemIndex(int);
    method public void flagActionItems();
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! getActionItems();
    method protected String! getActionViewStatesKey();
    method public android.content.Context! getContext();
    method public androidx.appcompat.view.menu.MenuItemImpl! getExpandedItem();
    method public android.graphics.drawable.Drawable! getHeaderIcon();
    method public CharSequence! getHeaderTitle();
    method public android.view.View! getHeaderView();
    method public android.view.MenuItem! getItem(int);
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! getNonActionItems();
    method public androidx.appcompat.view.menu.MenuBuilder! getRootMenu();
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl> getVisibleItems();
    method public boolean hasVisibleItems();
    method public boolean isGroupDividerEnabled();
    method public boolean isShortcutKey(int, android.view.KeyEvent!);
    method public boolean isShortcutsVisible();
    method public void onItemsChanged(boolean);
    method public boolean performIdentifierAction(int, int);
    method public boolean performItemAction(android.view.MenuItem!, int);
    method public boolean performItemAction(android.view.MenuItem!, androidx.appcompat.view.menu.MenuPresenter!, int);
    method public boolean performShortcut(int, android.view.KeyEvent!, int);
    method public void removeGroup(int);
    method public void removeItem(int);
    method public void removeItemAt(int);
    method public void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!);
    method public void restoreActionViewStates(android.os.Bundle!);
    method public void restorePresenterStates(android.os.Bundle!);
    method public void saveActionViewStates(android.os.Bundle!);
    method public void savePresenterStates(android.os.Bundle!);
    method public void setCallback(androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setCurrentMenuInfo(android.view.ContextMenu.ContextMenuInfo!);
    method public androidx.appcompat.view.menu.MenuBuilder! setDefaultShowAsAction(int);
    method public void setGroupCheckable(int, boolean, boolean);
    method public void setGroupDividerEnabled(boolean);
    method public void setGroupEnabled(int, boolean);
    method public void setGroupVisible(int, boolean);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderIconInt(android.graphics.drawable.Drawable!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderIconInt(int);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderTitleInt(CharSequence!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderTitleInt(int);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderViewInt(android.view.View!);
    method public void setOptionalIconsVisible(boolean);
    method public void setOverrideVisibleItems(boolean);
    method public void setQwertyMode(boolean);
    method public void setShortcutsVisible(boolean);
    method public int size();
    method public void startDispatchingItemsChanged();
    method public void stopDispatchingItemsChanged();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static interface MenuBuilder.Callback {
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static interface MenuBuilder.ItemInvoker {
    method public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class MenuItemImpl {
    method public void actionFormatChanged();
    method public boolean collapseActionView();
    method public boolean expandActionView();
    method public android.view.ActionProvider! getActionProvider();
    method public android.view.View! getActionView();
    method public int getAlphabeticModifiers();
    method public char getAlphabeticShortcut();
    method public CharSequence! getContentDescription();
    method public int getGroupId();
    method public android.graphics.drawable.Drawable! getIcon();
    method public android.content.res.ColorStateList! getIconTintList();
    method public android.graphics.PorterDuff.Mode! getIconTintMode();
    method public android.content.Intent! getIntent();
    method @android.view.ViewDebug.CapturedViewProperty public int getItemId();
    method public android.view.ContextMenu.ContextMenuInfo! getMenuInfo();
    method public int getNumericModifiers();
    method public char getNumericShortcut();
    method public int getOrder();
    method public int getOrdering();
    method public android.view.SubMenu! getSubMenu();
    method public androidx.core.view.ActionProvider! getSupportActionProvider();
    method @android.view.ViewDebug.CapturedViewProperty public CharSequence! getTitle();
    method public CharSequence! getTitleCondensed();
    method public CharSequence! getTooltipText();
    method public boolean hasCollapsibleActionView();
    method public boolean hasSubMenu();
    method public boolean invoke();
    method public boolean isActionButton();
    method public boolean isActionViewExpanded();
    method public boolean isCheckable();
    method public boolean isChecked();
    method public boolean isEnabled();
    method public boolean isExclusiveCheckable();
    method public boolean isVisible();
    method public boolean requestsActionButton();
    method public boolean requiresActionButton();
    method public android.view.MenuItem! setActionProvider(android.view.ActionProvider!);
    method public androidx.core.internal.view.SupportMenuItem! setActionView(android.view.View!);
    method public androidx.core.internal.view.SupportMenuItem! setActionView(int);
    method public void setActionViewExpanded(boolean);
    method public android.view.MenuItem! setAlphabeticShortcut(char);
    method public android.view.MenuItem! setAlphabeticShortcut(char, int);
    method public android.view.MenuItem! setCallback(Runnable!);
    method public android.view.MenuItem! setCheckable(boolean);
    method public android.view.MenuItem! setChecked(boolean);
    method public androidx.core.internal.view.SupportMenuItem! setContentDescription(CharSequence!);
    method public android.view.MenuItem! setEnabled(boolean);
    method public void setExclusiveCheckable(boolean);
    method public android.view.MenuItem! setIcon(android.graphics.drawable.Drawable!);
    method public android.view.MenuItem! setIcon(int);
    method public android.view.MenuItem! setIconTintList(android.content.res.ColorStateList?);
    method public android.view.MenuItem! setIconTintMode(android.graphics.PorterDuff.Mode!);
    method public android.view.MenuItem! setIntent(android.content.Intent!);
    method public void setIsActionButton(boolean);
    method public android.view.MenuItem! setNumericShortcut(char);
    method public android.view.MenuItem! setNumericShortcut(char, int);
    method public android.view.MenuItem! setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener!);
    method public android.view.MenuItem! setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener!);
    method public android.view.MenuItem! setShortcut(char, char);
    method public android.view.MenuItem! setShortcut(char, char, int, int);
    method public void setShowAsAction(int);
    method public androidx.core.internal.view.SupportMenuItem! setShowAsActionFlags(int);
    method public void setSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public androidx.core.internal.view.SupportMenuItem! setSupportActionProvider(androidx.core.view.ActionProvider!);
    method public android.view.MenuItem! setTitle(CharSequence!);
    method public android.view.MenuItem! setTitle(int);
    method public android.view.MenuItem! setTitleCondensed(CharSequence!);
    method public androidx.core.internal.view.SupportMenuItem! setTooltipText(CharSequence!);
    method public android.view.MenuItem! setVisible(boolean);
    method public boolean shouldShowIcon();
    method public boolean showsTextAsAction();
    method public String toString();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class MenuItemWrapperICS {
    method public boolean collapseActionView();
    method public boolean expandActionView();
    method public android.view.ActionProvider! getActionProvider();
    method public android.view.View! getActionView();
    method public int getAlphabeticModifiers();
    method public char getAlphabeticShortcut();
    method public CharSequence! getContentDescription();
    method public int getGroupId();
    method public android.graphics.drawable.Drawable! getIcon();
    method public android.content.res.ColorStateList! getIconTintList();
    method public android.graphics.PorterDuff.Mode! getIconTintMode();
    method public android.content.Intent! getIntent();
    method public int getItemId();
    method public android.view.ContextMenu.ContextMenuInfo! getMenuInfo();
    method public int getNumericModifiers();
    method public char getNumericShortcut();
    method public int getOrder();
    method public android.view.SubMenu! getSubMenu();
    method public CharSequence! getTitle();
    method public CharSequence! getTitleCondensed();
    method public CharSequence! getTooltipText();
    method public boolean hasSubMenu();
    method public boolean isActionViewExpanded();
    method public boolean isCheckable();
    method public boolean isChecked();
    method public boolean isEnabled();
    method public boolean isVisible();
    method public android.view.MenuItem! setActionProvider(android.view.ActionProvider!);
    method public android.view.MenuItem! setActionView(android.view.View!);
    method public android.view.MenuItem! setActionView(int);
    method public android.view.MenuItem! setAlphabeticShortcut(char);
    method public android.view.MenuItem! setAlphabeticShortcut(char, int);
    method public android.view.MenuItem! setCheckable(boolean);
    method public android.view.MenuItem! setChecked(boolean);
    method public android.view.MenuItem! setContentDescription(CharSequence!);
    method public android.view.MenuItem! setEnabled(boolean);
    method public void setExclusiveCheckable(boolean);
    method public android.view.MenuItem! setIcon(android.graphics.drawable.Drawable!);
    method public android.view.MenuItem! setIcon(int);
    method public android.view.MenuItem! setIconTintList(android.content.res.ColorStateList!);
    method public android.view.MenuItem! setIconTintMode(android.graphics.PorterDuff.Mode!);
    method public android.view.MenuItem! setIntent(android.content.Intent!);
    method public android.view.MenuItem! setNumericShortcut(char);
    method public android.view.MenuItem! setNumericShortcut(char, int);
    method public android.view.MenuItem! setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener!);
    method public android.view.MenuItem! setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener!);
    method public android.view.MenuItem! setShortcut(char, char);
    method public android.view.MenuItem! setShortcut(char, char, int, int);
    method public void setShowAsAction(int);
    method public android.view.MenuItem! setShowAsActionFlags(int);
    method public android.view.MenuItem! setTitle(CharSequence!);
    method public android.view.MenuItem! setTitle(int);
    method public android.view.MenuItem! setTitleCondensed(CharSequence!);
    method public android.view.MenuItem! setTooltipText(CharSequence!);
    method public android.view.MenuItem! setVisible(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class MenuPopupHelper {
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View, boolean, @AttrRes int);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View, boolean, @AttrRes int, @StyleRes int);
    method public void dismiss();
    method public int getGravity();
    method public android.widget.ListView! getListView();
    method public androidx.appcompat.view.menu.MenuPopup getPopup();
    method public boolean isShowing();
    method protected void onDismiss();
    method public void setAnchorView(android.view.View);
    method public void setForceShowIcon(boolean);
    method public void setGravity(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener?);
    method public void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter.Callback?);
    method public void show();
    method public void show(int, int);
    method public boolean tryShow();
    method public boolean tryShow(int, int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface MenuPresenter {
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean flagActionItems();
    method public int getId();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void updateMenuView(boolean);
  }

  public static interface MenuPresenter.Callback {
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface MenuView {
    method public int getWindowAnimations();
    method public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
  }

  public static interface MenuView.ItemView {
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setEnabled(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setShortcut(boolean, char);
    method public void setTitle(CharSequence!);
    method public boolean showsIcon();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class MenuWrapperFactory {
    method public static android.view.Menu! wrapSupportMenu(android.content.Context!, androidx.core.internal.view.SupportMenu!);
    method public static android.view.MenuItem! wrapSupportMenuItem(android.content.Context!, androidx.core.internal.view.SupportMenuItem!);
    method public static android.view.SubMenu! wrapSupportSubMenu(android.content.Context!, androidx.core.internal.view.SupportSubMenu!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface ShowableListMenu {
    method public void dismiss();
    method public android.widget.ListView! getListView();
    method public boolean isShowing();
    method public void show();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class SubMenuBuilder extends androidx.appcompat.view.menu.MenuBuilder {
    ctor public SubMenuBuilder(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public String! getActionViewStatesKey();
    method public android.view.MenuItem! getItem();
    method public android.view.Menu! getParentMenu();
    method public boolean isQwertyMode();
    method public android.view.SubMenu! setHeaderIcon(android.graphics.drawable.Drawable!);
    method public android.view.SubMenu! setHeaderIcon(int);
    method public android.view.SubMenu! setHeaderTitle(CharSequence!);
    method public android.view.SubMenu! setHeaderTitle(int);
    method public android.view.SubMenu! setHeaderView(android.view.View!);
    method public android.view.SubMenu! setIcon(android.graphics.drawable.Drawable!);
    method public android.view.SubMenu! setIcon(int);
  }

}

package androidx.appcompat.widget {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionBarContainer {
    ctor public ActionBarContainer(android.content.Context!);
    ctor public ActionBarContainer(android.content.Context!, android.util.AttributeSet!);
    method protected void drawableStateChanged();
    method public android.view.View! getTabContainer();
    method public void jumpDrawablesToCurrentState();
    method public void onFinishInflate();
    method public boolean onHoverEvent(android.view.MotionEvent!);
    method public boolean onInterceptTouchEvent(android.view.MotionEvent!);
    method public void onLayout(boolean, int, int, int, int);
    method public void onMeasure(int, int);
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setPrimaryBackground(android.graphics.drawable.Drawable!);
    method public void setSplitBackground(android.graphics.drawable.Drawable!);
    method public void setStackedBackground(android.graphics.drawable.Drawable!);
    method public void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setTransitioning(boolean);
    method public void setVisibility(int);
    method public android.view.ActionMode! startActionModeForChild(android.view.View!, android.view.ActionMode.Callback!);
    method public android.view.ActionMode! startActionModeForChild(android.view.View!, android.view.ActionMode.Callback!, int);
    method protected boolean verifyDrawable(android.graphics.drawable.Drawable!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionBarContextView {
    ctor public ActionBarContextView(android.content.Context!);
    ctor public ActionBarContextView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionBarContextView(android.content.Context!, android.util.AttributeSet!, int);
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void closeMode();
    method public void dismissPopupMenus();
    method protected android.view.ViewGroup.LayoutParams! generateDefaultLayoutParams();
    method public android.view.ViewGroup.LayoutParams! generateLayoutParams(android.util.AttributeSet!);
    method public int getAnimatedVisibility();
    method public int getContentHeight();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public boolean hideOverflowMenu();
    method public void initForMode(androidx.appcompat.view.ActionMode!);
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isOverflowReserved();
    method public boolean isTitleOptional();
    method public void killMode();
    method public void onDetachedFromWindow();
    method public boolean onHoverEvent(android.view.MotionEvent!);
    method public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent!);
    method protected void onLayout(boolean, int, int, int, int);
    method protected void onMeasure(int, int);
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void postShowOverflowMenu();
    method public void setContentHeight(int);
    method public void setCustomView(android.view.View!);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method public void setTitleOptional(boolean);
    method public void setVisibility(int);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean shouldDelayChildPressedState();
    method public boolean showOverflowMenu();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActionBarOverlayLayout implements androidx.appcompat.widget.DecorContentParent {
    ctor public ActionBarOverlayLayout(android.content.Context!);
    ctor public ActionBarOverlayLayout(android.content.Context!, android.util.AttributeSet!);
    method public boolean canShowOverflowMenu();
    method protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams!);
    method public void dismissPopups();
    method public void draw(android.graphics.Canvas!);
    method protected boolean fitSystemWindows(android.graphics.Rect!);
    method protected androidx.appcompat.widget.ActionBarOverlayLayout.LayoutParams! generateDefaultLayoutParams();
    method public androidx.appcompat.widget.ActionBarOverlayLayout.LayoutParams! generateLayoutParams(android.util.AttributeSet!);
    method protected android.view.ViewGroup.LayoutParams! generateLayoutParams(android.view.ViewGroup.LayoutParams!);
    method public int getActionBarHideOffset();
    method public int getNestedScrollAxes();
    method public CharSequence! getTitle();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initFeature(int);
    method public boolean isHideOnContentScrollEnabled();
    method public boolean isInOverlayMode();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method protected void onConfigurationChanged(android.content.res.Configuration!);
    method protected void onDetachedFromWindow();
    method protected void onLayout(boolean, int, int, int, int);
    method protected void onMeasure(int, int);
    method public boolean onNestedFling(android.view.View!, float, float, boolean);
    method public boolean onNestedPreFling(android.view.View!, float, float);
    method public void onNestedPreScroll(android.view.View!, int, int, int[]!);
    method public void onNestedScroll(android.view.View!, int, int, int, int);
    method public void onNestedScrollAccepted(android.view.View!, android.view.View!, int);
    method public boolean onStartNestedScroll(android.view.View!, android.view.View!, int);
    method public void onStopNestedScroll(android.view.View!);
    method public void onWindowSystemUiVisibilityChanged(int);
    method protected void onWindowVisibilityChanged(int);
    method public void restoreToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setActionBarHideOffset(int);
    method public void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback!);
    method public void setHasNonEmbeddedTabs(boolean);
    method public void setHideOnContentScrollEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuPrepared();
    method public void setOverlayMode(boolean);
    method public void setShowingForActionMode(boolean);
    method public void setUiOptions(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public boolean shouldDelayChildPressedState();
    method public boolean showOverflowMenu();
  }

  public static interface ActionBarOverlayLayout.ActionBarVisibilityCallback {
    method public void enableContentAnimations(boolean);
    method public void hideForSystem();
    method public void onContentScrollStarted();
    method public void onContentScrollStopped();
    method public void onWindowVisibilityChanged(int);
    method public void showForSystem();
  }

  public static class ActionBarOverlayLayout.LayoutParams {
    ctor public ActionBarOverlayLayout.LayoutParams(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionBarOverlayLayout.LayoutParams(int, int);
    ctor public ActionBarOverlayLayout.LayoutParams(android.view.ViewGroup.LayoutParams!);
    ctor public ActionBarOverlayLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams!);
  }

  public class ActionMenuView extends androidx.appcompat.widget.LinearLayoutCompat implements androidx.appcompat.view.menu.MenuBuilder.ItemInvoker androidx.appcompat.view.menu.MenuView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.widget.ActionMenuView.LayoutParams! generateOverflowButtonLayoutParams();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getWindowAnimations();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) protected boolean hasSupportDividerBeforeChildAt(int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isOverflowMenuShowPending();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isOverflowReserved();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.view.menu.MenuBuilder! peekMenu();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setExpandedActionViewsExclusive(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setOverflowReserved(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setPresenter(androidx.appcompat.widget.ActionMenuPresenter!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static interface ActionMenuView.ActionMenuChildView {
    method public boolean needsDividerAfter();
    method public boolean needsDividerBefore();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ActivityChooserView {
    ctor public ActivityChooserView(android.content.Context!);
    ctor public ActivityChooserView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActivityChooserView(android.content.Context!, android.util.AttributeSet!, int);
    method public boolean dismissPopup();
    method public androidx.appcompat.widget.ActivityChooserModel! getDataModel();
    method public boolean isShowingPopup();
    method protected void onAttachedToWindow();
    method protected void onDetachedFromWindow();
    method protected void onLayout(boolean, int, int, int, int);
    method protected void onMeasure(int, int);
    method public void setActivityChooserModel(androidx.appcompat.widget.ActivityChooserModel!);
    method public void setDefaultActionButtonContentDescription(int);
    method public void setExpandActivityOverflowButtonContentDescription(int);
    method public void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable!);
    method public void setInitialActivityCount(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setProvider(androidx.core.view.ActionProvider!);
    method public boolean showPopup();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class ActivityChooserView.InnerLayout {
    ctor public ActivityChooserView.InnerLayout(android.content.Context!, android.util.AttributeSet!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class AlertDialogLayout extends androidx.appcompat.widget.LinearLayoutCompat {
    ctor public AlertDialogLayout(android.content.Context?);
    ctor public AlertDialogLayout(android.content.Context?, android.util.AttributeSet?);
  }

  public class AppCompatAutoCompleteTextView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatButton {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeMaxTextSize();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeMinTextSize();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeStepGranularity();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int[]! getAutoSizeTextAvailableSizes();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeTextType();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeUniformWithConfiguration(int, int, int, int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeUniformWithPresetSizes(int[], int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeWithDefaults(int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatCheckBox {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportButtonTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportButtonTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportButtonTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportButtonTintMode(android.graphics.PorterDuff.Mode?);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class AppCompatDrawableManager {
    ctor public AppCompatDrawableManager();
    method public static androidx.appcompat.widget.AppCompatDrawableManager! get();
    method public android.graphics.drawable.Drawable! getDrawable(android.content.Context, @DrawableRes int);
    method public static android.graphics.PorterDuffColorFilter! getPorterDuffColorFilter(int, android.graphics.PorterDuff.Mode!);
    method public void onConfigurationChanged(android.content.Context);
  }

  public class AppCompatEditText {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatImageButton {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportImageTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportImageTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportImageTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportImageTintMode(android.graphics.PorterDuff.Mode?);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class AppCompatImageHelper {
    ctor public AppCompatImageHelper(android.widget.ImageView!);
    method public void loadFromAttributes(android.util.AttributeSet!, int);
    method public void setImageResource(int);
  }

  public class AppCompatImageView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportImageTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportImageTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportImageTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportImageTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatMultiAutoCompleteTextView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatRadioButton {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportButtonTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportButtonTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportButtonTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportButtonTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatSpinner {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  public class AppCompatTextView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeMaxTextSize();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeMinTextSize();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeStepGranularity();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int[]! getAutoSizeTextAvailableSizes();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getAutoSizeTextType();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.content.res.ColorStateList? getSupportBackgroundTintList();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public android.graphics.PorterDuff.Mode? getSupportBackgroundTintMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeUniformWithConfiguration(int, int, int, int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeUniformWithPresetSizes(int[], int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAutoSizeTextTypeWithDefaults(int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintList(android.content.res.ColorStateList?);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode?);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ButtonBarLayout {
    ctor public ButtonBarLayout(android.content.Context!, android.util.AttributeSet!);
    method public int getMinimumHeight();
    method protected void onMeasure(int, int);
    method public void setAllowStacking(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public class ContentFrameLayout {
    ctor public ContentFrameLayout(android.content.Context!);
    ctor public ContentFrameLayout(android.content.Context!, android.util.AttributeSet!);
    ctor public ContentFrameLayout(android.content.Context!, android.util.AttributeSet!, int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void dispatchFitSystemWindows(android.graphics.Rect!);
    method public android.util.TypedValue! getFixedHeightMajor();
    method public android.util.TypedValue! getFixedHeightMinor();
    method public android.util.TypedValue! getFixedWidthMajor();
    method public android.util.TypedValue! getFixedWidthMinor();
    method public android.util.TypedValue! getMinWidthMajor();
    method public android.util.TypedValue! getMinWidthMinor();
    method protected void onAttachedToWindow();
    method protected void onDetachedFromWindow();
    method protected void onMeasure(int, int);
    method public void setAttachListener(androidx.appcompat.widget.ContentFrameLayout.OnAttachListener!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setDecorPadding(int, int, int, int);
  }

  public static interface ContentFrameLayout.OnAttachListener {
    method public void onAttachedFromWindow();
    method public void onDetachedFromWindow();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface DecorContentParent {
    method public boolean canShowOverflowMenu();
    method public void dismissPopups();
    method public CharSequence! getTitle();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initFeature(int);
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public void restoreToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuPrepared();
    method public void setUiOptions(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public boolean showOverflowMenu();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface DecorToolbar {
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void collapseActionView();
    method public void dismissPopupMenus();
    method public android.content.Context! getContext();
    method public android.view.View! getCustomView();
    method public int getDisplayOptions();
    method public int getDropdownItemCount();
    method public int getDropdownSelectedPosition();
    method public int getHeight();
    method public android.view.Menu! getMenu();
    method public int getNavigationMode();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public android.view.ViewGroup! getViewGroup();
    method public int getVisibility();
    method public boolean hasEmbeddedTabs();
    method public boolean hasExpandedActionView();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initIndeterminateProgress();
    method public void initProgress();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isTitleTruncated();
    method public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable!);
    method public void setCollapsible(boolean);
    method public void setCustomView(android.view.View!);
    method public void setDefaultNavigationContentDescription(int);
    method public void setDefaultNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setDisplayOptions(int);
    method public void setDropdownParams(android.widget.SpinnerAdapter!, android.widget.AdapterView.OnItemSelectedListener!);
    method public void setDropdownSelectedPosition(int);
    method public void setEmbeddedTabView(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setHomeButtonEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setLogo(android.graphics.drawable.Drawable!);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setMenuPrepared();
    method public void setNavigationContentDescription(CharSequence!);
    method public void setNavigationContentDescription(int);
    method public void setNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setNavigationIcon(int);
    method public void setNavigationMode(int);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method public void setVisibility(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean showOverflowMenu();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class DialogTitle {
    ctor public DialogTitle(android.content.Context!, android.util.AttributeSet!, int);
    ctor public DialogTitle(android.content.Context!, android.util.AttributeSet!);
    ctor public DialogTitle(android.content.Context!);
    method protected void onMeasure(int, int);
    method public void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class DrawableUtils {
    method public static boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable);
    method public static android.graphics.Rect! getOpticalBounds(android.graphics.drawable.Drawable!);
    method public static android.graphics.PorterDuff.Mode! parseTintMode(int, android.graphics.PorterDuff.Mode!);
    field public static final android.graphics.Rect! INSETS_NONE;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class FitWindowsFrameLayout implements androidx.appcompat.widget.FitWindowsViewGroup {
    ctor public FitWindowsFrameLayout(android.content.Context!);
    ctor public FitWindowsFrameLayout(android.content.Context!, android.util.AttributeSet!);
    method protected boolean fitSystemWindows(android.graphics.Rect!);
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class FitWindowsLinearLayout implements androidx.appcompat.widget.FitWindowsViewGroup {
    ctor public FitWindowsLinearLayout(android.content.Context!);
    ctor public FitWindowsLinearLayout(android.content.Context!, android.util.AttributeSet!);
    method protected boolean fitSystemWindows(android.graphics.Rect!);
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface FitWindowsViewGroup {
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
  }

  public static interface FitWindowsViewGroup.OnFitSystemWindowsListener {
    method public void onFitSystemWindows(android.graphics.Rect!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public abstract class ForwardingListener {
    ctor public ForwardingListener(android.view.View!);
    method public abstract androidx.appcompat.view.menu.ShowableListMenu! getPopup();
    method protected boolean onForwardingStarted();
    method protected boolean onForwardingStopped();
    method public boolean onTouch(android.view.View!, android.view.MotionEvent!);
    method public void onViewAttachedToWindow(android.view.View!);
    method public void onViewDetachedFromWindow(android.view.View!);
  }

  public class LinearLayoutCompat {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public int getDividerWidth();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) protected boolean hasDividerBeforeChildAt(int);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface LinearLayoutCompat.DividerMode {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface LinearLayoutCompat.OrientationMode {
  }

  public class ListPopupWindow implements androidx.appcompat.view.menu.ShowableListMenu {
    method public void dismiss();
    method public android.widget.ListView? getListView();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isDropDownAlwaysVisible();
    method public boolean isShowing();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setDropDownAlwaysVisible(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setEpicenterBounds(android.graphics.Rect!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setForceIgnoreOutsideTouch(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setOverlapAnchor(boolean);
    method public void show();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface MenuItemHoverListener {
    method public void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class MenuPopupWindow extends androidx.appcompat.widget.ListPopupWindow implements androidx.appcompat.widget.MenuItemHoverListener {
    ctor public MenuPopupWindow(android.content.Context!, android.util.AttributeSet!, int, int);
    method public void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void setEnterTransition(Object!);
    method public void setExitTransition(Object!);
    method public void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener!);
    method public void setTouchModal(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class MenuPopupWindow.MenuDropDownListView {
    ctor public MenuPopupWindow.MenuDropDownListView(android.content.Context!, boolean);
    method public void clearSelection();
    method public boolean hasFocus();
    method public boolean hasWindowFocus();
    method public boolean isFocused();
    method public boolean isInTouchMode();
    method public int lookForSelectablePosition(int, boolean);
    method public int measureHeightOfChildrenCompat(int, int, int, int, int);
    method public boolean onForwardedEvent(android.view.MotionEvent!, int);
    method public boolean onHoverEvent(android.view.MotionEvent!);
    method public boolean onKeyDown(int, android.view.KeyEvent!);
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener!);
    method public void setSelector(android.graphics.drawable.Drawable!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ScrollingTabContainerView {
    ctor public ScrollingTabContainerView(android.content.Context!);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, boolean);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, int, boolean);
    method public void animateToTab(int);
    method public void animateToVisibility(int);
    method public void onAttachedToWindow();
    method protected void onConfigurationChanged(android.content.res.Configuration!);
    method public void onDetachedFromWindow();
    method public void onItemSelected(android.widget.AdapterView<?>!, android.view.View!, int, long);
    method public void onMeasure(int, int);
    method public void onNothingSelected(android.widget.AdapterView<?>!);
    method public void removeAllTabs();
    method public void removeTabAt(int);
    method public void setAllowCollapse(boolean);
    method public void setContentHeight(int);
    method public void setTabSelected(int);
    method public void updateTab(int);
    field protected final androidx.appcompat.widget.ScrollingTabContainerView.VisibilityAnimListener! mVisAnimListener;
    field protected android.view.ViewPropertyAnimator! mVisibilityAnim;
  }

  protected class ScrollingTabContainerView.VisibilityAnimListener {
    ctor protected ScrollingTabContainerView.VisibilityAnimListener();
    method public void onAnimationCancel(android.animation.Animator!);
    method public void onAnimationEnd(android.animation.Animator!);
    method public void onAnimationStart(android.animation.Animator!);
    method public androidx.appcompat.widget.ScrollingTabContainerView.VisibilityAnimListener! withFinalVisibility(android.view.ViewPropertyAnimator!, int);
  }

  public class SearchView extends androidx.appcompat.widget.LinearLayoutCompat implements androidx.appcompat.view.CollapsibleActionView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setAppSearchData(android.os.Bundle!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class SearchView.SearchAutoComplete extends androidx.appcompat.widget.AppCompatAutoCompleteTextView {
    ctor public SearchView.SearchAutoComplete(android.content.Context!);
    ctor public SearchView.SearchAutoComplete(android.content.Context!, android.util.AttributeSet!);
    ctor public SearchView.SearchAutoComplete(android.content.Context!, android.util.AttributeSet!, int);
    method public boolean enoughToFilter();
    method protected void onFinishInflate();
    method protected void onFocusChanged(boolean, int, android.graphics.Rect!);
    method public boolean onKeyPreIme(int, android.view.KeyEvent!);
    method public void onWindowFocusChanged(boolean);
    method public void performCompletion();
    method protected void replaceText(CharSequence!);
    method public void setThreshold(int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class TintContextWrapper {
    method public android.content.res.AssetManager! getAssets();
    method public android.content.res.Resources! getResources();
    method public android.content.res.Resources.Theme! getTheme();
    method public void setTheme(int);
    method public static android.content.Context! wrap(android.content.Context);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class TintTypedArray {
    method public boolean getBoolean(int, boolean);
    method @RequiresApi(21) public int getChangingConfigurations();
    method public int getColor(int, int);
    method public android.content.res.ColorStateList! getColorStateList(int);
    method public float getDimension(int, float);
    method public int getDimensionPixelOffset(int, int);
    method public int getDimensionPixelSize(int, int);
    method public android.graphics.drawable.Drawable! getDrawable(int);
    method public android.graphics.drawable.Drawable! getDrawableIfKnown(int);
    method public float getFloat(int, float);
    method public android.graphics.Typeface? getFont(@StyleableRes int, int, androidx.core.content.res.ResourcesCompat.FontCallback?);
    method public float getFraction(int, int, int, float);
    method public int getIndex(int);
    method public int getIndexCount();
    method public int getInt(int, int);
    method public int getInteger(int, int);
    method public int getLayoutDimension(int, String!);
    method public int getLayoutDimension(int, int);
    method public String! getNonResourceString(int);
    method public String! getPositionDescription();
    method public int getResourceId(int, int);
    method public android.content.res.Resources! getResources();
    method public String! getString(int);
    method public CharSequence! getText(int);
    method public CharSequence[]! getTextArray(int);
    method public int getType(int);
    method public boolean getValue(int, android.util.TypedValue!);
    method public boolean hasValue(int);
    method public int length();
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, android.util.AttributeSet!, int[]!);
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, android.util.AttributeSet!, int[]!, int, int);
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, int, int[]!);
    method public android.util.TypedValue! peekValue(int);
    method public void recycle();
  }

  public class Toolbar {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean canShowOverflowMenu();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.appcompat.widget.DecorToolbar! getWrapper();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isOverflowMenuShowPending();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public boolean isTitleTruncated();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setCollapsible(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setMenu(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.widget.ActionMenuPresenter!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ToolbarWidgetWrapper implements androidx.appcompat.widget.DecorToolbar {
    ctor public ToolbarWidgetWrapper(androidx.appcompat.widget.Toolbar!, boolean);
    ctor public ToolbarWidgetWrapper(androidx.appcompat.widget.Toolbar!, boolean, int, int);
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void collapseActionView();
    method public void dismissPopupMenus();
    method public android.content.Context! getContext();
    method public android.view.View! getCustomView();
    method public int getDisplayOptions();
    method public int getDropdownItemCount();
    method public int getDropdownSelectedPosition();
    method public int getHeight();
    method public android.view.Menu! getMenu();
    method public int getNavigationMode();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public android.view.ViewGroup! getViewGroup();
    method public int getVisibility();
    method public boolean hasEmbeddedTabs();
    method public boolean hasExpandedActionView();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initIndeterminateProgress();
    method public void initProgress();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isTitleTruncated();
    method public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable!);
    method public void setCollapsible(boolean);
    method public void setCustomView(android.view.View!);
    method public void setDefaultNavigationContentDescription(int);
    method public void setDefaultNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setDisplayOptions(int);
    method public void setDropdownParams(android.widget.SpinnerAdapter!, android.widget.AdapterView.OnItemSelectedListener!);
    method public void setDropdownSelectedPosition(int);
    method public void setEmbeddedTabView(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setHomeButtonEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setLogo(android.graphics.drawable.Drawable!);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setMenuPrepared();
    method public void setNavigationContentDescription(CharSequence!);
    method public void setNavigationContentDescription(int);
    method public void setNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setNavigationIcon(int);
    method public void setNavigationMode(int);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method public void setVisibility(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean showOverflowMenu();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class VectorEnabledTintResources {
    ctor public VectorEnabledTintResources(android.content.Context, android.content.res.Resources);
    method public android.graphics.drawable.Drawable! getDrawable(int);
    method public static boolean isCompatVectorFromResourcesEnabled();
    method public static void setCompatVectorFromResourcesEnabled(boolean);
    method public static boolean shouldBeUsed();
    field public static final int MAX_SDK_WHERE_REQUIRED = 20; // 0x14
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ViewStubCompat {
    ctor public ViewStubCompat(android.content.Context!, android.util.AttributeSet!);
    ctor public ViewStubCompat(android.content.Context!, android.util.AttributeSet!, int);
    method protected void dispatchDraw(android.graphics.Canvas!);
    method public void draw(android.graphics.Canvas!);
    method public int getInflatedId();
    method public android.view.LayoutInflater! getLayoutInflater();
    method public int getLayoutResource();
    method public android.view.View! inflate();
    method protected void onMeasure(int, int);
    method public void setInflatedId(int);
    method public void setLayoutInflater(android.view.LayoutInflater!);
    method public void setLayoutResource(int);
    method public void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat.OnInflateListener!);
    method public void setVisibility(int);
  }

  public static interface ViewStubCompat.OnInflateListener {
    method public void onInflate(androidx.appcompat.widget.ViewStubCompat!, android.view.View!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ViewUtils {
    method public static void computeFitSystemWindows(android.view.View!, android.graphics.Rect!, android.graphics.Rect!);
    method public static boolean isLayoutRtl(android.view.View!);
    method public static void makeOptionalFitsSystemWindows(android.view.View!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public interface WithHint {
    method public CharSequence? getHint();
  }

}

