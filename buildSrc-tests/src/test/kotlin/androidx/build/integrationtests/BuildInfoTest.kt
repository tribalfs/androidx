/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package androidx.build.integrationtests

import androidx.build.AndroidXPluginTestContext
import androidx.build.AndroidXSelfTestProject
import androidx.build.assertExists
import androidx.build.pluginTest
import androidx.build.writeBuildFiles
import net.saff.checkmark.Checkmark.Companion.check
import org.junit.Test

class BuildInfoTest {
    @Test
    fun kmpBuildInfoTasks() = pluginTest {
        val env = environmentForExplicitChangeInfo()

        writeBuildFiles(
            AndroidXSelfTestProject.cubaneKmpProject.copy(
                buildGradleText = AndroidXSelfTestProject.buildGradleForKmp(
                    withJava = true,
                    addJvmDependency = true
                )
            )
        )

        // Run to generate build_info file to examine.
        runGradle(":cubane:cubanekmp:createLibraryBuildInfoFilesJvm", "--stacktrace", env = env)

        // Generated by command above.  See CreateLibraryBuildInfoFileTask doc for derivation
        // of filename
        val buildInfoPath = "dist/build-info/cubane_cubanekmp-jvm_build_info.txt"
        outDir.resolve(buildInfoPath).readText().check {
            it.contains("\"artifactId\": \"cubanekmp-jvm\"")
        }.check {
            it.contains("jvmdep")
        }
    }

    @Test
    fun androidLibraryBuildInfoTasks() = pluginTest {
        val env = environmentForExplicitChangeInfo()

        writeBuildFiles(
            AndroidXSelfTestProject.cubaneProject.copy(
                buildGradleText = AndroidXSelfTestProject.cubaneBuildGradleText(
                    plugins = listOf("com.android.library", "AndroidXPlugin")
                )
            )
        )

        // Run to generate build_info file to examine.
        runGradle(":cubane:cubane:createLibraryBuildInfoFiles", "--stacktrace", env = env)

        // Generated by command above.  See CreateLibraryBuildInfoFileTask doc for derivation
        // of filename
        val buildInfoPath = "dist/build-info/cubane_cubane_build_info.txt"
        outDir.resolve(buildInfoPath).assertExists().readText().check {
            it.contains("\"artifactId\": \"cubane\"")
        }
    }

    @Test
    fun androidLibraryMppBuildInfoTasks() = pluginTest {
        val env = environmentForExplicitChangeInfo()

        writeBuildFiles(
            AndroidXSelfTestProject.cubaneProject.copy(
                buildGradleText = AndroidXSelfTestProject.cubaneBuildGradleText(
                    plugins = listOf(
                        "AndroidXPlugin",
                        "com.android.library",
                        "AndroidXComposePlugin"
                    ),
                    moreConfig =
                    """|import androidx.build.AndroidXComposePlugin
                       |AndroidXComposePlugin.applyAndConfigureKotlinPlugin(project)
                       |
                       |android {
                       |  namespace "androidx.compose.animation"
                       |}
                       |
                       |androidXComposeMultiplatform {
                       |  android()
                       |  desktop()
                       |}
                       |""".trimMargin()
                )
            ),

            AndroidXSelfTestProject(
                groupId = "compose",
                artifactId = "compiler:compiler",
                version = null,
                buildGradleText = ""
            )
        )

        // Run to generate build_info file to examine.
        runGradle(
            "-Pandroidx.compose.multiplatformEnabled=true",
            ":cubane:cubane:createLibraryBuildInfoFilesAndroid",
            "--stacktrace",
            env = env
        )

        // Generated by command above.  See CreateLibraryBuildInfoFileTask doc for derivation
        // of filename
        val buildInfoPath = "dist/build-info/cubane_cubane-android_build_info.txt"
        outDir.resolve(buildInfoPath).assertExists().readText().check {
            it.contains("\"artifactId\": \"cubane-android\"")
        }
    }

    @Test
    fun pluginBuildInfoTasks() = pluginTest {
        val env = environmentForExplicitChangeInfo()

        writeBuildFiles(
            AndroidXSelfTestProject.cubaneProject.copy(
                buildGradleText = AndroidXSelfTestProject.cubaneBuildGradleText(
                    plugins = listOf("AndroidXPlugin", "kotlin", "java-gradle-plugin"),
                    moreConfig =
                    """|gradlePlugin {
                       |  plugins {
                       |    benchmark {
                       |      id = "androidx.benchmark"
                       |      implementationClass = "androidx.benchmark.gradle.BenchmarkPlugin"
                       |    }
                       |  }
                       |}
                       |""".trimMargin()
                )
            )
        )

        // Run to generate build_info file to examine.
        runGradle(":cubane:cubane:createLibraryBuildInfoFiles", "--stacktrace", env = env)

        // Generated by command above.  See CreateLibraryBuildInfoFileTask doc for derivation
        // of filename
        val buildInfoPath = "dist/build-info/cubane_cubane_build_info.txt"
        outDir.resolve(buildInfoPath).assertExists().readText().check {
            it.contains("\"artifactId\": \"cubane\"")
        }
    }

    /**
     * Avoid calling git in tests by taking advantage of environment variables with changelist info
     * and manifest of changed files.  (These are usually set by busytown and detected in our
     * builds, cf b/203692753)
     */
    private fun AndroidXPluginTestContext.environmentForExplicitChangeInfo(): Map<String, String> {
        val gitChangeFilesDir = tmpFolder.newFolder()
        val gitChangeInfoFilename = gitChangeFilesDir.resolve("CHANGE_INFO").apply {
            writeText("{}")
        }
        val gitManifestFilename = gitChangeFilesDir.resolve("MANIFEST").apply {
            writeText("path=\"frameworks/support\" revision=\"testRev\" ")
        }
        return mapOf(
            "CHANGE_INFO" to gitChangeInfoFilename.path,
            "MANIFEST" to gitManifestFilename.path
        )
    }
}