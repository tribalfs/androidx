// Signature format: 3.0
package androidx.camera.camera2 {

  public final class Camera2Config {
    method public static androidx.camera.core.CameraXConfig defaultConfig(android.content.Context);
  }

}

package @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) androidx.camera.camera2.impl {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface CamcorderProfileHelper {
    method public boolean hasProfile(int, int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Camera2CameraCaptureResultConverter {
    method public static android.hardware.camera2.CaptureResult! getCaptureResult(androidx.camera.core.CameraCaptureResult!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Camera2CameraControl implements androidx.camera.core.CameraControlInternal {
    ctor public Camera2CameraControl(android.hardware.camera2.CameraCharacteristics, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.Executor, androidx.camera.core.CameraControlInternal.ControlUpdateCallback);
    method public void cancelAfAeTrigger(boolean, boolean);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> cancelFocusAndMetering();
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> enableTorch(boolean);
    method public int getFlashMode();
    method public androidx.camera.camera2.impl.TorchControl getTorchControl();
    method public androidx.camera.camera2.impl.ZoomControl getZoomControl();
    method public void setCropRegion(android.graphics.Rect?);
    method public void setFlashMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> setLinearZoom(float);
    method @WorkerThread public void setPreviewAspectRatio(android.util.Rational?);
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> setZoomRatio(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.camera.core.FocusMeteringResult!> startFocusAndMetering(androidx.camera.core.FocusMeteringAction);
    method public void submitCaptureRequests(java.util.List<androidx.camera.core.CaptureConfig!>);
    method public void triggerAePrecapture();
    method public void triggerAf();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Camera2CaptureCallbacks {
    method public static android.hardware.camera2.CameraCaptureSession.CaptureCallback createComboCallback(android.hardware.camera2.CameraCaptureSession.CaptureCallback!...);
    method public static android.hardware.camera2.CameraCaptureSession.CaptureCallback createNoOpCallback();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Camera2ImplConfig implements androidx.camera.core.Config {
    ctor public Camera2ImplConfig(androidx.camera.core.Config);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean containsOption(androidx.camera.core.Config.Option<?>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void findOptions(String, androidx.camera.core.Config.OptionMatcher);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.camera.camera2.impl.CameraEventCallbacks? getCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public <ValueT> ValueT? getCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>, ValueT?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int getCaptureRequestTemplate(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.hardware.camera2.CameraDevice.StateCallback? getDeviceStateCallback(android.hardware.camera2.CameraDevice.StateCallback?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.hardware.camera2.CameraCaptureSession.CaptureCallback? getSessionCaptureCallback(android.hardware.camera2.CameraCaptureSession.CaptureCallback?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.hardware.camera2.CameraCaptureSession.StateCallback? getSessionStateCallback(android.hardware.camera2.CameraCaptureSession.StateCallback?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public java.util.Set<androidx.camera.core.Config.Option<?>!> listOptions();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public <ValueT> ValueT? retrieveOption(androidx.camera.core.Config.Option<ValueT!>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public <ValueT> ValueT? retrieveOption(androidx.camera.core.Config.Option<ValueT!>, ValueT?);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final class Camera2ImplConfig.Builder implements androidx.camera.core.ExtendableBuilder<androidx.camera.camera2.impl.Camera2ImplConfig> {
    ctor public Camera2ImplConfig.Builder();
    method public androidx.camera.camera2.impl.Camera2ImplConfig build();
    method public androidx.camera.core.MutableConfig getMutableConfig();
    method public androidx.camera.camera2.impl.Camera2ImplConfig.Builder insertAllOptions(androidx.camera.core.Config);
    method public <ValueT> androidx.camera.camera2.impl.Camera2ImplConfig.Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>, ValueT);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final class Camera2ImplConfig.Extender<T> {
    ctor public Camera2ImplConfig.Extender(androidx.camera.core.ExtendableBuilder<T!>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.camera.camera2.impl.Camera2ImplConfig.Extender<T!> setCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Camera2LensFacingCameraIdFilter extends androidx.camera.core.LensFacingCameraIdFilter {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class CameraBurstCaptureCallback extends android.hardware.camera2.CameraCaptureSession.CaptureCallback {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class CameraEventCallback {
    ctor public CameraEventCallback();
    method public androidx.camera.core.CaptureConfig! onDisableSession();
    method public androidx.camera.core.CaptureConfig! onEnableSession();
    method public androidx.camera.core.CaptureConfig! onPresetSession();
    method public androidx.camera.core.CaptureConfig! onRepeating();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class CameraEventCallbacks extends androidx.camera.core.MultiValueSet<androidx.camera.camera2.impl.CameraEventCallback> {
    ctor public CameraEventCallbacks(androidx.camera.camera2.impl.CameraEventCallback!...);
    method public androidx.camera.core.MultiValueSet<androidx.camera.camera2.impl.CameraEventCallback!> clone();
    method public androidx.camera.camera2.impl.CameraEventCallbacks.ComboCameraEventCallback createComboCallback();
    method public static androidx.camera.camera2.impl.CameraEventCallbacks createEmptyCallback();
  }

}

