/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "com.android.library"
apply plugin: "com.github.dcendents.android-maven"
apply plugin: "com.jfrog.bintray"
apply plugin: "io.pry.gradle.offline_dependencies"

// Must match the code package.
group = project.ext.group

version = project.ext.version

android {
    compileOptions {
      sourceCompatibility project.ext.javaVersion
      targetCompatibility project.ext.javaVersion
    }

    compileSdkVersion project.ext.compileSdk

    defaultConfig {
        minSdkVersion project.ext.minSdk
        targetSdkVersion project.ext.targetSdk
        versionCode 1
        versionName project.ext.version
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    defaultPublishConfig "release"

    buildTypes {
        debug {
            // TODO(b/120775333): Enabling causes build problems. Re-enable once we have a proper
            // fix.
            // testCoverageEnabled true
        }

        release {
            minifyEnabled true
            // We set useProguard to false, because we only want to reduce the
            // library size but not obfuscate the code.
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.flags'
            consumerProguardFiles "proguard.flags"
        }
    }

    sourceSets {
        main {
          java.srcDirs = ['src/main']
          res.srcDirs = ['src/main/res', 'src/main/res-public']
        }
        main.manifest.srcFile 'src/main/AndroidManifest.xml'
        androidTest {
          java.srcDirs = ['src/androidTest']
          // Don't include the sample apps.
          java.excludes = ['**/cameraview/**']
        }
    }

    lintOptions {
        abortOnError false
    }
}

configurations {
    doclava
}

offlineDependencies {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        google()
        jcenter()
    }

    includeSources = true
    includeJavadocs = true
    includePoms = true
    includeIvyXmls = true
    includeBuildscriptDependencies = true
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    // Internal libraries
    implementation project(':core')

    // Lifecycle
    implementation "android.arch.lifecycle:extensions:${project.ext.lifecycleVersion}"
    implementation "android.arch.lifecycle:runtime:${project.ext.lifecycleVersion}"
    annotationProcessor "android.arch.lifecycle:compiler:${project.ext.lifecycleVersion}" // use kapt for Kotlin
    implementation "android.arch.lifecycle:common-java8:${project.ext.lifecycleVersion}"

    // Android Support Library
    implementation "com.android.support:support-compat:${project.ext.supportLibraryVersion}"
    implementation "com.android.support:support-annotations:${project.ext.supportLibraryVersion}"

    // The Android (e2e) tests
    androidTestImplementation "androidx.test:runner:${project.ext.androidxTestRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${project.ext.androidxTestRulesVersion}"
    androidTestImplementation "com.google.truth:truth:${project.ext.googleTruthVersion}"
    androidTestImplementation "junit:junit:${project.ext.junitVersion}"
    androidTestImplementation "org.mockito:mockito-core:${project.ext.mockitoVersion}"

    // Javadocs
    doclava "com.google.doclava:doclava:${project.ext.doclavaVersion}"
}

task javadocs(type: Javadoc, dependsOn: project.configurations.doclava) {
    description "Generate Javadocs"
    title = null
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    failOnError = false
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    description "Package Javadocs into a jar"
    classifier = "javadoc"
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    description "Package sources into a jar"
    classifier = "sources"
    from android.sourceSets.main.java.sourceFiles
}

task aar(dependsOn: "assembleRelease") {
    group "artifact"
    description "Builds the library AARs"
}

artifacts {
    // Include javadocs in the generated artifacts.
    archives javadocsJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties')
        .newDataInputStream())

bintray {
   user = properties.getProperty("bintray.user")
   key = properties.getProperty("bintray.apikey")

   configurations = ['archives']

   // Don't make files public.
   publish = false

   pkg {
       // Bintray repository name.
       repo = 'camerax'

       // Bintray package name, which is different from the code package.
       name = 'camerax-view'

       userOrg = 'google'
       desc = 'View module for CameraX support library'
       licenses = ['Apache-2.0']
       publicDownloadNumbers = false

       version {
           desc = 'View module for CameraX support library, version ' + project.ext.version
           released = new Date()
           vcsTag = project.ext.version
           attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
       }
   }
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'CameraX View'
            description 'View module for CameraX support library'
            inceptionYear '2018'

            packaging 'aar'

            // Must match the 'group' variable defined at the top.
            groupId project.ext.group

            // Must match the gradle project name.
            artifactId 'view'

            version project.ext.version

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'google'
                    id properties.getProperty('user.id')
                    email properties.getProperty('user.email')
                }
            }
        }
    }
}
