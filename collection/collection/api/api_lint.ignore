// Baseline format: 1.0
KotlinOperator: androidx.collection.CircularArray#get(int):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.CircularIntArray#get(int):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.LongSparseArray#get(long):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.LongSparseArray#get(long, E):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.LruCache#get(K):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.SimpleArrayMap#get(Object):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.SparseArrayCompat#get(int):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: androidx.collection.SparseArrayCompat#get(int, E):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)


MissingNullability: androidx.collection.ArrayMap#ArrayMap(androidx.collection.SimpleArrayMap) parameter #0:
    Missing nullability on parameter `map` in method `ArrayMap`
MissingNullability: androidx.collection.ArrayMap#entrySet():
    Missing nullability on method `entrySet` return
MissingNullability: androidx.collection.ArrayMap#keySet():
    Missing nullability on method `keySet` return
MissingNullability: androidx.collection.ArrayMap#putAll(java.util.Map<? extends K,? extends V>) parameter #0:
    Missing nullability on parameter `map` in method `putAll`
MissingNullability: androidx.collection.ArrayMap#values():
    Missing nullability on method `values` return
MissingNullability: androidx.collection.ArraySet#equals(Object) parameter #0:
    Missing nullability on parameter `object` in method `equals`
MissingNullability: androidx.collection.ArraySet#iterator():
    Missing nullability on method `iterator` return
MissingNullability: androidx.collection.ArraySet#removeAt(int):
    Missing nullability on method `removeAt` return
MissingNullability: androidx.collection.ArraySet#toString():
    Missing nullability on method `toString` return
MissingNullability: androidx.collection.CircularArray#addFirst(E) parameter #0:
    Missing nullability on parameter `e` in method `addFirst`
MissingNullability: androidx.collection.CircularArray#addLast(E) parameter #0:
    Missing nullability on parameter `e` in method `addLast`
MissingNullability: androidx.collection.CircularArray#get(int):
    Missing nullability on method `get` return
MissingNullability: androidx.collection.CircularArray#getFirst():
    Missing nullability on method `getFirst` return
MissingNullability: androidx.collection.CircularArray#getLast():
    Missing nullability on method `getLast` return
MissingNullability: androidx.collection.CircularArray#popFirst():
    Missing nullability on method `popFirst` return
MissingNullability: androidx.collection.CircularArray#popLast():
    Missing nullability on method `popLast` return
MissingNullability: androidx.collection.LongSparseArray#append(long, E) parameter #1:
    Missing nullability on parameter `value` in method `append`
MissingNullability: androidx.collection.LongSparseArray#clone():
    Missing nullability on method `clone` return
MissingNullability: androidx.collection.LongSparseArray#containsValue(E) parameter #0:
    Missing nullability on parameter `value` in method `containsValue`
MissingNullability: androidx.collection.LongSparseArray#get(long, E):
    Missing nullability on method `get` return
MissingNullability: androidx.collection.LongSparseArray#get(long, E) parameter #1:
    Missing nullability on parameter `valueIfKeyNotFound` in method `get`
MissingNullability: androidx.collection.LongSparseArray#indexOfValue(E) parameter #0:
    Missing nullability on parameter `value` in method `indexOfValue`
MissingNullability: androidx.collection.LongSparseArray#put(long, E) parameter #1:
    Missing nullability on parameter `value` in method `put`
MissingNullability: androidx.collection.LongSparseArray#putIfAbsent(long, E):
    Missing nullability on method `putIfAbsent` return
MissingNullability: androidx.collection.LongSparseArray#putIfAbsent(long, E) parameter #1:
    Missing nullability on parameter `value` in method `putIfAbsent`
MissingNullability: androidx.collection.LongSparseArray#remove(long, Object) parameter #1:
    Missing nullability on parameter `value` in method `remove`
MissingNullability: androidx.collection.LongSparseArray#replace(long, E):
    Missing nullability on method `replace` return
MissingNullability: androidx.collection.LongSparseArray#replace(long, E) parameter #1:
    Missing nullability on parameter `value` in method `replace`
MissingNullability: androidx.collection.LongSparseArray#replace(long, E, E) parameter #1:
    Missing nullability on parameter `oldValue` in method `replace`
MissingNullability: androidx.collection.LongSparseArray#replace(long, E, E) parameter #2:
    Missing nullability on parameter `newValue` in method `replace`
MissingNullability: androidx.collection.LongSparseArray#setValueAt(int, E) parameter #1:
    Missing nullability on parameter `value` in method `setValueAt`
MissingNullability: androidx.collection.LongSparseArray#toString():
    Missing nullability on method `toString` return
MissingNullability: androidx.collection.LongSparseArray#valueAt(int):
    Missing nullability on method `valueAt` return
MissingNullability: androidx.collection.LruCache#snapshot():
    Missing nullability on method `snapshot` return
MissingNullability: androidx.collection.LruCache#toString():
    Missing nullability on method `toString` return
MissingNullability: androidx.collection.SimpleArrayMap#SimpleArrayMap(androidx.collection.SimpleArrayMap<K,V>) parameter #0:
    Missing nullability on parameter `map` in method `SimpleArrayMap`
MissingNullability: androidx.collection.SimpleArrayMap#containsValue(Object) parameter #0:
    Missing nullability on parameter `value` in method `containsValue`
MissingNullability: androidx.collection.SimpleArrayMap#equals(Object) parameter #0:
    Missing nullability on parameter `object` in method `equals`
MissingNullability: androidx.collection.SimpleArrayMap#get(Object):
    Missing nullability on method `get` return
MissingNullability: androidx.collection.SimpleArrayMap#get(Object) parameter #0:
    Missing nullability on parameter `key` in method `get`
MissingNullability: androidx.collection.SimpleArrayMap#getOrDefault(Object, V):
    Missing nullability on method `getOrDefault` return
MissingNullability: androidx.collection.SimpleArrayMap#getOrDefault(Object, V) parameter #0:
    Missing nullability on parameter `key` in method `getOrDefault`
MissingNullability: androidx.collection.SimpleArrayMap#getOrDefault(Object, V) parameter #1:
    Missing nullability on parameter `defaultValue` in method `getOrDefault`
MissingNullability: androidx.collection.SimpleArrayMap#keyAt(int):
    Missing nullability on method `keyAt` return
MissingNullability: androidx.collection.SimpleArrayMap#put(K, V):
    Missing nullability on method `put` return
MissingNullability: androidx.collection.SimpleArrayMap#put(K, V) parameter #0:
    Missing nullability on parameter `key` in method `put`
MissingNullability: androidx.collection.SimpleArrayMap#put(K, V) parameter #1:
    Missing nullability on parameter `value` in method `put`
MissingNullability: androidx.collection.SimpleArrayMap#putIfAbsent(K, V):
    Missing nullability on method `putIfAbsent` return
MissingNullability: androidx.collection.SimpleArrayMap#putIfAbsent(K, V) parameter #0:
    Missing nullability on parameter `key` in method `putIfAbsent`
MissingNullability: androidx.collection.SimpleArrayMap#putIfAbsent(K, V) parameter #1:
    Missing nullability on parameter `value` in method `putIfAbsent`
MissingNullability: androidx.collection.SimpleArrayMap#remove(Object):
    Missing nullability on method `remove` return
MissingNullability: androidx.collection.SimpleArrayMap#remove(Object) parameter #0:
    Missing nullability on parameter `key` in method `remove`
MissingNullability: androidx.collection.SimpleArrayMap#remove(Object, Object) parameter #0:
    Missing nullability on parameter `key` in method `remove`
MissingNullability: androidx.collection.SimpleArrayMap#remove(Object, Object) parameter #1:
    Missing nullability on parameter `value` in method `remove`
MissingNullability: androidx.collection.SimpleArrayMap#removeAt(int):
    Missing nullability on method `removeAt` return
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V):
    Missing nullability on method `replace` return
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V) parameter #0:
    Missing nullability on parameter `key` in method `replace`
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V) parameter #1:
    Missing nullability on parameter `value` in method `replace`
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V, V) parameter #0:
    Missing nullability on parameter `key` in method `replace`
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V, V) parameter #1:
    Missing nullability on parameter `oldValue` in method `replace`
MissingNullability: androidx.collection.SimpleArrayMap#replace(K, V, V) parameter #2:
    Missing nullability on parameter `newValue` in method `replace`
MissingNullability: androidx.collection.SimpleArrayMap#setValueAt(int, V):
    Missing nullability on method `setValueAt` return
MissingNullability: androidx.collection.SimpleArrayMap#setValueAt(int, V) parameter #1:
    Missing nullability on parameter `value` in method `setValueAt`
MissingNullability: androidx.collection.SimpleArrayMap#toString():
    Missing nullability on method `toString` return
MissingNullability: androidx.collection.SimpleArrayMap#valueAt(int):
    Missing nullability on method `valueAt` return
MissingNullability: androidx.collection.SparseArrayCompat#append(int, E) parameter #1:
    Missing nullability on parameter `value` in method `append`
MissingNullability: androidx.collection.SparseArrayCompat#clone():
    Missing nullability on method `clone` return
MissingNullability: androidx.collection.SparseArrayCompat#containsValue(E) parameter #0:
    Missing nullability on parameter `value` in method `containsValue`
MissingNullability: androidx.collection.SparseArrayCompat#get(int, E):
    Missing nullability on method `get` return
MissingNullability: androidx.collection.SparseArrayCompat#get(int, E) parameter #1:
    Missing nullability on parameter `valueIfKeyNotFound` in method `get`
MissingNullability: androidx.collection.SparseArrayCompat#indexOfValue(E) parameter #0:
    Missing nullability on parameter `value` in method `indexOfValue`
MissingNullability: androidx.collection.SparseArrayCompat#put(int, E) parameter #1:
    Missing nullability on parameter `value` in method `put`
MissingNullability: androidx.collection.SparseArrayCompat#putIfAbsent(int, E):
    Missing nullability on method `putIfAbsent` return
MissingNullability: androidx.collection.SparseArrayCompat#putIfAbsent(int, E) parameter #1:
    Missing nullability on parameter `value` in method `putIfAbsent`
MissingNullability: androidx.collection.SparseArrayCompat#remove(int, Object) parameter #1:
    Missing nullability on parameter `value` in method `remove`
MissingNullability: androidx.collection.SparseArrayCompat#replace(int, E):
    Missing nullability on method `replace` return
MissingNullability: androidx.collection.SparseArrayCompat#replace(int, E) parameter #1:
    Missing nullability on parameter `value` in method `replace`
MissingNullability: androidx.collection.SparseArrayCompat#replace(int, E, E) parameter #1:
    Missing nullability on parameter `oldValue` in method `replace`
MissingNullability: androidx.collection.SparseArrayCompat#replace(int, E, E) parameter #2:
    Missing nullability on parameter `newValue` in method `replace`
MissingNullability: androidx.collection.SparseArrayCompat#setValueAt(int, E) parameter #1:
    Missing nullability on parameter `value` in method `setValueAt`
MissingNullability: androidx.collection.SparseArrayCompat#toString():
    Missing nullability on method `toString` return
MissingNullability: androidx.collection.SparseArrayCompat#valueAt(int):
    Missing nullability on method `valueAt` return


NoClone: androidx.collection.LongSparseArray#clone():
    Provide an explicit copy constructor instead of implementing `clone()`
NoClone: androidx.collection.SparseArrayCompat#clone():
    Provide an explicit copy constructor instead of implementing `clone()`


VisiblySynchronized: androidx.collection.LruCache#createCount():
    Internal locks must not be exposed: method androidx.collection.LruCache.createCount()
VisiblySynchronized: androidx.collection.LruCache#evictionCount():
    Internal locks must not be exposed: method androidx.collection.LruCache.evictionCount()
VisiblySynchronized: androidx.collection.LruCache#get(K):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method androidx.collection.LruCache.get(K)
VisiblySynchronized: androidx.collection.LruCache#hitCount():
    Internal locks must not be exposed: method androidx.collection.LruCache.hitCount()
VisiblySynchronized: androidx.collection.LruCache#maxSize():
    Internal locks must not be exposed: method androidx.collection.LruCache.maxSize()
VisiblySynchronized: androidx.collection.LruCache#missCount():
    Internal locks must not be exposed: method androidx.collection.LruCache.missCount()
VisiblySynchronized: androidx.collection.LruCache#put(K, V):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method androidx.collection.LruCache.put(K,V)
VisiblySynchronized: androidx.collection.LruCache#putCount():
    Internal locks must not be exposed: method androidx.collection.LruCache.putCount()
VisiblySynchronized: androidx.collection.LruCache#remove(K):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method androidx.collection.LruCache.remove(K)
VisiblySynchronized: androidx.collection.LruCache#resize(int):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method androidx.collection.LruCache.resize(int)
VisiblySynchronized: androidx.collection.LruCache#size():
    Internal locks must not be exposed: method androidx.collection.LruCache.size()
VisiblySynchronized: androidx.collection.LruCache#snapshot():
    Internal locks must not be exposed: method androidx.collection.LruCache.snapshot()
VisiblySynchronized: androidx.collection.LruCache#toString():
    Internal locks must not be exposed: method androidx.collection.LruCache.toString()
VisiblySynchronized: androidx.collection.LruCache#trimToSize(int):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method androidx.collection.LruCache.trimToSize(int)
