<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.1.0-beta05" type="baseline" client="gradle" dependencies="false" name="AGP (8.1.0-beta05)" variant="all" version="8.1.0-beta05">

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateFloatAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    finishedListener: ((Float) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateDpAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Dp, Unit>."
        errorLine1="    finishedListener: ((Dp) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateSizeAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Size, Unit>."
        errorLine1="    finishedListener: ((Size) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateOffsetAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Offset, Unit>."
        errorLine1="    finishedListener: ((Offset) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Integer, Unit>."
        errorLine1="    finishedListener: ((Int) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntOffsetAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super IntOffset, Unit>."
        errorLine1="    finishedListener: ((IntOffset) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntSizeAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super IntSize, Unit>."
        errorLine1="    finishedListener: ((IntSize) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateFloatAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Float, ? extends Unit>."
        errorLine1="    finishedListener: ((Float) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateDpAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Dp, ? extends Unit>."
        errorLine1="    finishedListener: ((Dp) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateSizeAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Size, ? extends Unit>."
        errorLine1="    finishedListener: ((Size) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateOffsetAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Offset, ? extends Unit>."
        errorLine1="    finishedListener: ((Offset) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="    finishedListener: ((Int) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntOffsetAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super IntOffset, ? extends Unit>."
        errorLine1="    finishedListener: ((IntOffset) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateIntSizeAsState has parameter &apos;finishedListener&apos; with type Function1&lt;? super IntSize, ? extends Unit>."
        errorLine1="    finishedListener: ((IntSize) -> Unit)? = null"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/AnimateAsState.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method withInfiniteAnimationFrameNanos has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="suspend fun &lt;R> withInfiniteAnimationFrameNanos(onFrame: (frameTimeNanos: Long) -> R): R ="
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/InfiniteAnimationPolicy.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;xInflection&apos; with type Function0&lt;? extends Double>."
        errorLine1="    fun xInflection() = c1 * exp(r1 * tInflection) + c2 * exp(r2 * tInflection)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/SpringEstimation.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animate has parameter &apos;block&apos; with type Function2&lt;? super Float, ? super Float, Unit>."
        errorLine1="    block: (value: Float, velocity: Float) -> Unit"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/SuspendAnimation.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method animateDecay has parameter &apos;block&apos; with type Function2&lt;? super Float, ? super Float, Unit>."
        errorLine1="    block: (value: Float, velocity: Float) -> Unit"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/SuspendAnimation.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method callWithFrameNanos has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="    onFrame: (frameTimeNanos: Long) -> R"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/animation/core/SuspendAnimation.kt"/>
    </issue>

</issues>
