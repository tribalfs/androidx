/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.Publish

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("com.google.protobuf")
}

androidXMultiplatform {
    android()
    desktop()

    sourceSets {
        commonTest {
            dependencies {
                implementation(libs.kotlinStdlibCommon)
                implementation(kotlin("test-junit"))
                implementation(project(":compose:runtime:runtime"))
                implementation(project(":compose:ui:ui-util"))
            }
        }

        jvmTest {
            dependencies {
                implementation(libs.junit)
                implementation(libs.kotlinMetadataJvm)

                compileOnly(libs.kotlinCompiler)
                implementation(
                        project(":compose:compiler:compiler-hosted:integration-tests:protobuf-test-classes")
                )
                implementation(libs.kotlinStdlib)
                implementation(libs.protobufLite)
                implementation(libs.guavaAndroid)
                implementation(project(":compose:compiler:compiler-hosted"))
                implementation(projectOrArtifact(":compose:foundation:foundation"))
                implementation(projectOrArtifact(":compose:material:material"))
                implementation(projectOrArtifact(":compose:ui:ui"))
                implementation(project(":compose:runtime:runtime"))
                implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable-jvm:0.3.4")
                implementation("com.google.dagger:dagger:2.40.1")
            }
        }

        androidInstrumentedTest {
            dependsOn(jvmTest)
            dependencies {
            }
        }

        androidUnitTest {
            dependsOn(jvmTest)
            dependencies {
                implementation(libs.kotlinMetadataJvm)
                implementation(libs.robolectric)
                implementation(projectOrArtifact(":activity:activity-ktx"))
                implementation(projectOrArtifact(":core:core-ktx"))
                runtimeOnly(
                        project(":compose:compiler:compiler-hosted:integration-tests:kotlin-compiler-repackaged")
                )
            }
        }

        desktopTest {
            dependsOn(jvmTest)
            dependencies {
                runtimeOnly(
                        project(":compose:compiler:compiler-hosted:integration-tests:kotlin-compiler-repackaged")
                )
            }
        }
    }
}

android {
    defaultConfig {
        minSdkVersion 21
    }
    namespace "androidx.compose.runtime.tests"
}

afterEvaluate {
    tasks.withType(Test) { t ->
        t.dependsOn(":compose:compiler:compiler:embeddedPlugin")

        maxHeapSize("1024m")
        t.jvmArgs += ["--add-opens=jdk.jdi/com.sun.tools.jdi=ALL-UNNAMED"]
    }

    // The compose compiler debugger runs on desktop in AndroidStudio, and so the debugger test is
    // implemented as a desktop test to avoid the need to inject tools.jar (from desktop jvm) into
    // android tests
    tasks.findByPath("test").dependsOn(tasks.findByPath("desktopTest"))
}

androidx {
    name = "Compiler CLI Tests"
    publish = Publish.NONE
    inceptionYear = "2019"
    description = "Contains test for the compose compiler plugin"
}

protobuf {
    protoc {
        artifact = libs.protobufCompiler.get()
    }
    // Generates the java proto-lite code for the protos in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}
