@file:OptIn(
  InternalComposeApi::class,
)
package test

import androidx.compose.runtime.InternalComposeApi
import androidx.compose.runtime.ComposeCompilerApi
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable


@Composable
fun VarArgsFirst(vararg foo: Any?) {
    println(foo)
}

@Composable
fun VarArgsCaller() {
    VarArgsFirst()
}

/********
 * TRANSFORMED
 ********/

@Composable
fun VarArgsFirst(foo: Array<out Any?>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(VarArgsFirst):Test.kt#2487m")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  println(foo)
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    VarArgsFirst(*foo, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
fun VarArgsCaller(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(VarArgsCaller)<VarArg...>:Test.kt#2487m")
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    VarArgsFirst(
      %composer = %composer,
      %changed = 8
    )
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    VarArgsCaller(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
