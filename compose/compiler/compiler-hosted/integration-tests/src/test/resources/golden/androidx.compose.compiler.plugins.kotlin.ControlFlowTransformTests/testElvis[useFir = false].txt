import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.key
import androidx.compose.runtime.NonRestartableComposable


@NonRestartableComposable @Composable
fun Example(x: Int?) {
    // The composable call is made conditionally, which means it is like an if, but with
    // only one result having a composable call, so we just generate a single group
    // around the whole expression.
    val y = x ?: R()
}

/********
 * TRANSFORMED
 ********/

@NonRestartableComposable
@Composable
fun Example(x: Int?, %composer: Composer?, %changed: Int) {
  %composer.startReplaceableGroup(<>)
  sourceInformation(%composer, "C(Example)<R()>:Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val y = <block>{
    val <elvis> = x
    val tmp0_group = when {
      <elvis> == null -> {
        R(%composer, 0)
      }
      else -> {
        <elvis>
      }
    }
    tmp0_group
  }
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endReplaceableGroup()
}
