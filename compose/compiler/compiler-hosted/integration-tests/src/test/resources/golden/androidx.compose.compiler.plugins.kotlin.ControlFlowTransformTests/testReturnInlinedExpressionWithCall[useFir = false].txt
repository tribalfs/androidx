import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.key
import androidx.compose.runtime.NonRestartableComposable


import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.State

@Composable
fun Test(x: Int): Int {
    return x.let {
        A()
        123
    }
}

/********
 * TRANSFORMED
 ********/

@Composable
fun Test(x: Int, %composer: Composer?, %changed: Int): Int {
  %composer.startReplaceableGroup(<>)
  sourceInformation(%composer, "C(Test)*<A()>:Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val tmp0 = <block>{
    val tmp1_group = x.let { it: Int ->
      A(%composer, 0)
      val tmp0_return = 123
      tmp0_return
    }
    tmp1_group
  }
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endReplaceableGroup()
  return tmp0
}
