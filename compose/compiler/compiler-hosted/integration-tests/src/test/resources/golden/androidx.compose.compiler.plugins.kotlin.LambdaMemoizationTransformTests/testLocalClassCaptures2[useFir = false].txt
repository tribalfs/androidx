
            import androidx.compose.runtime.Composable
            import androidx.compose.runtime.NonRestartableComposable

            @NonRestartableComposable
            @Composable
            fun Example(z: Int) {
                class Foo(val x: Int) { val y = z }
                val lambda: () -> Any = {
                    Foo(1)
                }
            }
        
/********
 * TRANSFORMED
 ********/

@NonRestartableComposable
@Composable
fun Example(z: Int, %composer: Composer?, %changed: Int) {
  %composer.startReplaceableGroup(<>)
  sourceInformation(%composer, "C(Example):Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  class Foo(val x: Int) {
    val y: Int = z
  }
  val lambda = <block>{
    %composer.startReplaceableGroup(<>)
    val tmpCache = %composer.cache(%composer.changed(z)) {
      {
        Foo(1)
      }
    }
    %composer.endReplaceableGroup()
    tmpCache
  }
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endReplaceableGroup()
}
