//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

val content: @Composable (a: SomeUnstableClass) -> Unit = {
    for (index in 0 until count) {
        val i = remember { index }
    }
}

//
// Transformed IR
// ------------------------------------------

val content: Function3<@[ParameterName(name = 'a')] SomeUnstableClass, Composer, Int, Unit> = ComposableSingletons%TestKt.lambda-1
internal object ComposableSingletons%TestKt {
  val lambda-1: Function3<SomeUnstableClass, Composer, Int, Unit> = composableLambdaInstance(<>, false) { it: SomeUnstableClass, %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C*<rememb...>:Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val <iterator> = 0 until count.iterator()
    while (<iterator>.hasNext()) {
      val index = <iterator>.next()
      val i = <block>{
        %composer.startReplaceableGroup(<>)
        sourceInformation(%composer, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          index
        }
        %composer.endReplaceableGroup()
        tmp0_group
      }
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  }
}
