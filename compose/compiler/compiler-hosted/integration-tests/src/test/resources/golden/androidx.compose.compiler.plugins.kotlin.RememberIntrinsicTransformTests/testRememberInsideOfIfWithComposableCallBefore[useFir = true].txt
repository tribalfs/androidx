import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember


@Composable
fun Test(condition: Boolean) {
    if (condition) {
        A()
        val foo = remember { Foo() }
    }
}

/********
 * TRANSFORMED
 ********/

@Composable
fun Test(condition: Boolean, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test):Test.kt")
  val %dirty = %changed
  if (%changed and 0b1110 == 0) {
    %dirty = %dirty or if (%composer.changed(condition)) 0b0100 else 0b0010
  }
  if (%dirty and 0b1011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    if (condition) {
      A(%composer, 0)
      val foo = <block>{
        %composer.startReplaceableGroup(<>)
        sourceInformation(%composer, "C(Test)<A()>:Test.kt")
        val tmp0_group = %composer.cache(false) {
          Foo()
        }
        %composer.endReplaceableGroup()
        tmp0_group
      }
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(condition, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
