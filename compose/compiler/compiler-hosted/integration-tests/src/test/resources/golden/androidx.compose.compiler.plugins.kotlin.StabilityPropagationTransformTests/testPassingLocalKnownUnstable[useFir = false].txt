//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable


import androidx.compose.runtime.remember

@Composable
fun Test(x: Foo) {
    A(x)
    A(Foo(0))
    A(remember { Foo(0) })
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(x: Foo, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<A(x)>,<A(Foo(...>,<rememb...>,<A(reme...>:Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  A(x, %composer, 0b1000)
  A(Foo(0), %composer, 0b1000)
  A(<block>{
    %composer.startReplaceableGroup(<>)
    sourceInformation(%composer, "CC(remember):Test.kt#9igjgp")
    val tmp0_group = %composer.cache(false) {
      Foo(0)
    }
    %composer.endReplaceableGroup()
    tmp0_group
  }, %composer, 0b1000)
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(x, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
