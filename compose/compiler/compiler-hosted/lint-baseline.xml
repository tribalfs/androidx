<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.0.0-alpha05" type="baseline" client="gradle" dependencies="false" name="AGP (8.0.0-alpha05)" variant="all" version="8.0.0-alpha05">

    <issue
        id="LintError"
        message="Unexpected failure during lint analysis (this is a bug in lint or one of the libraries it depends on)&#xA;&#xA;Message: Could not read file: /media/workspace/android/androidx-main/prebuilts/androidx/external/org/jetbrains/kotlin/kotlin-compiler/1.8.10/kotlin-compiler-1.8.10.jar!/org/jetbrains/kotlin/ir/expressions/impl/IrSetFieldImpl.class; size in bytes: 5423; file type: CLASS&#xA;Stack: `IllegalStateException:VirtualFileKotlinClass$Factory.logFileReadingErrorMessage(VirtualFileKotlinClass.kt:77)←VirtualFileKotlinClass$Factory.access$logFileReadingErrorMessage(VirtualFileKotlinClass.kt:46)←VirtualFileKotlinClass$Factory$create$1.invoke(VirtualFileKotlinClass.kt:68)←VirtualFileKotlinClass$Factory$create$1.invoke(VirtualFileKotlinClass.kt:51)←PerformanceCounter.time(PerformanceCounter.kt:90)←VirtualFileKotlinClass$Factory.create$frontend_common_jvm(VirtualFileKotlinClass.kt:51)←KotlinBinaryClassCache$Companion.getKotlinBinaryClassOrClassFileContent$lambda$0(KotlinBinaryClassCache.kt:90)←MockApplication.runReadAction(MockApplication.java:193)←KotlinBinaryClassCache$Companion.getKotlinBinaryClassOrClassFileContent(KotlinBinaryClassCache.kt:89)←KotlinBinaryClassCache$Companion.getKotlinBinaryClassOrClassFileContent$default(KotlinBinaryClassCache.kt:73)←VirtualFileFinder.findKotlinClassOrContent(VirtualFileFinder.kt:37)←LazyJavaPackageScope$classes$1.invoke(LazyJavaPackageScope.kt:67)←LazyJavaPackageScope$classes$1.invoke(LazyJavaPackageScope.kt:59)←LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:578)←LazyJavaPackageScope.findClassifier(LazyJavaPackageScope.kt:146)←LazyJavaPackageScope.getContributedClassifier(LazyJavaPackageScope.kt:136)←JvmPackageScope.getContributedClassifier(JvmPackageScope.kt:55)←ChainedMemberScope.getContributedClassifier(ChainedMemberScope.kt:35)←AbstractScopeAdapter.getContributedClassifier(AbstractScopeAdapter.kt:44)←FindClassInModuleKt.findClassifierAcrossModuleDependencies(findClassInModule.kt:26)←TypeDeserializer.computeClassifierDescriptor(TypeDeserializer.kt:268)←TypeDeserializer.access$computeClassifierDescriptor(TypeDeserializer.kt:28)←TypeDeserializer$classifierDescriptors$1.invoke(TypeDeserializer.kt:37)←TypeDeserializer$classifierDescriptors$1.invoke(TypeDeserializer.kt:36)←LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:578)←TypeDeserializer.typeConstructor(TypeDeserializer.kt:161)←TypeDeserializer.simpleType(TypeDeserializer.kt:91)←TypeDeserializer.type(TypeDeserializer.kt:68)←MemberDeserializer.loadFunction(MemberDeserializer.kt:218)←DeserializedMemberScope$OptimizedImplementation.computeFunctions(DeserializedMemberScope.kt:276)←DeserializedMemberScope$OptimizedImplementation.access$computeFunctions(DeserializedMemberScope.kt:228)←DeserializedMemberScope$OptimizedImplementation$functions$1.invoke(DeserializedMemberScope.kt:251)←DeserializedMemberScope$OptimizedImplementation$functions$1.invoke(DeserializedMemberScope.kt:251)←LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:578)←LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull.invoke(LockBasedStorageManager.java:651)←DeserializedMemberScope$OptimizedImplementation.getContributedFunctions(DeserializedMemberScope.kt:329)←DeserializedMemberScope.getContributedFunctions(DeserializedMemberScope.kt:82)←JvmPackageScope.getContributedFunctions(JvmPackageScope.kt:68)←ChainedMemberScope.getContributedFunctions(ChainedMemberScope.kt:41)←AbstractScopeAdapter.getContributedFunctions(AbstractScopeAdapter.kt:40)←LazyExplicitImportScope$getContributedFunctions$1.invoke(LazyExplicitImportScope.kt:54)←LazyExplicitImportScope$getContributedFunctions$1.invoke(LazyExplicitImportScope.kt:54)←LazyExplicitImportScope.collectCallableMemberDescriptors(LazyExplicitImportScope.kt:131)←LazyExplicitImportScope.getContributedFunctions(LazyExplicitImportScope.kt:54)←LazyImportScope$getContributedFunctions$1.invoke(LazyImportScope.kt:326)←LazyImportScope$getContributedFunctions$1.invoke(LazyImportScope.kt:326)←LazyImportResolver$collectFromImports$1.invoke(LazyImportScope.kt:121)←LazyImportResolver$collectFromImports$1.invoke(LazyImportScope.kt:118)←LockBasedStorageManager.compute(LockBasedStorageManager.java:290)←LazyImportResolver.collectFromImports(LazyImportScope.kt:118)←LazyImportScope.getContributedFunctions(LazyImportScope.kt:326)←TowerLevelsKt.getContributedFunctionsAndConstructors(TowerLevels.kt:474)←TowerLevelsKt.access$getContributedFunctionsAndConstructors(TowerLevels.kt:1)←ScopeBasedTowerLevel.getFunctions(TowerLevels.kt:361)←ScopeTowerProcessorsKt$createSimpleFunctionProcessor$1.invoke(ScopeTowerProcessors.kt:304)←ScopeTowerProcessorsKt$createSimpleFunctionProcessor$1.invoke(ScopeTowerProcessors.kt:304)←NoExplicitReceiverScopeTowerProcessor.simpleProcess(ScopeTowerProcessors.kt:201)←SimpleScopeTowerProcessor.process(ScopeTowerProcessors.kt:109)←PrioritizedCompositeScopeTowerProcessor.process(ScopeTowerProcessors.kt:41)←TowerResolver.processTowerData(TowerResolver.kt:383)←TowerResolver.access$processTowerData(TowerResolver.kt:95)←TowerResolver$Task.process(TowerResolver.kt:207)←TowerResolver$Task.processImplicitReceiver(TowerResolver.kt:342)←TowerResolver$Task.run$processLexicalScope(TowerResolver.kt:250)←TowerResolver$Task.run$processScopes(TowerResolver.kt:280)←TowerResolver$Task.run(TowerResolver.kt:305)←TowerResolver.run(TowerResolver.kt:114)←TowerResolver.runResolve(TowerResolver.kt:101)←KotlinCallResolver.resolveCall(KotlinCallResolver.kt:184)←KotlinCallResolver.resolveAndCompleteCall(KotlinCallResolver.kt:41)←PSICallResolver.runResolutionAndInference(PSICallResolver.kt:114)←CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:602)←CallResolver.lambda$computeTasksAndResolveCall$0(CallResolver.java:213)←PerformanceCounter.time(PerformanceCounter.kt:90)←CallResolver.computeTasksAndResolveCall(CallResolver.java:211)←CallResolver.computeTasksAndResolveCall(CallResolver.java:199)←CallResolver.resolveFunctionCall(CallResolver.java:329)←CallExpressionResolver.getResolvedCallForFunction(CallExpressionResolver.kt:86)←CallExpressionResolver.getCallExpressionTypeInfoWithoutFinalTypeCheck(CallExpressionResolver.kt:208)←CallExpressionResolver.getCallExpressionTypeInfo(CallExpressionResolver.kt:185)←BasicExpressionTypingVisitor.visitCallExpression(BasicExpressionTypingVisitor.java:731)←ExpressionTypingVisitorDispatcher.visitCallExpression(ExpressionTypingVisitorDispatcher.java:396)←ExpressionTypingVisitorDispatcher$ForBlock.visitCallExpression(ExpressionTypingVisitorDispatcher.java:60)←KtCallExpression.accept(KtCallExpression.java:35)←ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:176)←PerformanceCounter.time(PerformanceCounter.kt:90)←ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:165)←ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:135)←ExpressionTypingVisitorDispatcher.safeGetTypeInfo(ExpressionTypingVisitorDispatcher.java:123)←BasicExpressionTypingVisitor.visitUnaryExpression(BasicExpressionTypingVisitor.java:754)←ExpressionTypingVisitorDispatcher.visitUnaryExpression(ExpressionTypingVisitorDispatcher.java:401)←ExpressionTypingVisitorDispatcher$ForBlock.visitUnaryExpression(ExpressionTypingVisitorDispatcher.java:60)←KtVisitor.visitPrefixExpression(KtVisitor.java:210)←KtPrefixExpression.accept(KtPrefixExpression.java:31)←ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:176)←PerformanceCounter.time(PerformanceCounter.kt:90)←ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:165)←ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:135)←ExpressionTypingVisitorForStatements.visitExpression(ExpressionTypingVisitorForStatements.java:543)←ExpressionTypingVisitorForStatements.visitExpression(ExpressionTypingVisitorForStatements.java:73)`&#xA;&#xA;You can run with --stacktrace or set environment variable `LINT_PRINT_STACKTRACE=true` to dump a full stacktrace to stdout.">
        <location
            file="compiler-hosted"/>
    </issue>

</issues>
