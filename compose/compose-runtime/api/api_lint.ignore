// Baseline format: 1.0
AcronymName: androidx.compose.SlotTable.Companion#getEMPTY():
    Acronyms should not be capitalized in method names: was `getEMPTY`, should this be `getEmpty`?


ArrayReturn: androidx.compose.AmbientKt#Providers(androidx.compose.ProvidedValue<?>[], kotlin.jvm.functions.Function0<kotlin.Unit>) parameter #0:
    Method parameter should be Collection<ProvidedValue> (or subclass) instead of raw array; was `androidx.compose.ProvidedValue<?>[]`
ArrayReturn: androidx.compose.EffectsKt#onCommit(Object[], kotlin.jvm.functions.Function1<? super androidx.compose.CommitScope,kotlin.Unit>) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.EffectsKt#onPreCommit(Object[], kotlin.jvm.functions.Function1<? super androidx.compose.CommitScope,kotlin.Unit>) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.KeyKt#key(Object[], kotlin.jvm.functions.Function0<? extends T>) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.MutableStateKt#stateFor(Object[], kotlin.jvm.functions.Function0<? extends T>) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.RememberKt#remember(Object[], kotlin.jvm.functions.Function0<? extends V>) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.SlotTable#SlotTable(Object[]) parameter #0:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.compose.UnionType#types():
    Method should return Collection<Class> (or subclass) instead of raw array; was `java.lang.Class<?>[]`


CallbackName: androidx.compose.CompositionLifecycleObserver:
    Class should be named CompositionLifecycleCallback


DocumentExceptions: androidx.compose.ComposerKt#getCurrentComposer():
    Method ComposerKt.getCurrentComposer appears to be throwing kotlin.NotImplementedError; this should be listed in the documentation; see https://android.github.io/kotlin-guides/interop.html#document-exceptions
DocumentExceptions: androidx.compose.frames.FramesKt#commit(androidx.compose.frames.Frame):
    Method FramesKt.commit appears to be throwing java.lang.IllegalStateException; this should be listed in the documentation; see https://android.github.io/kotlin-guides/interop.html#document-exceptions
DocumentExceptions: androidx.compose.frames.FramesKt#currentFrame():
    Method FramesKt.currentFrame appears to be throwing java.lang.IllegalStateException; this should be listed in the documentation; see https://android.github.io/kotlin-guides/interop.html#document-exceptions
DocumentExceptions: androidx.compose.frames.FramesKt#writable(T, androidx.compose.frames.Framed, androidx.compose.frames.Frame):
    Method FramesKt.writable appears to be throwing java.lang.IllegalStateException; this should be listed in the documentation; see https://android.github.io/kotlin-guides/interop.html#document-exceptions


ExceptionName: androidx.compose.frames.FrameAborted:
    Exceptions must be named `FooException`, was `FrameAborted`


KotlinOperator: androidx.compose.ComposerUpdater#set(V, kotlin.jvm.functions.Function2<? super T,? super V,kotlin.Unit>):
    Note that adding the `operator` keyword would allow calling this method using operator syntax
KotlinOperator: androidx.compose.ComposerUpdater#set(int, kotlin.jvm.functions.Function2<? super T,? super java.lang.Integer,kotlin.Unit>):
    Note that adding the `operator` keyword would allow calling this method using operator syntax
KotlinOperator: androidx.compose.SlotEditor#get(androidx.compose.Anchor):
    Note that adding the `operator` keyword would allow calling this method using operator syntax
KotlinOperator: androidx.compose.SlotEditor#get(int):
    Note that adding the `operator` keyword would allow calling this method using operator syntax


MissingNullability: androidx.compose.SlotReader#getGroupKey():
    Missing nullability on method `getGroupKey` return
