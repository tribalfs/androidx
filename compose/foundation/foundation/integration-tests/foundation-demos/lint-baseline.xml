<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-alpha02" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-alpha02)" variant="all" version="8.3.0-alpha02">

    <issue
        id="NewApi"
        message="Call requires API level 24 (current min is 21): `java.util.Map#getOrDefault`"
        errorLine1="                val selected = selectedIndexes.getOrDefault(item, false)"
        errorLine2="                                               ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ListDemos.kt"/>
    </issue>

    <issue
        id="ClassVerificationFailure"
        message="This call references a method added in API level 24; however, the containing class androidx.compose.foundation.demos.ListDemosKt is reachable from earlier API levels and will fail run-time class verification."
        errorLine1="                val selected = selectedIndexes.getOrDefault(item, false)"
        errorLine2="                                               ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ListDemos.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SnappingSlider has parameter &apos;onValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onValueChange: (Float) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/text/ComposeLineHeight.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;appendWithColor&apos; with type Function2&lt;? super Color, ? super String, ? extends Unit>."
        errorLine1="                    fun appendWithColor(color: Color, text: String) {"
        errorLine2="                    ^">
        <location
            file="src/main/java/androidx/compose/foundation/demos/text/ComposeTextSelection.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method rememberDragDropState has parameter &apos;onMove&apos; with type Function2&lt;? super Integer, ? super Integer, Unit>."
        errorLine1="    onMove: (Int, Int) -> Unit"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/LazyColumnDragAndDropDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor DragDropState has parameter &apos;onMove&apos; with type Function2&lt;? super Integer, ? super Integer, Unit>."
        errorLine1="    private val onMove: (Int, Int) -> Unit"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/LazyColumnDragAndDropDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method rememberGridDragDropState has parameter &apos;onMove&apos; with type Function2&lt;? super Integer, ? super Integer, Unit>."
        errorLine1="    onMove: (Int, Int) -> Unit"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/LazyGridDragAndDropDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor GridDragDropState has parameter &apos;onMove&apos; with type Function2&lt;? super Integer, ? super Integer, Unit>."
        errorLine1="    private val onMove: (Int, Int) -> Unit"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/LazyGridDragAndDropDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;item1&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="        val item1 = @Composable { index: Int ->"
        errorLine2="        ^">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ListDemos.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;item2&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="        val item2 = @Composable { index: Int ->"
        errorLine2="        ^">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ListDemos.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;item&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="    val item = @Composable { index: Int ->"
        errorLine2="    ^">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ListDemos.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method ResizeHandle has parameter &apos;onDrag&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="private fun ResizeHandle(orientation: Orientation, onDrag: (Float) -> Unit) {"
        errorLine2="                                                           ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ScrollableFocusedChildDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method size has parameter &apos;size&apos; with type Function0&lt;Size>."
        errorLine1="private fun Modifier.size(size: () -> Size): Modifier = layout { measurable, _ ->"
        errorLine2="                                ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/ScrollableFocusedChildDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;setDemoIndex&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="    val (currentDemoIndex, setDemoIndex) = rememberSaveable { mutableIntStateOf(-1) }"
        errorLine2="                           ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/text/TextFieldsInDialogDemo.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;setWeight&apos; with type Function1&lt;? super Float, ? extends Unit>."
        errorLine1="    val (weight, setWeight) = remember { mutableFloatStateOf(1000f) }"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="src/main/java/androidx/compose/foundation/demos/text/VariableFontsDemo.kt"/>
    </issue>

</issues>
