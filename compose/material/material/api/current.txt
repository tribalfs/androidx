// Signature format: 4.0
package androidx.compose.material {

  public final class AlertDialogKt {
    method @androidx.compose.runtime.Composable public static void AlertDialog-1J9gtOE(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> confirmButton, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dismissButton, optional kotlin.jvm.functions.Function0<kotlin.Unit>? title, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional androidx.compose.ui.window.DialogProperties? properties);
    method @androidx.compose.runtime.Composable public static void AlertDialog-EyAH5Rg(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? title, optional kotlin.jvm.functions.Function0<kotlin.Unit>? text, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional androidx.compose.ui.window.DialogProperties? properties);
  }

  public final class AppBarKt {
    method @androidx.compose.runtime.Composable public static void BottomAppBar-2vnWOj4(optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional androidx.compose.ui.graphics.Shape? cutoutShape, optional float elevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void TopAppBar-_azMXew(kotlin.jvm.functions.Function0<kotlin.Unit> title, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? navigationIcon, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> actions, optional long backgroundColor, optional long contentColor, optional float elevation);
    method @androidx.compose.runtime.Composable public static void TopAppBar-ye6PvEY(optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional float elevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
  }

  public final class BackdropScaffoldConstants {
    method public float getDefaultFrontLayerElevation-D9Ej5fM();
    method public long getDefaultFrontLayerScrimColor-0d7_KjU();
    method public androidx.compose.ui.graphics.Shape getDefaultFrontLayerShape();
    method public float getDefaultHeaderHeight-D9Ej5fM();
    method public float getDefaultPeekHeight-D9Ej5fM();
    property public final float DefaultFrontLayerElevation;
    property public final long DefaultFrontLayerScrimColor;
    property public final androidx.compose.ui.graphics.Shape DefaultFrontLayerShape;
    property public final float DefaultHeaderHeight;
    property public final float DefaultPeekHeight;
    field public static final androidx.compose.material.BackdropScaffoldConstants INSTANCE;
  }

  public final class BackdropScaffoldKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void BackdropScaffold-n7o2bDw(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.BackdropScaffoldState scaffoldState, optional boolean gesturesEnabled, optional float peekHeight, optional float headerHeight, optional boolean persistentAppBar, optional boolean stickyFrontLayer, optional long backLayerBackgroundColor, optional long backLayerContentColor, optional androidx.compose.ui.graphics.Shape frontLayerShape, optional float frontLayerElevation, optional long frontLayerBackgroundColor, optional long frontLayerContentColor, optional long frontLayerScrimColor, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.SnackbarHostState,kotlin.Unit> snackbarHost, kotlin.jvm.functions.Function0<kotlin.Unit> appBar, kotlin.jvm.functions.Function0<kotlin.Unit> backLayerContent, kotlin.jvm.functions.Function0<kotlin.Unit> frontLayerContent);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.BackdropScaffoldState rememberBackdropScaffoldState(androidx.compose.material.BackdropValue initialValue, optional androidx.compose.animation.core.AnimationClockObservable clock, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.BackdropValue,java.lang.Boolean> confirmStateChange, optional androidx.compose.material.SnackbarHostState snackbarHostState);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public final class BackdropScaffoldState extends androidx.compose.material.SwipeableState<androidx.compose.material.BackdropValue> {
    ctor public BackdropScaffoldState(androidx.compose.material.BackdropValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.BackdropValue,java.lang.Boolean> confirmStateChange, androidx.compose.material.SnackbarHostState snackbarHostState);
    method public void conceal(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onConcealed);
    method public androidx.compose.material.SnackbarHostState getSnackbarHostState();
    method public boolean isConcealed();
    method public boolean isRevealed();
    method public void reveal(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onRevealed);
    property public final boolean isConcealed;
    property public final boolean isRevealed;
    property public final androidx.compose.material.SnackbarHostState snackbarHostState;
    field public static final androidx.compose.material.BackdropScaffoldState.Companion Companion;
  }

  public static final class BackdropScaffoldState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.BackdropScaffoldState,?> Saver(androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.BackdropValue,java.lang.Boolean> confirmStateChange, androidx.compose.material.SnackbarHostState snackbarHostState);
  }

  public enum BackdropValue {
    enum_constant public static final androidx.compose.material.BackdropValue Concealed;
    enum_constant public static final androidx.compose.material.BackdropValue Revealed;
  }

  public final class BottomDrawerState extends androidx.compose.material.SwipeableState<androidx.compose.material.BottomDrawerValue> {
    ctor public BottomDrawerState(androidx.compose.material.BottomDrawerValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomDrawerValue,java.lang.Boolean> confirmStateChange);
    method public void close(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onClosed);
    method public void expand(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onExpanded);
    method public boolean isClosed();
    method public boolean isExpanded();
    method public boolean isOpen();
    method public void open(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onOpened);
    property public final boolean isClosed;
    property public final boolean isExpanded;
    property public final boolean isOpen;
    field public static final androidx.compose.material.BottomDrawerState.Companion Companion;
  }

  public static final class BottomDrawerState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.BottomDrawerState,androidx.compose.material.BottomDrawerValue> Saver(androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomDrawerValue,java.lang.Boolean> confirmStateChange);
  }

  public enum BottomDrawerValue {
    enum_constant public static final androidx.compose.material.BottomDrawerValue Closed;
    enum_constant public static final androidx.compose.material.BottomDrawerValue Expanded;
    enum_constant public static final androidx.compose.material.BottomDrawerValue Open;
  }

  public final class BottomNavigationKt {
    method @androidx.compose.runtime.Composable public static void BottomNavigation-ye6PvEY(optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional float elevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void BottomNavigationItem-S1l6qvI(kotlin.jvm.functions.Function0<kotlin.Unit> icon, boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> label, optional boolean alwaysShowLabels, optional androidx.compose.foundation.InteractionState interactionState, optional long selectedContentColor, optional long unselectedContentColor);
  }

  public final class BottomSheetScaffoldConstants {
    method public float getDefaultSheetElevation-D9Ej5fM();
    method public float getDefaultSheetPeekHeight-D9Ej5fM();
    property public final float DefaultSheetElevation;
    property public final float DefaultSheetPeekHeight;
    field public static final androidx.compose.material.BottomSheetScaffoldConstants INSTANCE;
  }

  public final class BottomSheetScaffoldKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void BottomSheetScaffold-0Ttp7_s(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> sheetContent, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.BottomSheetScaffoldState scaffoldState, optional kotlin.jvm.functions.Function0<kotlin.Unit>? topBar, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.SnackbarHostState,kotlin.Unit> snackbarHost, optional kotlin.jvm.functions.Function0<kotlin.Unit>? floatingActionButton, optional androidx.compose.material.FabPosition floatingActionButtonPosition, optional boolean sheetGesturesEnabled, optional androidx.compose.ui.graphics.Shape sheetShape, optional float sheetElevation, optional long sheetBackgroundColor, optional long sheetContentColor, optional float sheetPeekHeight, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? drawerContent, optional boolean drawerGesturesEnabled, optional androidx.compose.ui.graphics.Shape drawerShape, optional float drawerElevation, optional long drawerBackgroundColor, optional long drawerContentColor, optional long drawerScrimColor, optional long backgroundColor, optional long contentColor, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> bodyContent);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.BottomSheetScaffoldState rememberBottomSheetScaffoldState(optional androidx.compose.material.DrawerState drawerState, optional androidx.compose.material.BottomSheetState bottomSheetState, optional androidx.compose.material.SnackbarHostState snackbarHostState);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.BottomSheetState rememberBottomSheetState(androidx.compose.material.BottomSheetValue initialValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomSheetValue,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public final class BottomSheetScaffoldState {
    ctor public BottomSheetScaffoldState(androidx.compose.material.DrawerState drawerState, androidx.compose.material.BottomSheetState bottomSheetState, androidx.compose.material.SnackbarHostState snackbarHostState);
    method public androidx.compose.material.BottomSheetState getBottomSheetState();
    method public androidx.compose.material.DrawerState getDrawerState();
    method public androidx.compose.material.SnackbarHostState getSnackbarHostState();
    property public final androidx.compose.material.BottomSheetState bottomSheetState;
    property public final androidx.compose.material.DrawerState drawerState;
    property public final androidx.compose.material.SnackbarHostState snackbarHostState;
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public final class BottomSheetState extends androidx.compose.material.SwipeableState<androidx.compose.material.BottomSheetValue> {
    ctor public BottomSheetState(androidx.compose.material.BottomSheetValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomSheetValue,java.lang.Boolean> confirmStateChange);
    method public void collapse(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onCollapsed);
    method public void expand(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onExpanded);
    method public boolean isCollapsed();
    method public boolean isExpanded();
    property public final boolean isCollapsed;
    property public final boolean isExpanded;
    field public static final androidx.compose.material.BottomSheetState.Companion Companion;
  }

  public static final class BottomSheetState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.BottomSheetState,?> Saver(androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomSheetValue,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.material.ExperimentalMaterialApi public enum BottomSheetValue {
    enum_constant public static final androidx.compose.material.BottomSheetValue Collapsed;
    enum_constant public static final androidx.compose.material.BottomSheetValue Expanded;
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface ButtonColors {
    method public long backgroundColor-0d7_KjU(boolean enabled);
    method public long contentColor-0d7_KjU(boolean enabled);
  }

  public final class ButtonConstants {
    method @androidx.compose.runtime.Composable public androidx.compose.material.ButtonColors defaultButtonColors-nlx5xbs(optional long backgroundColor, optional long disabledBackgroundColor, optional long contentColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.compose.material.ButtonElevation defaultElevation-qYQSm_w(optional float defaultElevation, optional float pressedElevation, optional float disabledElevation);
    method @androidx.compose.runtime.Composable public androidx.compose.material.ButtonColors defaultOutlinedButtonColors-xS_xkl8(optional long backgroundColor, optional long contentColor, optional long disabledContentColor);
    method @androidx.compose.runtime.Composable public androidx.compose.material.ButtonColors defaultTextButtonColors-xS_xkl8(optional long backgroundColor, optional long contentColor, optional long disabledContentColor);
    method public androidx.compose.foundation.layout.PaddingValues getDefaultContentPadding();
    method public float getDefaultIconSize-D9Ej5fM();
    method public float getDefaultIconSpacing-D9Ej5fM();
    method public float getDefaultMinHeight-D9Ej5fM();
    method public float getDefaultMinWidth-D9Ej5fM();
    method public androidx.compose.foundation.BorderStroke getDefaultOutlinedBorder();
    method public androidx.compose.foundation.layout.PaddingValues getDefaultTextContentPadding();
    method public float getOutlinedBorderSize-D9Ej5fM();
    property public final androidx.compose.foundation.layout.PaddingValues DefaultContentPadding;
    property public final float DefaultIconSize;
    property public final float DefaultIconSpacing;
    property public final float DefaultMinHeight;
    property public final float DefaultMinWidth;
    property public final androidx.compose.foundation.layout.PaddingValues DefaultTextContentPadding;
    property public final float OutlinedBorderSize;
    property public final androidx.compose.foundation.BorderStroke defaultOutlinedBorder;
    field public static final androidx.compose.material.ButtonConstants INSTANCE;
    field public static final float OutlinedBorderOpacity = 0.12f;
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface ButtonElevation {
    method public float elevation-D9Ej5fM(boolean enabled, androidx.compose.foundation.InteractionState interactionState);
  }

  public final class ButtonKt {
    method @androidx.compose.runtime.Composable public static void Button(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.ButtonElevation? elevation, optional androidx.compose.ui.graphics.Shape shape, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.material.ButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static inline void OutlinedButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.ButtonElevation? elevation, optional androidx.compose.ui.graphics.Shape shape, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.material.ButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static inline void TextButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.ButtonElevation? elevation, optional androidx.compose.ui.graphics.Shape shape, optional androidx.compose.foundation.BorderStroke? border, optional androidx.compose.material.ButtonColors colors, optional androidx.compose.foundation.layout.PaddingValues contentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
  }

  public final class CardKt {
    method @androidx.compose.runtime.Composable public static void Card-IHU7g64(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional androidx.compose.foundation.BorderStroke? border, optional float elevation, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface CheckboxColors {
    method public long borderColor-0d7_KjU(boolean enabled, androidx.compose.foundation.selection.ToggleableState state);
    method public long boxColor-0d7_KjU(boolean enabled, androidx.compose.foundation.selection.ToggleableState state);
    method public long checkmarkColor-0d7_KjU(androidx.compose.foundation.selection.ToggleableState state);
  }

  public final class CheckboxConstants {
    method @androidx.compose.runtime.Composable public androidx.compose.material.CheckboxColors defaultColors-QGkLkJU(optional long checkedColor, optional long uncheckedColor, optional long checkmarkColor, optional long disabledColor, optional long disabledIndeterminateColor);
    field public static final androidx.compose.material.CheckboxConstants INSTANCE;
  }

  public final class CheckboxKt {
    method @androidx.compose.runtime.Composable public static void Checkbox(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.CheckboxColors colors);
    method @androidx.compose.runtime.Composable public static void TriStateCheckbox(androidx.compose.foundation.selection.ToggleableState state, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.CheckboxColors colors);
  }

  @androidx.compose.runtime.Stable public final class Colors {
    method public androidx.compose.material.Colors copy-7EMdAJ8(optional long primary, optional long primaryVariant, optional long secondary, optional long secondaryVariant, optional long background, optional long surface, optional long error, optional long onPrimary, optional long onSecondary, optional long onBackground, optional long onSurface, optional long onError, optional boolean isLight);
    method public long getBackground-0d7_KjU();
    method public long getError-0d7_KjU();
    method public long getOnBackground-0d7_KjU();
    method public long getOnError-0d7_KjU();
    method public long getOnPrimary-0d7_KjU();
    method public long getOnSecondary-0d7_KjU();
    method public long getOnSurface-0d7_KjU();
    method public long getPrimary-0d7_KjU();
    method public long getPrimaryVariant-0d7_KjU();
    method public long getSecondary-0d7_KjU();
    method public long getSecondaryVariant-0d7_KjU();
    method public long getSurface-0d7_KjU();
    method public boolean isLight();
    property public final long background;
    property public final long error;
    property public final boolean isLight;
    property public final long onBackground;
    property public final long onError;
    property public final long onPrimary;
    property public final long onSecondary;
    property public final long onSurface;
    property public final long primary;
    property public final long primaryVariant;
    property public final long secondary;
    property public final long secondaryVariant;
    property public final long surface;
  }

  public final class ColorsKt {
    method @androidx.compose.runtime.Composable public static long contentColorFor-8_81llA(long color);
    method public static long contentColorFor-pz-ABmo(androidx.compose.material.Colors, long color);
    method public static androidx.compose.material.Colors darkColors-T8B3sC8(optional long primary, optional long primaryVariant, optional long secondary, optional long background, optional long surface, optional long error, optional long onPrimary, optional long onSecondary, optional long onBackground, optional long onSurface, optional long onError);
    method public static androidx.compose.material.Colors lightColors-hW7iGhc(optional long primary, optional long primaryVariant, optional long secondary, optional long secondaryVariant, optional long background, optional long surface, optional long error, optional long onPrimary, optional long onSecondary, optional long onBackground, optional long onSurface, optional long onError);
  }

  public enum DismissDirection {
    enum_constant public static final androidx.compose.material.DismissDirection EndToStart;
    enum_constant public static final androidx.compose.material.DismissDirection StartToEnd;
  }

  @androidx.compose.material.ExperimentalMaterialApi public final class DismissState extends androidx.compose.material.SwipeableState<androidx.compose.material.DismissValue> {
    ctor public DismissState(androidx.compose.material.DismissValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissValue,java.lang.Boolean> confirmStateChange);
    method public void dismiss(androidx.compose.material.DismissDirection direction, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissed);
    method public androidx.compose.material.DismissDirection? getDismissDirection();
    method public boolean isDismissed(androidx.compose.material.DismissDirection direction);
    method public void reset(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onReset);
    property public final androidx.compose.material.DismissDirection? dismissDirection;
    field public static final androidx.compose.material.DismissState.Companion Companion;
  }

  public static final class DismissState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.DismissState,androidx.compose.material.DismissValue> Saver(androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissValue,java.lang.Boolean> confirmStateChange);
  }

  public enum DismissValue {
    enum_constant public static final androidx.compose.material.DismissValue Default;
    enum_constant public static final androidx.compose.material.DismissValue DismissedToEnd;
    enum_constant public static final androidx.compose.material.DismissValue DismissedToStart;
  }

  public final class DividerKt {
    method @androidx.compose.runtime.Composable public static void Divider-JRSVyrs(optional androidx.compose.ui.Modifier modifier, optional long color, optional float thickness, optional float startIndent);
  }

  public final class DrawerConstants {
    method public float getDefaultElevation-D9Ej5fM();
    method public long getDefaultScrimColor-0d7_KjU();
    property public final float DefaultElevation;
    property public final long defaultScrimColor;
    field public static final androidx.compose.material.DrawerConstants INSTANCE;
    field public static final float ScrimDefaultOpacity = 0.32f;
  }

  public final class DrawerKt {
    method @androidx.compose.runtime.Composable public static void BottomDrawerLayout--6CoO6E(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> drawerContent, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.BottomDrawerState drawerState, optional boolean gesturesEnabled, optional androidx.compose.ui.graphics.Shape drawerShape, optional float drawerElevation, optional long drawerBackgroundColor, optional long drawerContentColor, optional long scrimColor, kotlin.jvm.functions.Function0<kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static void ModalDrawerLayout-TlzqArY(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> drawerContent, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.DrawerState drawerState, optional boolean gesturesEnabled, optional androidx.compose.ui.graphics.Shape drawerShape, optional float drawerElevation, optional long drawerBackgroundColor, optional long drawerContentColor, optional long scrimColor, kotlin.jvm.functions.Function0<kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static androidx.compose.material.BottomDrawerState rememberBottomDrawerState(androidx.compose.material.BottomDrawerValue initialValue, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomDrawerValue,java.lang.Boolean> confirmStateChange);
    method @androidx.compose.runtime.Composable public static androidx.compose.material.DrawerState rememberDrawerState(androidx.compose.material.DrawerValue initialValue, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.DrawerValue,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.runtime.Stable public final class DrawerState extends androidx.compose.material.SwipeableState<androidx.compose.material.DrawerValue> {
    ctor public DrawerState(androidx.compose.material.DrawerValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DrawerValue,java.lang.Boolean> confirmStateChange);
    method public void close(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onClosed);
    method public boolean isClosed();
    method public boolean isOpen();
    method public void open(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onOpened);
    property public final boolean isClosed;
    property public final boolean isOpen;
    field public static final androidx.compose.material.DrawerState.Companion Companion;
  }

  public static final class DrawerState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.DrawerState,androidx.compose.material.DrawerValue> Saver(androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DrawerValue,java.lang.Boolean> confirmStateChange);
  }

  public enum DrawerValue {
    enum_constant public static final androidx.compose.material.DrawerValue Closed;
    enum_constant public static final androidx.compose.material.DrawerValue Open;
  }

  public final class ElevationConstants {
    method public androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.Dp>? incomingAnimationSpecForInteraction(androidx.compose.foundation.Interaction interaction);
    method public androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.unit.Dp>? outgoingAnimationSpecForInteraction(androidx.compose.foundation.Interaction interaction);
    field public static final androidx.compose.material.ElevationConstants INSTANCE;
  }

  public final class ElevationKt {
    method public static void animateElevation-K5VTZl0(androidx.compose.animation.core.AnimatedValue<androidx.compose.ui.unit.Dp,?>, optional androidx.compose.foundation.Interaction? from, optional androidx.compose.foundation.Interaction? to, float target);
  }

  public interface ElevationOverlay {
    method @androidx.compose.runtime.Composable public long apply-_fH6D24(long color, float elevation);
  }

  public final class ElevationOverlayKt {
    method public static androidx.compose.runtime.ProvidableAmbient<androidx.compose.material.ElevationOverlay> getAmbientElevationOverlay();
  }

  @androidx.compose.runtime.Immutable public interface Emphasis {
    method public long applyEmphasis-8_81llA(long color);
  }

  public final class EmphasisKt {
    method @androidx.compose.runtime.Composable public static void ProvideEmphasis(androidx.compose.material.Emphasis emphasis, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static androidx.compose.runtime.Ambient<androidx.compose.material.EmphasisLevels> getAmbientEmphasisLevels();
  }

  public interface EmphasisLevels {
    method public androidx.compose.material.Emphasis getDisabled();
    method public androidx.compose.material.Emphasis getHigh();
    method public androidx.compose.material.Emphasis getMedium();
    property public abstract androidx.compose.material.Emphasis disabled;
    property public abstract androidx.compose.material.Emphasis high;
    property public abstract androidx.compose.material.Emphasis medium;
  }

  @kotlin.RequiresOptIn(message="This material API is experimental and is likely to change or to be removed in" + " the future.") public @interface ExperimentalMaterialApi {
  }

  public enum FabPosition {
    enum_constant public static final androidx.compose.material.FabPosition Center;
    enum_constant public static final androidx.compose.material.FabPosition End;
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public final class FixedThreshold implements androidx.compose.material.ThresholdConfig {
    method public float computeThreshold(androidx.compose.ui.unit.Density, float fromValue, float toValue);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public androidx.compose.material.FixedThreshold copy-0680j_4(float offset);
  }

  public final class FloatingActionButtonConstants {
    method @androidx.compose.runtime.Composable public float animateDefaultElevation-PzTOHyI(androidx.compose.foundation.InteractionState interactionState, optional float defaultElevation, optional float pressedElevation);
    field public static final androidx.compose.material.FloatingActionButtonConstants INSTANCE;
  }

  public final class FloatingActionButtonKt {
    method @androidx.compose.runtime.Composable public static void ExtendedFloatingActionButton-SrDf79w(kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional float elevation);
    method @androidx.compose.runtime.Composable public static void FloatingActionButton-pvsAfIA(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional float elevation, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public final class FractionalThreshold implements androidx.compose.material.ThresholdConfig {
    ctor public FractionalThreshold(@FloatRange(from=0.0, to=1.0) float fraction);
    method public float computeThreshold(androidx.compose.ui.unit.Density, float fromValue, float toValue);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public androidx.compose.material.FractionalThreshold copy(float fraction);
  }

  public final class IconButtonKt {
    method @androidx.compose.runtime.Composable public static void IconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
    method @androidx.compose.runtime.Composable public static void IconToggleButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
  }

  public final class IconKt {
    method @androidx.compose.runtime.Composable public static void Icon-1eoVtfs(androidx.compose.ui.graphics.painter.Painter painter, optional androidx.compose.ui.Modifier modifier, optional long tint);
    method @androidx.compose.runtime.Composable public static void Icon-QSAJrGw(androidx.compose.ui.graphics.vector.VectorAsset asset, optional androidx.compose.ui.Modifier modifier, optional long tint);
    method @androidx.compose.runtime.Composable public static void Icon-uUQrhdE(androidx.compose.ui.graphics.ImageAsset asset, optional androidx.compose.ui.Modifier modifier, optional long tint);
  }

  public final class ListItemKt {
    method @androidx.compose.runtime.Composable public static void ListItem(optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? icon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? secondaryText, optional boolean singleLineSecondaryText, optional kotlin.jvm.functions.Function0<kotlin.Unit>? overlineText, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailing, kotlin.jvm.functions.Function0<kotlin.Unit> text);
  }

  public final class MaterialTheme {
    method public androidx.compose.material.Colors getColors();
    method public androidx.compose.material.Shapes getShapes();
    method public androidx.compose.material.Typography getTypography();
    property public final androidx.compose.material.Colors colors;
    property public final androidx.compose.material.Shapes shapes;
    property public final androidx.compose.material.Typography typography;
    field public static final androidx.compose.material.MaterialTheme INSTANCE;
  }

  public final class MaterialThemeKt {
    method @androidx.compose.runtime.Composable public static void MaterialTheme(optional androidx.compose.material.Colors colors, optional androidx.compose.material.Typography typography, optional androidx.compose.material.Shapes shapes, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class MenuKt {
    method @androidx.compose.runtime.Composable public static void DropdownMenu-iBtHMRc(kotlin.jvm.functions.Function0<kotlin.Unit> toggle, boolean expanded, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, optional androidx.compose.ui.Modifier toggleModifier, optional long dropdownOffset, optional androidx.compose.ui.Modifier dropdownModifier, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> dropdownContent);
    method @androidx.compose.runtime.Composable public static void DropdownMenuItem(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class ModalBottomSheetConstants {
    method public float getDefaultElevation-D9Ej5fM();
    method public long getDefaultScrimColor-0d7_KjU();
    property public final float DefaultElevation;
    property public final long DefaultScrimColor;
    field public static final androidx.compose.material.ModalBottomSheetConstants INSTANCE;
  }

  public final class ModalBottomSheetKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void ModalBottomSheetLayout-dpadJcU(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> sheetContent, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.ModalBottomSheetState sheetState, optional androidx.compose.ui.graphics.Shape sheetShape, optional float sheetElevation, optional long sheetBackgroundColor, optional long sheetContentColor, optional long scrimColor, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.ModalBottomSheetState rememberModalBottomSheetState(androidx.compose.material.ModalBottomSheetValue initialValue, optional androidx.compose.animation.core.AnimationClockObservable clock, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.ModalBottomSheetValue,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.material.ExperimentalMaterialApi public final class ModalBottomSheetState extends androidx.compose.material.SwipeableState<androidx.compose.material.ModalBottomSheetValue> {
    ctor public ModalBottomSheetState(androidx.compose.material.ModalBottomSheetValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.ModalBottomSheetValue,java.lang.Boolean> confirmStateChange);
    method public void hide(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onHidden);
    method public boolean isVisible();
    method public void show(optional kotlin.jvm.functions.Function0<kotlin.Unit>? onShown);
    property public final boolean isVisible;
    field public static final androidx.compose.material.ModalBottomSheetState.Companion Companion;
  }

  public static final class ModalBottomSheetState.Companion {
    method public androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.ModalBottomSheetState,?> Saver(androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super androidx.compose.material.ModalBottomSheetValue,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.material.ExperimentalMaterialApi public enum ModalBottomSheetValue {
    enum_constant public static final androidx.compose.material.ModalBottomSheetValue Expanded;
    enum_constant public static final androidx.compose.material.ModalBottomSheetValue HalfExpanded;
    enum_constant public static final androidx.compose.material.ModalBottomSheetValue Hidden;
  }

  public final class OutlinedTextFieldKt {
    method @androidx.compose.runtime.Composable public static void OutlinedTextField-NT1NBPE(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle textStyle, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label, optional kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon, optional boolean isErrorValue, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted, optional androidx.compose.foundation.InteractionState interactionState, optional long activeColor, optional long inactiveColor, optional long errorColor);
    method @androidx.compose.runtime.Composable public static void OutlinedTextField-OHK2xX0(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle textStyle, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label, optional kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon, optional boolean isErrorValue, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted, optional androidx.compose.foundation.InteractionState interactionState, optional long activeColor, optional long inactiveColor, optional long errorColor);
  }

  public final class ProgressIndicatorConstants {
    method public androidx.compose.animation.core.SpringSpec<java.lang.Float> getDefaultProgressAnimationSpec();
    method public float getDefaultStrokeWidth-D9Ej5fM();
    property public final androidx.compose.animation.core.SpringSpec<java.lang.Float> DefaultProgressAnimationSpec;
    property public final float DefaultStrokeWidth;
    field public static final float DefaultIndicatorBackgroundOpacity = 0.24f;
    field public static final androidx.compose.material.ProgressIndicatorConstants INSTANCE;
  }

  public final class ProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator-vFL-O2w(@FloatRange(from=0.0, to=1.0) float progress, optional androidx.compose.ui.Modifier modifier, optional long color, optional float strokeWidth);
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator-y0SQU_c(optional androidx.compose.ui.Modifier modifier, optional long color, optional float strokeWidth);
    method @androidx.compose.runtime.Composable public static void LinearProgressIndicator-BeBJghs(optional androidx.compose.ui.Modifier modifier, optional long color, optional long backgroundColor);
    method @androidx.compose.runtime.Composable public static void LinearProgressIndicator-kLDug40(@FloatRange(from=0.0, to=1.0) float progress, optional androidx.compose.ui.Modifier modifier, optional long color, optional long backgroundColor);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface RadioButtonColors {
    method public long radioColor-0d7_KjU(boolean enabled, boolean selected);
  }

  public final class RadioButtonConstants {
    method @androidx.compose.runtime.Composable public androidx.compose.material.RadioButtonColors defaultColors-xS_xkl8(optional long selectedColor, optional long unselectedColor, optional long disabledColor);
    field public static final androidx.compose.material.RadioButtonConstants INSTANCE;
  }

  public final class RadioButtonKt {
    method @androidx.compose.runtime.Composable public static void RadioButton(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.RadioButtonColors colors);
  }

  @androidx.compose.runtime.Immutable public final class ResistanceConfig {
    ctor public ResistanceConfig(@FloatRange(from=0.0, to=3.4E38, fromInclusive=false) float basis, @FloatRange(from=0.0, to=3.4E38) float factorAtMin, @FloatRange(from=0.0, to=3.4E38) float factorAtMax);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float computeResistance(float overflow);
    method @androidx.compose.runtime.Immutable public androidx.compose.material.ResistanceConfig copy(float basis, float factorAtMin, float factorAtMax);
    method public float getBasis();
    method public float getFactorAtMax();
    method public float getFactorAtMin();
    property public final float basis;
    property public final float factorAtMax;
    property public final float factorAtMin;
  }

  public final class ScaffoldKt {
    method @androidx.compose.runtime.Composable public static void Scaffold-axyFlp8(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.material.ScaffoldState scaffoldState, optional kotlin.jvm.functions.Function0<kotlin.Unit> topBar, optional kotlin.jvm.functions.Function0<kotlin.Unit> bottomBar, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.SnackbarHostState,kotlin.Unit> snackbarHost, optional kotlin.jvm.functions.Function0<kotlin.Unit> floatingActionButton, optional androidx.compose.material.FabPosition floatingActionButtonPosition, optional boolean isFloatingActionButtonDocked, optional kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit>? drawerContent, optional boolean drawerGesturesEnabled, optional androidx.compose.ui.graphics.Shape drawerShape, optional float drawerElevation, optional long drawerBackgroundColor, optional long drawerContentColor, optional long drawerScrimColor, optional long backgroundColor, optional long contentColor, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.PaddingValues,kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static androidx.compose.material.ScaffoldState rememberScaffoldState(optional androidx.compose.material.DrawerState drawerState, optional androidx.compose.material.SnackbarHostState snackbarHostState);
  }

  @androidx.compose.runtime.Stable public final class ScaffoldState {
    ctor public ScaffoldState(androidx.compose.material.DrawerState drawerState, androidx.compose.material.SnackbarHostState snackbarHostState);
    method public androidx.compose.material.DrawerState getDrawerState();
    method public androidx.compose.material.SnackbarHostState getSnackbarHostState();
    property public final androidx.compose.material.DrawerState drawerState;
    property public final androidx.compose.material.SnackbarHostState snackbarHostState;
  }

  @androidx.compose.runtime.Immutable public final class Shapes {
    ctor public Shapes(androidx.compose.foundation.shape.CornerBasedShape small, androidx.compose.foundation.shape.CornerBasedShape medium, androidx.compose.foundation.shape.CornerBasedShape large);
    ctor public Shapes();
    method public androidx.compose.foundation.shape.CornerBasedShape component1();
    method public androidx.compose.foundation.shape.CornerBasedShape component2();
    method public androidx.compose.foundation.shape.CornerBasedShape component3();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.Shapes copy(androidx.compose.foundation.shape.CornerBasedShape small, androidx.compose.foundation.shape.CornerBasedShape medium, androidx.compose.foundation.shape.CornerBasedShape large);
    method public androidx.compose.foundation.shape.CornerBasedShape getLarge();
    method public androidx.compose.foundation.shape.CornerBasedShape getMedium();
    method public androidx.compose.foundation.shape.CornerBasedShape getSmall();
    property public final androidx.compose.foundation.shape.CornerBasedShape large;
    property public final androidx.compose.foundation.shape.CornerBasedShape medium;
    property public final androidx.compose.foundation.shape.CornerBasedShape small;
  }

  public final class ShapesKt {
  }

  public final class SliderConstants {
    field public static final androidx.compose.material.SliderConstants INSTANCE;
    field public static final float InactiveTrackColorAlpha = 0.24f;
    field public static final float TickColorAlpha = 0.54f;
  }

  public final class SliderKt {
    method @androidx.compose.runtime.Composable public static void Slider-B7rb6FQ(float value, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional @IntRange(from=0) int steps, optional kotlin.jvm.functions.Function0<kotlin.Unit> onValueChangeEnd, optional androidx.compose.foundation.InteractionState interactionState, optional long thumbColor, optional long activeTrackColor, optional long inactiveTrackColor, optional long activeTickColor, optional long inactiveTickColor);
  }

  public final class SnackbarConstants {
    method public long getDefaultActionPrimaryColor-0d7_KjU();
    method public long getDefaultBackgroundColor-0d7_KjU();
    property public final long defaultActionPrimaryColor;
    property public final long defaultBackgroundColor;
    field public static final androidx.compose.material.SnackbarConstants INSTANCE;
  }

  @androidx.compose.material.ExperimentalMaterialApi public interface SnackbarData {
    method public void dismiss();
    method public String? getActionLabel();
    method public androidx.compose.material.SnackbarDuration getDuration();
    method public String getMessage();
    method public void performAction();
    property public abstract String? actionLabel;
    property public abstract androidx.compose.material.SnackbarDuration duration;
    property public abstract String message;
  }

  public enum SnackbarDuration {
    enum_constant public static final androidx.compose.material.SnackbarDuration Indefinite;
    enum_constant public static final androidx.compose.material.SnackbarDuration Long;
    enum_constant public static final androidx.compose.material.SnackbarDuration Short;
  }

  public final class SnackbarHostKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void SnackbarHost(androidx.compose.material.SnackbarHostState hostState, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.SnackbarData,kotlin.Unit> snackbar);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public final class SnackbarHostState {
    ctor public SnackbarHostState();
    method public androidx.compose.material.SnackbarData? getCurrentSnackbarData();
    method public suspend Object? showSnackbar(String message, optional String? actionLabel, optional androidx.compose.material.SnackbarDuration duration, optional kotlin.coroutines.Continuation<? super androidx.compose.material.SnackbarResult> p);
    property public final androidx.compose.material.SnackbarData? currentSnackbarData;
  }

  public final class SnackbarKt {
    method @androidx.compose.runtime.Composable public static void Snackbar-GiTsVJ0(optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? action, optional boolean actionOnNewLine, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional float elevation, kotlin.jvm.functions.Function0<kotlin.Unit> text);
    method @androidx.compose.runtime.Composable public static void Snackbar-Ou9cdGU(androidx.compose.material.SnackbarData snackbarData, optional androidx.compose.ui.Modifier modifier, optional boolean actionOnNewLine, optional androidx.compose.ui.graphics.Shape shape, optional long backgroundColor, optional long contentColor, optional long actionColor, optional float elevation);
  }

  public enum SnackbarResult {
    enum_constant public static final androidx.compose.material.SnackbarResult ActionPerformed;
    enum_constant public static final androidx.compose.material.SnackbarResult Dismissed;
  }

  public final class SurfaceKt {
    method @androidx.compose.runtime.Composable public static void Surface-IHU7g64(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.Shape shape, optional long color, optional long contentColor, optional androidx.compose.foundation.BorderStroke? border, optional float elevation, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static long getPrimarySurface(androidx.compose.material.Colors);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public final class SwipeProgress<T> {
    ctor public SwipeProgress(T? from, T? to, @FloatRange(from=0.0, to=1.0) float fraction);
    method public T! component1();
    method public T! component2();
    method public float component3();
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Immutable public androidx.compose.material.SwipeProgress<T> copy(T! from, T! to, float fraction);
    method public float getFraction();
    method public T! getFrom();
    method public T! getTo();
    property public final float fraction;
    property public final T! from;
    property public final T! to;
  }

  public final class SwipeToDismissKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void SwipeToDismiss(androidx.compose.material.DismissState state, optional androidx.compose.ui.Modifier modifier, optional java.util.Set<? extends androidx.compose.material.DismissDirection> directions, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissDirection,? extends androidx.compose.material.ThresholdConfig> dismissThresholds, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> background, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> dismissContent);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.DismissState rememberDismissState(optional androidx.compose.material.DismissValue initialValue, optional kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissValue,java.lang.Boolean> confirmStateChange);
  }

  public final class SwipeableConstants {
    method public androidx.compose.material.ResistanceConfig? defaultResistanceConfig(java.util.Set<java.lang.Float> anchors, optional float factorAtMin, optional float factorAtMax);
    method public androidx.compose.animation.core.SpringSpec<java.lang.Float> getDefaultAnimationSpec();
    method public float getDefaultVelocityThreshold-D9Ej5fM();
    property public final androidx.compose.animation.core.SpringSpec<java.lang.Float> DefaultAnimationSpec;
    property public final float DefaultVelocityThreshold;
    field public static final androidx.compose.material.SwipeableConstants INSTANCE;
    field public static final float StandardResistanceFactor = 10.0f;
    field public static final float StiffResistanceFactor = 20.0f;
  }

  public final class SwipeableKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static <T> androidx.compose.material.SwipeableState<T> rememberSwipeableState(T initialValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmStateChange);
    method @androidx.compose.material.ExperimentalMaterialApi public static <T> androidx.compose.ui.Modifier swipeable-cdPsMM4(androidx.compose.ui.Modifier, androidx.compose.material.SwipeableState<T> state, java.util.Map<java.lang.Float,? extends T> anchors, androidx.compose.ui.gesture.scrollorientationlocking.Orientation orientation, optional boolean enabled, optional boolean reverseDirection, optional androidx.compose.foundation.InteractionState? interactionState, optional kotlin.jvm.functions.Function2<? super T,? super T,? extends androidx.compose.material.ThresholdConfig> thresholds, optional androidx.compose.material.ResistanceConfig? resistance, optional float velocityThreshold);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public class SwipeableState<T> {
    ctor public SwipeableState(T? initialValue, androidx.compose.animation.core.AnimationClockObservable clock, internal androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, internal kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmStateChange);
    method @androidx.compose.material.ExperimentalMaterialApi public final void animateTo(T? targetValue, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> anim, optional kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super T,kotlin.Unit>? onEnd);
    method public final float getDirection();
    method public final androidx.compose.runtime.State<java.lang.Float> getOffset();
    method public final androidx.compose.runtime.State<java.lang.Float> getOverflow();
    method public final androidx.compose.material.SwipeProgress<T> getProgress();
    method public final T! getTargetValue();
    method public final T! getValue();
    method public final boolean isAnimationRunning();
    method @androidx.compose.material.ExperimentalMaterialApi public final void snapTo(T? targetValue);
    property public final float direction;
    property public final boolean isAnimationRunning;
    property public final androidx.compose.runtime.State<java.lang.Float> offset;
    property public final androidx.compose.runtime.State<java.lang.Float> overflow;
    property public final androidx.compose.material.SwipeProgress<T> progress;
    property public final T! targetValue;
    property public final T! value;
    field public static final androidx.compose.material.SwipeableState.Companion Companion;
  }

  public static final class SwipeableState.Companion {
    method public <T> androidx.compose.runtime.savedinstancestate.Saver<androidx.compose.material.SwipeableState<T>,T> Saver(androidx.compose.animation.core.AnimationClockObservable clock, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmStateChange);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface SwitchColors {
    method public long thumbColor-0d7_KjU(boolean enabled, boolean checked);
    method public long trackColor-0d7_KjU(boolean enabled, boolean checked);
  }

  public final class SwitchConstants {
    method @androidx.compose.runtime.Composable public androidx.compose.material.SwitchColors defaultColors-R8aI8sA(optional long checkedThumbColor, optional long checkedTrackColor, optional float checkedTrackAlpha, optional long uncheckedThumbColor, optional long uncheckedTrackColor, optional float uncheckedTrackAlpha, optional long disabledCheckedThumbColor, optional long disabledCheckedTrackColor, optional long disabledUncheckedThumbColor, optional long disabledUncheckedTrackColor);
    field public static final androidx.compose.material.SwitchConstants INSTANCE;
  }

  public final class SwitchKt {
    method @androidx.compose.runtime.Composable public static void Switch(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.foundation.InteractionState interactionState, optional androidx.compose.material.SwitchColors colors);
  }

  public final class TabConstants {
    method @androidx.compose.runtime.Composable public void DefaultDivider-Z-uBYeE(optional androidx.compose.ui.Modifier modifier, optional float thickness, optional long color);
    method @androidx.compose.runtime.Composable public void DefaultIndicator-Z-uBYeE(optional androidx.compose.ui.Modifier modifier, optional float height, optional long color);
    method public androidx.compose.ui.Modifier defaultTabIndicatorOffset(androidx.compose.ui.Modifier, androidx.compose.material.TabPosition currentTabPosition);
    method public float getDefaultDividerThickness-D9Ej5fM();
    method public float getDefaultIndicatorHeight-D9Ej5fM();
    method public float getDefaultScrollableTabRowPadding-D9Ej5fM();
    property public final float DefaultDividerThickness;
    property public final float DefaultIndicatorHeight;
    property public final float DefaultScrollableTabRowPadding;
    field public static final float DefaultDividerOpacity = 0.12f;
    field public static final androidx.compose.material.TabConstants INSTANCE;
  }

  public final class TabKt {
    method @androidx.compose.runtime.Composable public static void Tab-RxYFAfY(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.InteractionState interactionState, optional long selectedContentColor, optional long unselectedContentColor, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Tab-iU7nRsg(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> text, optional kotlin.jvm.functions.Function0<kotlin.Unit> icon, optional androidx.compose.foundation.InteractionState interactionState, optional long selectedContentColor, optional long unselectedContentColor);
  }

  @androidx.compose.runtime.Immutable public final class TabPosition {
    method public float component1-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.TabPosition copy-ioHfwGI(float left, float width);
    method public float getLeft-D9Ej5fM();
    method public float getRight-D9Ej5fM();
    method public float getWidth-D9Ej5fM();
    property public final float left;
    property public final float right;
    property public final float width;
  }

  public final class TabRowKt {
    method @androidx.compose.runtime.Composable public static void ScrollableTabRow-qhCAd8w(int selectedTabIndex, optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional float edgePadding, optional kotlin.jvm.functions.Function1<? super java.util.List<androidx.compose.material.TabPosition>,kotlin.Unit> indicator, optional kotlin.jvm.functions.Function0<kotlin.Unit> divider, kotlin.jvm.functions.Function0<kotlin.Unit> tabs);
    method @androidx.compose.runtime.Composable public static void TabRow-xUsefZ0(int selectedTabIndex, optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long contentColor, optional kotlin.jvm.functions.Function1<? super java.util.List<androidx.compose.material.TabPosition>,kotlin.Unit> indicator, optional kotlin.jvm.functions.Function0<kotlin.Unit> divider, kotlin.jvm.functions.Function0<kotlin.Unit> tabs);
  }

  public final class TextFieldImplKt {
  }

  public final class TextFieldKt {
    method @androidx.compose.runtime.Composable public static void TextField-LTmrouY(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle textStyle, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label, optional kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon, optional boolean isErrorValue, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted, optional androidx.compose.foundation.InteractionState interactionState, optional long activeColor, optional long inactiveColor, optional long errorColor, optional long backgroundColor, optional androidx.compose.ui.graphics.Shape shape);
    method @androidx.compose.runtime.Composable public static void TextField-WI3iwFk(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle textStyle, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label, optional kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon, optional boolean isErrorValue, optional androidx.compose.ui.text.input.VisualTransformation visualTransformation, optional androidx.compose.ui.text.input.KeyboardType keyboardType, optional androidx.compose.ui.text.input.ImeAction imeAction, optional kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted, optional androidx.compose.foundation.InteractionState interactionState, optional long activeColor, optional long inactiveColor, optional long errorColor, optional long backgroundColor, optional androidx.compose.ui.graphics.Shape shape);
    field public static final float ContainerAlpha = 0.12f;
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public interface ThresholdConfig {
    method public float computeThreshold(androidx.compose.ui.unit.Density, float fromValue, float toValue);
  }

  @androidx.compose.runtime.Immutable public final class Typography {
    ctor public Typography(androidx.compose.ui.text.font.FontFamily defaultFontFamily, androidx.compose.ui.text.TextStyle h1, androidx.compose.ui.text.TextStyle h2, androidx.compose.ui.text.TextStyle h3, androidx.compose.ui.text.TextStyle h4, androidx.compose.ui.text.TextStyle h5, androidx.compose.ui.text.TextStyle h6, androidx.compose.ui.text.TextStyle subtitle1, androidx.compose.ui.text.TextStyle subtitle2, androidx.compose.ui.text.TextStyle body1, androidx.compose.ui.text.TextStyle body2, androidx.compose.ui.text.TextStyle button, androidx.compose.ui.text.TextStyle caption, androidx.compose.ui.text.TextStyle overline);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component10();
    method public androidx.compose.ui.text.TextStyle component11();
    method public androidx.compose.ui.text.TextStyle component12();
    method public androidx.compose.ui.text.TextStyle component13();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public androidx.compose.ui.text.TextStyle component4();
    method public androidx.compose.ui.text.TextStyle component5();
    method public androidx.compose.ui.text.TextStyle component6();
    method public androidx.compose.ui.text.TextStyle component7();
    method public androidx.compose.ui.text.TextStyle component8();
    method public androidx.compose.ui.text.TextStyle component9();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.Typography copy(androidx.compose.ui.text.TextStyle h1, androidx.compose.ui.text.TextStyle h2, androidx.compose.ui.text.TextStyle h3, androidx.compose.ui.text.TextStyle h4, androidx.compose.ui.text.TextStyle h5, androidx.compose.ui.text.TextStyle h6, androidx.compose.ui.text.TextStyle subtitle1, androidx.compose.ui.text.TextStyle subtitle2, androidx.compose.ui.text.TextStyle body1, androidx.compose.ui.text.TextStyle body2, androidx.compose.ui.text.TextStyle button, androidx.compose.ui.text.TextStyle caption, androidx.compose.ui.text.TextStyle overline);
    method public androidx.compose.ui.text.TextStyle getBody1();
    method public androidx.compose.ui.text.TextStyle getBody2();
    method public androidx.compose.ui.text.TextStyle getButton();
    method public androidx.compose.ui.text.TextStyle getCaption();
    method public androidx.compose.ui.text.TextStyle getH1();
    method public androidx.compose.ui.text.TextStyle getH2();
    method public androidx.compose.ui.text.TextStyle getH3();
    method public androidx.compose.ui.text.TextStyle getH4();
    method public androidx.compose.ui.text.TextStyle getH5();
    method public androidx.compose.ui.text.TextStyle getH6();
    method public androidx.compose.ui.text.TextStyle getOverline();
    method public androidx.compose.ui.text.TextStyle getSubtitle1();
    method public androidx.compose.ui.text.TextStyle getSubtitle2();
    property public final androidx.compose.ui.text.TextStyle body1;
    property public final androidx.compose.ui.text.TextStyle body2;
    property public final androidx.compose.ui.text.TextStyle button;
    property public final androidx.compose.ui.text.TextStyle caption;
    property public final androidx.compose.ui.text.TextStyle h1;
    property public final androidx.compose.ui.text.TextStyle h2;
    property public final androidx.compose.ui.text.TextStyle h3;
    property public final androidx.compose.ui.text.TextStyle h4;
    property public final androidx.compose.ui.text.TextStyle h5;
    property public final androidx.compose.ui.text.TextStyle h6;
    property public final androidx.compose.ui.text.TextStyle overline;
    property public final androidx.compose.ui.text.TextStyle subtitle1;
    property public final androidx.compose.ui.text.TextStyle subtitle2;
  }

  public final class TypographyKt {
  }

}

package androidx.compose.material.ripple {

  public final class RippleAnimationKt {
  }

  @androidx.compose.runtime.Stable public final class RippleIndication implements androidx.compose.foundation.Indication {
    method public androidx.compose.foundation.IndicationInstance createInstance();
  }

  public final class RippleIndicationKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.material.ripple.RippleIndication RippleIndication-DudYJDg(optional boolean bounded, optional androidx.compose.ui.unit.Dp? radius, optional long color);
  }

  @androidx.compose.material.ExperimentalMaterialApi public interface RippleOpacity {
    method public float opacityForInteraction(androidx.compose.foundation.Interaction interaction);
  }

  @androidx.compose.material.ExperimentalMaterialApi public interface RippleTheme {
    method @androidx.compose.runtime.Composable public long defaultColor-0d7_KjU();
    method @androidx.compose.runtime.Composable public androidx.compose.material.ripple.RippleOpacity rippleOpacity();
  }

  public final class RippleThemeKt {
    method public static androidx.compose.runtime.ProvidableAmbient<androidx.compose.material.ripple.RippleTheme> getAmbientRippleTheme();
  }

}

