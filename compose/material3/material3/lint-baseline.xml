<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-alpha02" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-alpha02)" variant="all" version="8.3.0-alpha02">

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/CardScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/CheckboxScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/FloatingActionButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/IconButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/MaterialRippleThemeTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/MaterialRippleThemeTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationBarScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationDrawerItemScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/NavigationRailScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material3/TabScreenshotTest.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisSizes with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisSizes = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisPositions with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisPositions = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="    internal val anchors = mutableMapOf&lt;T, Float>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;T, Float> of getAnchors$lint_module: replace with ObjectFloatMap"
        errorLine1="    internal val anchors = mutableMapOf&lt;T, Float>()"
        errorLine2="                 ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor MapDraggableAnchors has parameter anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="private class MapDraggableAnchors&lt;T>(private val anchors: Map&lt;T, Float>) : DraggableAnchors&lt;T> {"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="private class MapDraggableAnchors&lt;T>(private val anchors: Map&lt;T, Float>) : DraggableAnchors&lt;T> {"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable xCandidates with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="        val xCandidates = listOf("
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable yCandidates with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="        val yCandidates = listOf("
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable anchors with type Map&lt;Float, ? extends DrawerValue>: replace with FloatObjectMap"
        errorLine1="    val anchors = mapOf(minValue to DrawerValue.Closed, maxValue to DrawerValue.Open)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationDrawer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable anchors with type Map&lt;Float, ? extends DrawerValue>: replace with FloatObjectMap"
        errorLine1="    val anchors = mapOf(minValue to DrawerValue.Closed, maxValue to DrawerValue.Open)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationDrawer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setAnchors$lint_module has parameter &lt;set-?> with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Float, T> of getAnchors$lint_module: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="                 ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method ensureInit$lint_module has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal fun ensureInit(newAnchors: Map&lt;Float, T>) {"
        errorLine2="                                        ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$lint_module has parameter oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        oldAnchors: Map&lt;Float, T>,"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$lint_module has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        newAnchors: Map&lt;Float, T>"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="            val bounds = findBounds(offset.floatValue, anchors.keys)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method swipeable has parameter anchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    anchors: Map&lt;Float, T>,"
        errorLine2="             ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        val oldAnchors = state.anchors"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method findBounds has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="    anchors: Set&lt;Float>"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Float> of findBounds: replace with FloatList"
        errorLine1="): List&lt;Float> {"
        errorLine2="   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method computeTarget has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="    anchors: Set&lt;Float>,"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="    val bounds = findBounds(offset, anchors)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method getOffset has parameter $this$getOffset with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="private fun &lt;T> Map&lt;Float, T>.getOffset(state: T): Float? {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method resistanceConfig$lint_module has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="        anchors: Set&lt;Float>,"
        errorLine2="                 ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable tabContentWidths with type List&lt;Dp>: replace with FloatList"
        errorLine1="            val tabContentWidths = mutableListOf&lt;Dp>()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of getValues$lint_module: replace with IntList"
        errorLine1="    internal val values get() = if (selection == Selection.Minute) Minutes else Hours"
        errorLine2="                 ~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field Minutes with type List&lt;Integer>: replace with IntList"
        errorLine1="private val Minutes = listOf(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55)"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field Hours with type List&lt;Integer>: replace with IntList"
        errorLine1="private val Hours = listOf(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field ExtraHours with type List&lt;Integer>: replace with IntList"
        errorLine1="private val ExtraHours = Hours.fastMap { (it % 12 + 12) }"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method BottomSheetScaffoldLayout has parameter &apos;bottomSheet&apos; with type Function1&lt;? super Integer, Unit>."
        errorLine1="    bottomSheet: @Composable (layoutHeight: Int) -> Unit,"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/BottomSheetScaffold.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method BottomSheetScaffoldLayout has parameter &apos;sheetOffset&apos; with type Function0&lt;Float>."
        errorLine1="    sheetOffset: () -> Float,"
        errorLine2="                 ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/BottomSheetScaffold.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateInputContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateInputTextField has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DisplayModeToggleButton has parameter &apos;onDisplayModeChange&apos; with type Function1&lt;? super DisplayMode, Unit>."
        errorLine1="    onDisplayModeChange: (DisplayMode) -> Unit"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DatePickerContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DatePickerContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method HorizontalMonthsList has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method HorizontalMonthsList has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method updateDisplayedMonth has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Month has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method YearPicker has parameter &apos;onYearSelected&apos; with type Function1&lt;? super Integer, Unit>."
        errorLine1="    onYearSelected: (year: Int) -> Unit,"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangeInputContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangeInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangePickerContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangePickerContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method VerticalMonthsList has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method VerticalMonthsList has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, ? extends Unit>."
        errorLine1="        val onDateSelectionChange = { dateInMillis: Long ->"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method updateDateSelection has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method awaitHorizontalPointerSlopOrCancellation has parameter &apos;onPointerSlopReached&apos; with type Function2&lt;? super PointerInputChange, ? super Float, Unit>."
        errorLine1="    onPointerSlopReached: (change: PointerInputChange, overSlop: Float) -> Unit"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DragGestureDetectorCopy.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;settleToDismiss&apos; with type Function1&lt;? super Float, ? extends Unit>."
        errorLine1="    val settleToDismiss: (velocity: Float) -> Unit = {"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/material3/ModalBottomSheet.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Scrim has parameter &apos;fraction&apos; with type Function0&lt;Float>."
        errorLine1="    fraction: () -> Float,"
        errorLine2="              ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationDrawer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method OutlinedTextFieldLayout has parameter &apos;onLabelMeasured&apos; with type Function1&lt;? super Size, Unit>."
        errorLine1="    onLabelMeasured: (Size) -> Unit,"
        errorLine2="                     ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor OutlinedTextFieldMeasurePolicy has parameter &apos;onLabelMeasured&apos; with type Function1&lt;? super Size, Unit>."
        errorLine1="    private val onLabelMeasured: (Size) -> Unit,"
        errorLine2="                                 ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicWidth has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicHeight has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateVerticalPosition&apos; with type Function1&lt;? super Placeable, ? extends Integer>."
        errorLine1="    // Single line text fields have text components centered vertically."
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method ConsumeSwipeWithinBottomSheetBoundsNestedScrollConnection has parameter &apos;onFling&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onFling: (velocity: Float) -> Unit"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SheetDefaults.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Slider has parameter &apos;onValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onValueChange: (Float) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Slider has parameter &apos;onValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onValueChange: (Float) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method RangeSlider has parameter &apos;onValueChange&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    onValueChange: (FloatRange) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;postPointerSlop&apos; with type Function2&lt;? super PointerInputChange, ? super Float, ? extends Unit>."
        errorLine1="    val postPointerSlop = { pointerInput: PointerInputChange, offset: Float ->"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor SliderState has parameter &apos;initialOnValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    initialOnValueChange: ((Float) -> Unit)? = null,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setOnValueChange$lint_module has parameter &apos;&lt;set-?>&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    /**"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;Float, Unit> of &apos;getOnValueChange$lint_module&apos;."
        errorLine1="    internal var onValueChange: (Float) -> Unit = {"
        errorLine2="                                ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor RangeSliderState has parameter &apos;initialOnValueChange&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    initialOnValueChange: ((FloatRange) -> Unit)? = null,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setOnValueChange$lint_module has parameter &apos;&lt;set-?>&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    internal var onValueChange: (FloatRange) -> Unit = {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;FloatRange, Unit> of &apos;getOnValueChange$lint_module&apos;."
        errorLine1="    internal var onValueChange: (FloatRange) -> Unit = {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;isValidDistance&apos; with type Function1&lt;? super Float, ? extends Boolean>."
        errorLine1="        fun Float.isValidDistance(): Boolean {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateSnappingOffsetBounds&apos; with type Function0&lt;? extends FloatRange>."
        errorLine1="        fun calculateSnappingOffsetBounds(): FloatRange {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;consumeDelta&apos; with type Function2&lt;? super AnimationScope&lt;Float, AnimationVector1D>, ? super Float, ? extends Unit>."
        errorLine1="        fun AnimationScope&lt;Float, AnimationVector1D>.consumeDelta(delta: Float) {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setThresholds$lint_module has parameter &apos;&lt;set-?>&apos; with type Function2&lt;? super Float, ? super Float, Float>."
        errorLine1="    internal var thresholds: (Float, Float) -> Float by mutableStateOf({ _, _ -> 0f })"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;Float, Float, Float> of &apos;getThresholds$lint_module&apos;."
        errorLine1="    internal var thresholds: (Float, Float) -> Float by mutableStateOf({ _, _ -> 0f })"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method computeTarget has parameter &apos;thresholds&apos; with type Function2&lt;? super Float, ? super Float, Float>."
        errorLine1="    thresholds: (Float, Float) -> Float,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;valueToOffset&apos; with type Function1&lt;? super Boolean, ? extends Float>."
        errorLine1="    val valueToOffset = remember&lt;(Boolean) -> Float>(minBound, maxBound) {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Switch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicWidth has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicHeight has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateVerticalPosition&apos; with type Function1&lt;? super Placeable, ? extends Integer>."
        errorLine1="    // Single line text field without label places its text components centered vertically."
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;labelColor&apos; with type Function1&lt;? super InputPhase, ? extends Color>."
        errorLine1="    val labelColor: @Composable (InputPhase) -> Color = {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Transition has parameter &apos;contentColor&apos; with type Function1&lt;? super InputPhase, Color>."
        errorLine1="        contentColor: @Composable (InputPhase) -> Color,"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Transition has parameter &apos;content&apos; with type Function5&lt;? super Float, ? super Color, ? super Color, ? super Float, ? super Float, Unit>."
        errorLine1="        content: @Composable ("
        errorLine2="                 ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

</issues>
