<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.2.0-beta01" type="baseline" client="gradle" dependencies="false" name="AGP (8.2.0-beta01)" variant="all" version="8.2.0-beta01">

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/CardScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/CheckboxScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/FloatingActionButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/IconButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/MaterialRippleThemeTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/MaterialRippleThemeTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/NavigationBarScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/NavigationDrawerItemScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/NavigationRailScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidAndroidTest/kotlin/androidx/compose/material3/TabScreenshotTest.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            sequences.add(0, currentSequence.toList())"
        errorLine2="                                             ~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        for (measurable in measurables) {"
        errorLine2="                        ~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            sequences.forEachIndexed { i, placeables ->"
        errorLine2="                      ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                placeables.forEachIndexed { j, placeable ->"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AlertDialog.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == &quot;navigationIcon&quot; }"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AppBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == &quot;actionIcons&quot; }"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AppBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == &quot;title&quot; }"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/AppBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val badgePlaceable = measurables.first { it.layoutId == &quot;badge&quot; }.measure("
        errorLine2="                                         ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Badge.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val anchorPlaceable = measurables.first { it.layoutId == &quot;anchor&quot; }.measure(constraints)"
        errorLine2="                                          ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Badge.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                dayNames.forEach {"
        errorLine2="                         ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        weekdays.drop(2).forEachIndexed { index, day ->"
        errorLine2="                         ~~~~~~~~~~~~~~">
        <location
            file="src/jvmMain/kotlin/androidx/compose/material3/LegacyCalendarModelImpl.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        ).map {"
        errorLine2="          ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val x = xCandidates.firstOrNull {"
        errorLine2="                            ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        ).map {"
        errorLine2="          ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val y = yCandidates.firstOrNull {"
        errorLine2="                            ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/MenuPosition.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == IconLayoutIdTag }.measure(looseConstraints)"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                .first { it.layoutId == IndicatorRippleLayoutIdTag }"
        errorLine2="                 ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                .firstOrNull { it.layoutId == IndicatorLayoutIdTag }"
        errorLine2="                 ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                    .first { it.layoutId == LabelLayoutIdTag }"
        errorLine2="                     ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationBar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == IconLayoutIdTag }.measure(looseConstraints)"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationRail.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                .first { it.layoutId == IndicatorRippleLayoutIdTag }"
        errorLine2="                 ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationRail.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                .firstOrNull { it.layoutId == IndicatorLayoutIdTag }"
        errorLine2="                 ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationRail.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                    .first { it.layoutId == LabelLayoutIdTag }"
        errorLine2="                     ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationRail.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val leadingPlaceable = measurables.find {"
        errorLine2="                                           ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingPlaceable = measurables.find { it.layoutId == TrailingId }"
        errorLine2="                                            ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixPlaceable = measurables.find { it.layoutId == PrefixId }"
        errorLine2="                                          ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixPlaceable = measurables.find { it.layoutId == SuffixId }"
        errorLine2="                                          ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.find { it.layoutId == LabelId }?.measure(labelConstraints)"
        errorLine2="                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val supportingMeasurable = measurables.find { it.layoutId == SupportingId }"
        errorLine2="                                               ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == TextFieldId }.measure(textConstraints)"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.find { it.layoutId == PlaceholderId }?.measure(placeholderConstraints)"
        errorLine2="                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val containerPlaceable = measurables.first { it.layoutId == ContainerId }.measure("
        errorLine2="                                             ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            intrinsicMeasurer(measurables.first { it.layoutId == TextFieldId }, height)"
        errorLine2="                                          ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val labelWidth = measurables.find { it.layoutId == LabelId }?.let {"
        errorLine2="                                     ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingWidth = measurables.find { it.layoutId == TrailingId }?.let {"
        errorLine2="                                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val leadingWidth = measurables.find { it.layoutId == LeadingId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixWidth = measurables.find { it.layoutId == PrefixId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixWidth = measurables.find { it.layoutId == SuffixId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val placeholderWidth = measurables.find { it.layoutId == PlaceholderId }?.let {"
        errorLine2="                                           ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val leadingHeight = measurables.find { it.layoutId == LeadingId }?.let {"
        errorLine2="                                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingHeight = measurables.find { it.layoutId == TrailingId }?.let {"
        errorLine2="                                         ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val labelHeight = measurables.find { it.layoutId == LabelId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixHeight = measurables.find { it.layoutId == PrefixId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixHeight = measurables.find { it.layoutId == SuffixId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            intrinsicMeasurer(measurables.first { it.layoutId == TextFieldId }, remainingWidth)"
        errorLine2="                                          ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val placeholderHeight = measurables.find { it.layoutId == PlaceholderId }?.let {"
        errorLine2="                                            ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val supportingHeight = measurables.find { it.layoutId == SupportingId }?.let {"
        errorLine2="                                           ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val topBarPlaceables = subcompose(ScaffoldLayoutContent.TopBar, topBar).map {"
        errorLine2="                                                                                ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val topBarHeight = topBarPlaceables.maxByOrNull { it.height }?.height ?: 0"
        errorLine2="                                            ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val snackbarPlaceables = subcompose(ScaffoldLayoutContent.Snackbar, snackbar).map {"
        errorLine2="                                                                                      ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val snackbarHeight = snackbarPlaceables.maxByOrNull { it.height }?.height ?: 0"
        errorLine2="                                                ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val snackbarWidth = snackbarPlaceables.maxByOrNull { it.width }?.width ?: 0"
        errorLine2="                                               ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            subcompose(ScaffoldLayoutContent.Fab, fab).mapNotNull { measurable ->"
        errorLine2="                                                       ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val fabWidth = fabPlaceables.maxByOrNull { it.width }!!.width"
        errorLine2="                                         ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val fabHeight = fabPlaceables.maxByOrNull { it.height }!!.height"
        errorLine2="                                          ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        }.map { it.measure(looseConstraints) }"
        errorLine2="          ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val bottomBarHeight = bottomBarPlaceables.maxByOrNull { it.height }?.height"
        errorLine2="                                                  ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        }.map { it.measure(looseConstraints) }"
        errorLine2="          ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            bodyContentPlaceables.forEach {"
        errorLine2="                                  ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            topBarPlaceables.forEach {"
        errorLine2="                             ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            snackbarPlaceables.forEach {"
        errorLine2="                               ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            bottomBarPlaceables.forEach {"
        errorLine2="                                ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                fabPlaceables.forEach {"
        errorLine2="                              ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Scaffold.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                val iconPlaceables = iconMeasurables.map { it.measure(constraints) }"
        errorLine2="                                                     ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SegmentedButton.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                val iconDesiredWidth = iconMeasurables.fold(0) { acc, it ->"
        errorLine2="                                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SegmentedButton.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                val contentPlaceables = contentMeasurables.map { it.measure(constraints) }"
        errorLine2="                                                           ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SegmentedButton.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                    iconPlaceables.forEach {"
        errorLine2="                                   ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SegmentedButton.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                    contentPlaceables.forEach {"
        errorLine2="                                      ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SegmentedButton.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val thumbPlaceable = measurables.first {"
        errorLine2="                                         ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trackPlaceable = measurables.first {"
        errorLine2="                                         ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val startThumbPlaceable = measurables.first {"
        errorLine2="                                              ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val endThumbPlaceable = measurables.first {"
        errorLine2="                                            ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trackPlaceable = measurables.first {"
        errorLine2="                                         ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                        list.map {"
        errorLine2="                             ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                list.map {"
        errorLine2="                     ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.firstOrNull { it.layoutId == actionTag }?.measure(constraints)"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Snackbar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.firstOrNull { it.layoutId == dismissActionTag }?.measure(constraints)"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Snackbar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val textPlaceable = measurables.first { it.layoutId == textTag }.measure("
        errorLine2="                                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Snackbar.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val keys = state.items.map { it.key }.toMutableList()"
        errorLine2="                               ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnackbarHost.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        keys.filterNotNull().mapTo(state.items) { key ->"
        errorLine2="             ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnackbarHost.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        keys.filterNotNull().mapTo(state.items) { key ->"
        errorLine2="                             ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnackbarHost.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                val animationDelay = if (isVisible &amp;&amp; keys.filterNotNull().size != 1) delay else 0"
        errorLine2="                                                           ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnackbarHost.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        state.items.forEach { (item, opacity) ->"
        errorLine2="                    ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnackbarHost.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="    val a = anchors.filter { it &lt;= offset + 0.001 }.maxOrNull()"
        errorLine2="                                                    ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="    val b = anchors.filter { it >= offset - 0.001 }.minOrNull()"
        errorLine2="                                                    ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == &quot;text&quot; }.measure("
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Tab.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.first { it.layoutId == &quot;icon&quot; }.measure(constraints)"
        errorLine2="                        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Tab.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val tabRowHeight = tabMeasurables.fold(initial = 0) { max, curr ->"
        errorLine2="                                              ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val tabPlaceables = tabMeasurables.map {"
        errorLine2="                                               ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                tabPlaceables.forEachIndexed { index, placeable ->"
        errorLine2="                              ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                subcompose(TabSlots.Divider, divider).forEach {"
        errorLine2="                                                      ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                }.forEach {"
        errorLine2="                  ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val layoutHeight = tabMeasurables.fold(initial = 0) { curr, measurable ->"
        errorLine2="                                              ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            tabMeasurables.forEach {"
        errorLine2="                           ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val layoutWidth = tabPlaceables.fold(initial = padding * 2) { curr, measurable ->"
        errorLine2="                                            ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                tabPlaceables.forEachIndexed { index, placeable ->"
        errorLine2="                              ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                subcompose(TabSlots.Divider, divider).forEach {"
        errorLine2="                                                      ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="                }.forEach {"
        errorLine2="                  ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TabRow.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.find { it.layoutId == LeadingId }?.measure(looseConstraints)"
        errorLine2="                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingPlaceable = measurables.find { it.layoutId == TrailingId }"
        errorLine2="                                            ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixPlaceable = measurables.find { it.layoutId == PrefixId }"
        errorLine2="                                          ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixPlaceable = measurables.find { it.layoutId == SuffixId }"
        errorLine2="                                          ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            measurables.find { it.layoutId == LabelId }?.measure(labelConstraints)"
        errorLine2="                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val supportingMeasurable = measurables.find { it.layoutId == SupportingId }"
        errorLine2="                                               ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            .first { it.layoutId == TextFieldId }"
        errorLine2="             ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            .find { it.layoutId == PlaceholderId }"
        errorLine2="             ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val containerPlaceable = measurables.first { it.layoutId == ContainerId }.measure("
        errorLine2="                                             ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            intrinsicMeasurer(measurables.first { it.layoutId == TextFieldId }, height)"
        errorLine2="                                          ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val labelWidth = measurables.find { it.layoutId == LabelId }?.let {"
        errorLine2="                                     ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingWidth = measurables.find { it.layoutId == TrailingId }?.let {"
        errorLine2="                                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixWidth = measurables.find { it.layoutId == PrefixId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixWidth = measurables.find { it.layoutId == SuffixId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val leadingWidth = measurables.find { it.layoutId == LeadingId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val placeholderWidth = measurables.find { it.layoutId == PlaceholderId }?.let {"
        errorLine2="                                           ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val leadingHeight = measurables.find { it.layoutId == LeadingId }?.let {"
        errorLine2="                                        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val trailingHeight = measurables.find { it.layoutId == TrailingId }?.let {"
        errorLine2="                                         ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val labelHeight = measurables.find { it.layoutId == LabelId }?.let {"
        errorLine2="                                      ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val prefixHeight = measurables.find { it.layoutId == PrefixId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val suffixHeight = measurables.find { it.layoutId == SuffixId }?.let {"
        errorLine2="                                       ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            intrinsicMeasurer(measurables.first { it.layoutId == TextFieldId }, remainingWidth)"
        errorLine2="                                          ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val placeholderHeight = measurables.find { it.layoutId == PlaceholderId }?.let {"
        errorLine2="                                            ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val supportingHeight = measurables.find { it.layoutId == SupportingId }?.let {"
        errorLine2="                                           ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val spacer = measurables.first { it.layoutId == &quot;Spacer&quot; }"
        errorLine2="                                     ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val items = measurables.filter { it.layoutId != &quot;Spacer&quot; }.map { item ->"
        errorLine2="                                    ~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val items = measurables.filter { it.layoutId != &quot;Spacer&quot; }.map { item ->"
        errorLine2="                                                                       ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val spacer = measurables.first { it.layoutId == &quot;Spacer&quot; }"
        errorLine2="                                     ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val items = measurables.filter { it.layoutId != &quot;Spacer&quot; }.map { item ->"
        errorLine2="                                    ~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            val items = measurables.filter { it.layoutId != &quot;Spacer&quot; }.map { item ->"
        errorLine2="                                                                       ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val placeables = measurables.filter {"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        }.map { measurable -> measurable.measure(itemConstraints) }"
        errorLine2="          ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val selectorMeasurable = measurables.find { it.layoutId == LayoutId.Selector }"
        errorLine2="                                             ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="        val innerMeasurable = measurables.find { it.layoutId == LayoutId.InnerCircle }"
        errorLine2="                                          ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="            placeables.forEachIndexed { i, it ->"
        errorLine2="                       ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="ListIterator"
        message="Creating an unnecessary Iterator to iterate through a List"
        errorLine1="private val ExtraHours = Hours.map { (it % 12 + 12) }"
        errorLine2="                               ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TimePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method BottomSheetScaffoldLayout has parameter &apos;bottomSheet&apos; with type Function1&lt;? super Integer, Unit>."
        errorLine1="    bottomSheet: @Composable (layoutHeight: Int) -> Unit,"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/BottomSheetScaffold.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method BottomSheetScaffoldLayout has parameter &apos;sheetOffset&apos; with type Function0&lt;Float>."
        errorLine1="    sheetOffset: () -> Float,"
        errorLine2="                 ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/BottomSheetScaffold.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateInputContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateInputTextField has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DisplayModeToggleButton has parameter &apos;onDisplayModeChange&apos; with type Function1&lt;? super DisplayMode, Unit>."
        errorLine1="    onDisplayModeChange: (DisplayMode) -> Unit"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long?) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DatePickerContent has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DatePickerContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method HorizontalMonthsList has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method HorizontalMonthsList has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method updateDisplayedMonth has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Month has parameter &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDateSelectionChange: (dateInMillis: Long) -> Unit,"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method YearPicker has parameter &apos;onYearSelected&apos; with type Function1&lt;? super Integer, Unit>."
        errorLine1="    onYearSelected: (year: Int) -> Unit,"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DatePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangeInputContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangeInput.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SwitchableDateEntryContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangePickerContent has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method DateRangePickerContent has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method VerticalMonthsList has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method VerticalMonthsList has parameter &apos;onDisplayedMonthChange&apos; with type Function1&lt;? super Long, Unit>."
        errorLine1="    onDisplayedMonthChange: (monthInMillis: Long) -> Unit,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;onDateSelectionChange&apos; with type Function1&lt;? super Long, ? extends Unit>."
        errorLine1="                    val onDateSelectionChange = { dateInMillis: Long ->"
        errorLine2="                    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method updateDateSelection has parameter &apos;onDatesSelectionChange&apos; with type Function2&lt;? super Long, ? super Long, Unit>."
        errorLine1="    onDatesSelectionChange: (startDateMillis: Long?, endDateMillis: Long?) -> Unit"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DateRangePicker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method awaitHorizontalPointerSlopOrCancellation has parameter &apos;onPointerSlopReached&apos; with type Function2&lt;? super PointerInputChange, ? super Float, Unit>."
        errorLine1="    onPointerSlopReached: (change: PointerInputChange, overSlop: Float) -> Unit"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/DragGestureDetectorCopy.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;settleToDismiss&apos; with type Function1&lt;? super Float, ? extends Unit>."
        errorLine1="    val settleToDismiss: (velocity: Float) -> Unit = {"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/material3/ModalBottomSheet.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Scrim has parameter &apos;fraction&apos; with type Function0&lt;Float>."
        errorLine1="    fraction: () -> Float,"
        errorLine2="              ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/NavigationDrawer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method OutlinedTextFieldLayout has parameter &apos;onLabelMeasured&apos; with type Function1&lt;? super Size, Unit>."
        errorLine1="    onLabelMeasured: (Size) -> Unit,"
        errorLine2="                     ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor OutlinedTextFieldMeasurePolicy has parameter &apos;onLabelMeasured&apos; with type Function1&lt;? super Size, Unit>."
        errorLine1="    private val onLabelMeasured: (Size) -> Unit,"
        errorLine2="                                 ~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicWidth has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicHeight has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateVerticalPosition&apos; with type Function1&lt;? super Placeable, ? extends Integer>."
        errorLine1="    // Single line text fields have text components centered vertically."
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/OutlinedTextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method ConsumeSwipeWithinBottomSheetBoundsNestedScrollConnection has parameter &apos;onFling&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onFling: (velocity: Float) -> Unit"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SheetDefaults.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Slider has parameter &apos;onValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onValueChange: (Float) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Slider has parameter &apos;onValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    onValueChange: (Float) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method RangeSlider has parameter &apos;onValueChange&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    onValueChange: (FloatRange) -> Unit,"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;postPointerSlop&apos; with type Function2&lt;? super PointerInputChange, ? super Float, ? extends Unit>."
        errorLine1="    val postPointerSlop = { pointerInput: PointerInputChange, offset: Float ->"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor SliderDraggableState has parameter &apos;onDelta&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    val onDelta: (Float) -> Unit"
        errorLine2="                 ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;Float, Unit> of &apos;getOnDelta&apos;."
        errorLine1="    val onDelta: (Float) -> Unit"
        errorLine2="                 ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor SliderState has parameter &apos;initialOnValueChange&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    initialOnValueChange: ((Float) -> Unit)? = null,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setOnValueChange$lint_module has parameter &apos;&lt;set-?>&apos; with type Function1&lt;? super Float, Unit>."
        errorLine1="    /**"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;Float, Unit> of &apos;getOnValueChange$lint_module&apos;."
        errorLine1="    internal var onValueChange: (Float) -> Unit = {"
        errorLine2="                                ~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function3&lt;PressGestureScope, Offset, Continuation&lt;? super Unit>, Object> of &apos;getPress$lint_module&apos;."
        errorLine1="    internal val press: suspend PressGestureScope.(Offset) -> Unit = { pos ->"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor RangeSliderState has parameter &apos;initialOnValueChange&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    initialOnValueChange: ((FloatRange) -> Unit)? = null,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setOnValueChange$lint_module has parameter &apos;&lt;set-?>&apos; with type Function1&lt;? super FloatRange, Unit>."
        errorLine1="    internal var onValueChange: (FloatRange) -> Unit = {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;FloatRange, Unit> of &apos;getOnValueChange$lint_module&apos;."
        errorLine1="    internal var onValueChange: (FloatRange) -> Unit = {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;Boolean, Float, Unit> of &apos;getOnDrag$lint_module&apos;."
        errorLine1="    internal val onDrag: (Boolean, Float) -> Unit = { isStart, offset ->"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;isValidDistance&apos; with type Function1&lt;? super Float, ? extends Boolean>."
        errorLine1="        fun Float.isValidDistance(): Boolean {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateSnappingOffsetBounds&apos; with type Function0&lt;? extends FloatRange>."
        errorLine1="        fun calculateSnappingOffsetBounds(): FloatRange {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;consumeDelta&apos; with type Function2&lt;? super AnimationScope&lt;Float, AnimationVector1D>, ? super Float, ? extends Unit>."
        errorLine1="        fun AnimationScope&lt;Float, AnimationVector1D>.consumeDelta(delta: Float) {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/SnapFlingBehavior.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setThresholds$lint_module has parameter &apos;&lt;set-?>&apos; with type Function2&lt;? super Float, ? super Float, Float>."
        errorLine1="    internal var thresholds: (Float, Float) -> Float by mutableStateOf({ _, _ -> 0f })"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;Float, Float, Float> of &apos;getThresholds$lint_module&apos;."
        errorLine1="    internal var thresholds: (Float, Float) -> Float by mutableStateOf({ _, _ -> 0f })"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method computeTarget has parameter &apos;thresholds&apos; with type Function2&lt;? super Float, ? super Float, Float>."
        errorLine1="    thresholds: (Float, Float) -> Float,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;valueToOffset&apos; with type Function1&lt;? super Boolean, ? extends Float>."
        errorLine1="    val valueToOffset = remember&lt;(Boolean) -> Float>(minBound, maxBound) {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/Switch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicWidth has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intrinsicHeight has parameter &apos;intrinsicMeasurer&apos; with type Function2&lt;? super IntrinsicMeasurable, ? super Integer, Integer>."
        errorLine1="        intrinsicMeasurer: (IntrinsicMeasurable, Int) -> Int"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;calculateVerticalPosition&apos; with type Function1&lt;? super Placeable, ? extends Integer>."
        errorLine1="    // Single line text field without label places its text components centered vertically."
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextField.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;labelColor&apos; with type Function1&lt;? super InputPhase, ? extends Color>."
        errorLine1="    val labelColor: @Composable (InputPhase) -> Color = {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Transition has parameter &apos;contentColor&apos; with type Function1&lt;? super InputPhase, Color>."
        errorLine1="        contentColor: @Composable (InputPhase) -> Color,"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method Transition has parameter &apos;content&apos; with type Function5&lt;? super Float, ? super Color, ? super Color, ? super Float, ? super Float, Unit>."
        errorLine1="        content: @Composable ("
        errorLine2="                 ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material3/TextFieldImpl.kt"/>
    </issue>

</issues>
