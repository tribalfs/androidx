/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.AndroidXUiPlugin
import androidx.build.LibraryGroups
import androidx.build.LibraryVersions
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static androidx.build.dependencies.DependenciesKt.*

plugins {
    id("AndroidXPlugin")
    id("AndroidXUiPlugin")
    id("com.android.library")
}

AndroidXUiPlugin.applyAndConfigureKotlinPlugin(project)

if(!AndroidXUiPlugin.isMultiplatformEnabled(project)) {
    dependencies {
        /*
         * When updating dependencies, make sure to make the an an analogous update in the
         * corresponding block below
         */

        api(KOTLIN_COROUTINES_CORE)
        api "androidx.annotation:annotation:1.1.0"

        implementation(KOTLIN_STDLIB_COMMON)
        implementation(KOTLIN_STDLIB)
        implementation("androidx.core:core-ktx:1.1.0")
        implementation(KOTLIN_COROUTINES_ANDROID)

        androidTestImplementation(ANDROIDX_TEST_RULES)
        androidTestImplementation(ANDROIDX_TEST_RUNNER)
        androidTestImplementation(ANDROIDX_TEST_EXT_KTX)
        androidTestImplementation(ANDROIDX_TEST_UIAUTOMATOR)
        androidTestImplementation(JUNIT)

        testImplementation(KOTLIN_TEST_JUNIT)
        testImplementation(KOTLIN_COROUTINES_TEST)
    }
}

if(AndroidXUiPlugin.isMultiplatformEnabled(project)) {
    kotlin {
        android()
        jvm("desktop")

        /*
         * When updating dependencies, make sure to make the an an analogous update in the
         * corresponding block above
         */
        sourceSets {
            commonMain.dependencies {
                implementation(KOTLIN_STDLIB_COMMON)
                api(KOTLIN_COROUTINES_CORE)
            }
            jvmMain.dependencies {
                implementation(KOTLIN_STDLIB)
                api(KOTLIN_COROUTINES_CORE)
            }
            androidMain {
                dependencies {
                    api "androidx.annotation:annotation:1.1.0"
                    implementation("androidx.core:core-ktx:1.1.0")
                    implementation(KOTLIN_COROUTINES_ANDROID)
                }
                dependsOn jvmMain
            }

            commonTest.dependencies {
                implementation kotlin("test-junit")
                implementation(KOTLIN_COROUTINES_TEST)
            }
            androidTest.dependencies {
                implementation(ANDROIDX_TEST_RULES)
                implementation(ANDROIDX_TEST_RUNNER)
                implementation(JUNIT)
            }

            androidAndroidTest.dependencies {
                implementation(ANDROIDX_TEST_RULES)
                implementation(ANDROIDX_TEST_RUNNER)
                implementation(ANDROIDX_TEST_EXT_KTX)
                implementation(ANDROIDX_TEST_UIAUTOMATOR)
                implementation(JUNIT)
            }

            desktopMain {
                dependsOn jvmMain
            }
        }
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled = false
        }
        release {
            testCoverageEnabled = false
        }
    }
}

androidx {
    name = "Compose Dispatch"
    publish = Publish.SNAPSHOT_AND_RELEASE
    mavenGroup = LibraryGroups.Compose.RUNTIME
    inceptionYear = "2020"
    description = "Platform scheduling and event dispatch utilities used by Compose"
    legacyDisableKotlinStrictApiMode = true
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += [
                "-Xuse-experimental=kotlin.Experimental"
        ]
        useIR = true
    }
}
