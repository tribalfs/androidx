<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-alpha02" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-alpha02)" variant="all" version="8.3.0-alpha02">

    <issue
        id="BanSuppressTag"
        message="@suppress is not allowed in documentation"
        errorLine1="fun simulateHotReload(context: Any) = HotReloader.simulateHotReload(context)"
        errorLine2="    ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composition.kt"/>
    </issue>

    <issue
        id="BanSuppressTag"
        message="@suppress is not allowed in documentation"
        errorLine1="fun invalidateGroupsWithKey(key: Int) = HotReloader.invalidateGroupsWithKey(key)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composition.kt"/>
    </issue>

    <issue
        id="BanSuppressTag"
        message="@suppress is not allowed in documentation"
        errorLine1="fun currentCompositionErrors(): List&lt;Pair&lt;Exception, Boolean>> ="
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composition.kt"/>
    </issue>

    <issue
        id="BanSuppressTag"
        message="@suppress is not allowed in documentation"
        errorLine1="fun clearCompositionErrors() = HotReloader.clearErrors()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composition.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="    @InternalComposeApi"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="@InternalComposeApi"
        errorLine2="~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/internal/LiveLiteral.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable useDefault with type List&lt;? extends Integer>: replace with IntList"
        errorLine1="            val useDefault ="
        errorLine2="            ^">
        <location
            file="src/jvmMain/kotlin/androidx/compose/runtime/reflect/ComposableMethod.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field groupInfos with type HashMap&lt;Integer, GroupInfo>: replace with IntObjectMap"
        errorLine1="    private val groupInfos = run {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable result with type HashMap&lt;Integer, GroupInfo>: replace with IntObjectMap"
        errorLine1="        val result = hashMapOf&lt;Int, GroupInfo>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field nodeCountVirtualOverrides with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="    private var nodeCountVirtualOverrides: HashMap&lt;Int, Int>? = null"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable var6316285d with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="                val virtualCounts = nodeCountVirtualOverrides ?: run {"
        errorLine2="                                    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable virtualCounts with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="                val virtualCounts = nodeCountVirtualOverrides ?: run {"
        errorLine2="                ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable newCounts with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="                    val newCounts = HashMap&lt;Int, Int>()"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field intParams with type List&lt;IntParameter>: replace with IntList"
        errorLine1="        val intParams = List(ints) { index -> IntParameter(index) }"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/changelist/Operation.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;IntParameter> of getIntParams: replace with IntList"
        errorLine1="        val intParams = List(ints) { index -> IntParameter(index) }"
        errorLine2="            ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/changelist/Operation.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field objParams with type List&lt;ObjectParameter&lt;Object>>: replace with IntList"
        errorLine1="        val objParams = List(objects) { index -> ObjectParameter&lt;Any?>(index) }"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/changelist/Operation.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;ObjectParameter&lt;Object>> of getObjParams: replace with IntList"
        errorLine1="        val objParams = List(objects) { index -> ObjectParameter&lt;Any?>(index) }"
        errorLine2="            ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/changelist/Operation.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of keys: replace with IntList"
        errorLine1="    private fun keys() = groups.keys(groupsSize * Group_Fields_Size)"
        errorLine2="                ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of nodes: replace with IntList"
        errorLine1="    private fun nodes() = groups.nodeCounts(groupsSize * Group_Fields_Size)"
        errorLine2="                ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of parentIndexes: replace with IntList"
        errorLine1="    private fun parentIndexes() = groups.parentAnchors(groupsSize * Group_Fields_Size)"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of dataIndexes: replace with IntList"
        errorLine1="    private fun dataIndexes() = groups.dataAnchors(groupsSize * Group_Fields_Size)"
        errorLine2="                ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of groupSizes: replace with IntList"
        errorLine1="    private fun groupSizes() = groups.groupSizes(groupsSize * Group_Fields_Size)"
        errorLine2="                ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of dataIndexes: replace with IntList"
        errorLine1="    private fun IntArray.dataIndexes() = groups.dataAnchors().let {"
        errorLine2="                         ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of keys: replace with IntList"
        errorLine1="    private fun keys() = groups.keys().fastFilterIndexed { index, _ ->"
        errorLine2="                ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of keys: replace with IntList"
        errorLine1="private fun IntArray.keys(len: Int = size) ="
        errorLine2="                     ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of nodeCounts: replace with IntList"
        errorLine1="private fun IntArray.nodeCounts(len: Int = size) ="
        errorLine2="                     ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of parentAnchors: replace with IntList"
        errorLine1="private fun IntArray.parentAnchors(len: Int = size) ="
        errorLine2="                     ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of slice: replace with IntList"
        errorLine1="private fun IntArray.slice(indices: Iterable&lt;Int>): List&lt;Int> {"
        errorLine2="                                                    ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable list with type List&lt;Integer>: replace with IntList"
        errorLine1="    val list = mutableListOf&lt;Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of groupSizes: replace with IntList"
        errorLine1="private fun IntArray.groupSizes(len: Int = size) ="
        errorLine2="                     ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Integer> of dataAnchors: replace with IntList"
        errorLine1="private fun IntArray.dataAnchors(len: Int = size) ="
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor PrioritySet has parameter list with type List&lt;Integer>: replace with IntList"
        errorLine1="internal class PrioritySet(private val list: MutableList&lt;Int> = mutableListOf()) {"
        errorLine2="                                             ~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field list with type List&lt;Integer>: replace with IntList"
        errorLine1="internal class PrioritySet(private val list: MutableList&lt;Int> = mutableListOf()) {"
        errorLine2="                                             ~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable newBelowBound with type List&lt;Integer>: replace with IntList"
        errorLine1="                var newBelowBound: MutableList&lt;Int>? = null"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/snapshots/SnapshotIdSet.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type ImmutableList&lt;Character> of toImmutableList: replace with IntList"
        errorLine1="internal fun CharSequence.toImmutableList(): ImmutableList&lt;Char> = toPersistentList()"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/extensions.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type PersistentList&lt;Character> of toPersistentList: replace with IntList"
        errorLine1="internal fun CharSequence.toPersistentList(): PersistentList&lt;Char> ="
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/extensions.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type PersistentSet&lt;Character> of toImmutableSet: replace with IntSet"
        errorLine1="internal fun CharSequence.toImmutableSet(): PersistentSet&lt;Char> = toPersistentSet()"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/extensions.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type PersistentSet&lt;Character> of toPersistentSet: replace with IntSet"
        errorLine1="internal fun CharSequence.toPersistentSet(): PersistentSet&lt;Char> ="
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/extensions.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type PersistentSet&lt;Character> of toPersistentHashSet: replace with IntSet"
        errorLine1="internal fun CharSequence.toPersistentHashSet(): PersistentSet&lt;Char> ="
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/extensions.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;realFn&apos; with type Function2&lt;? super Composer, ? super Integer, ? extends Unit>."
        errorLine1="    @Suppress(&quot;UNCHECKED_CAST&quot;)"
        errorLine2="    ^">
        <location
            file="src/jvmMain/kotlin/androidx/compose/runtime/ActualJvm.jvm.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;realFn&apos; with type Function2&lt;? super Composer, ? super Integer, ? extends T>."
        errorLine1="    @Suppress(&quot;UNCHECKED_CAST&quot;)"
        errorLine2="    ^">
        <location
            file="src/jvmMain/kotlin/androidx/compose/runtime/ActualJvm.jvm.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor FrameAwaiter has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="    private class FrameAwaiter&lt;R>(val onFrame: (Long) -> R, val continuation: Continuation&lt;R>) {"
        errorLine2="                                               ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/BroadcastFrameClock.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;Long, R> of &apos;getOnFrame&apos;."
        errorLine1="    private class FrameAwaiter&lt;R>(val onFrame: (Long) -> R, val continuation: Continuation&lt;R>) {"
        errorLine2="                                               ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/BroadcastFrameClock.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method updateScope has parameter &apos;block&apos; with type Function2&lt;? super Composer, ? super Integer, Unit>."
        errorLine1="    fun updateScope(block: (Composer, Int) -> Unit)"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;reportGroup&apos; with type Function3&lt;? super Integer, ? super Boolean, ? super Integer, ? extends Integer>."
        errorLine1="        fun reportGroup(group: Int, needsNodeDelete: Boolean, nodeIndex: Int): Int {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method set has parameter &apos;block&apos; with type Function2&lt;? super T, ? super Integer, Unit>."
        errorLine1="        noinline block: T.(value: Int) -> Unit"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method update has parameter &apos;block&apos; with type Function2&lt;? super T, ? super Integer, Unit>."
        errorLine1="        noinline block: T.(value: Int) -> Unit"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;collectFromGroup&apos; with type Function1&lt;? super Integer, ? extends Unit>."
        errorLine1="        fun collectFromGroup(group: Int) {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/Composer.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method withFrameNanos has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="    suspend fun &lt;R> withFrameNanos(onFrame: (frameTimeNanos: Long) -> R): R"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/MonotonicFrameClock.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method withFrameNanos has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="suspend fun &lt;R> withFrameNanos(onFrame: (frameTimeNanos: Long) -> R): R ="
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/MonotonicFrameClock.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method withFrameMillis has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="suspend fun &lt;R> withFrameMillis(onFrame: (frameTimeMillis: Long) -> R): R ="
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/MonotonicFrameClock.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method MutableVector has parameter &apos;init&apos; with type Function1&lt;? super Integer, ? extends T>."
        errorLine1="inline fun &lt;reified T> MutableVector(size: Int, noinline init: (Int) -> T): MutableVector&lt;T> {"
        errorLine2="                                                               ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/collection/MutableVector.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;validateGroup&apos; with type Function2&lt;? super Integer, ? super Integer, ? extends Integer>."
        errorLine1="        fun validateGroup(parent: Int, parentEnd: Int): Int {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;dataIndex&apos; with type Function1&lt;? super Integer, ? extends Integer>."
        errorLine1="        fun dataIndex(index: Int) ="
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;isStarted&apos; with type Function1&lt;? super Integer, ? extends Boolean>."
        errorLine1="        fun isStarted(index: Int): Boolean ="
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/SlotTable.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method accept$lint_module has parameter &apos;visitor&apos; with type Function5&lt;? super TrieNode&lt;K, V>, ? super Integer, ? super Integer, ? super Integer, ? super Integer, Unit>."
        errorLine1="    internal fun accept(visitor: (node: TrieNode&lt;K, V>, shift: Int, hash: Int, dataMap: Int, nodeMap: Int) -> Unit) {"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/implementations/immutableMap/TrieNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method accept has parameter &apos;visitor&apos; with type Function5&lt;? super TrieNode&lt;K, V>, ? super Integer, ? super Integer, ? super Integer, ? super Integer, Unit>."
        errorLine1="            visitor: (node: TrieNode&lt;K, V>, shift: Int, hash: Int, dataMap: Int, nodeMap: Int) -> Unit,"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/runtime/external/kotlinx/collections/immutable/implementations/immutableMap/TrieNode.kt"/>
    </issue>

</issues>
