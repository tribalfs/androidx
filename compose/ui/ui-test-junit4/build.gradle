/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.AndroidXUiPlugin
import androidx.build.LibraryGroups
import androidx.build.Publish

import static androidx.build.dependencies.DependenciesKt.*

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("AndroidXUiPlugin")
}

AndroidXUiPlugin.applyAndConfigureKotlinPlugin(project)

dependencies {
    kotlinPlugin(project(":compose:compiler:compiler"))

    if(!AndroidXUiPlugin.isMultiplatformEnabled(project)) {
        api(project(":compose:ui:ui-test"))
        api("androidx.activity:activity:1.2.0")
        api(ANDROIDX_TEST_EXT_JUNIT)
        api(JUNIT)
        api(KOTLIN_STDLIB)
        api(KOTLIN_STDLIB_COMMON)

        implementation(project(":compose:animation:animation-core"))
        implementation(project(":compose:runtime:runtime-saveable"))
        implementation("androidx.annotation:annotation:1.1.0")
        implementation("androidx.lifecycle:lifecycle-common:2.3.0")
        implementation("androidx.lifecycle:lifecycle-runtime:2.3.0")
        implementation(ANDROIDX_TEST_CORE)
        implementation(ANDROIDX_TEST_MONITOR)
        implementation(ESPRESSO_CORE)
        implementation(ESPRESSO_IDLING_RESOURCE)
        implementation(KOTLIN_COROUTINES_CORE)
        implementation(KOTLIN_COROUTINES_TEST)

        androidTestImplementation(project(":compose:test-utils"))
        androidTestImplementation(project(":compose:material:material"))
        androidTestImplementation(ANDROIDX_TEST_RULES)
        androidTestImplementation(ANDROIDX_TEST_RUNNER)
        androidTestImplementation(TRUTH)
        androidTestImplementation(MOCKITO_CORE, libs.exclude_bytebuddy) // DexMaker has it"s own MockMaker
        androidTestImplementation(DEXMAKER_MOCKITO, libs.exclude_bytebuddy) // DexMaker has it"s own MockMaker
        androidTestImplementation(MOCKITO_KOTLIN, {
            exclude group: "org.mockito" // to keep control on the mockito version
        })
    }
}


if(AndroidXUiPlugin.isMultiplatformEnabled(project)) {
    kotlin {
        android()
        jvm("desktop")

        sourceSets {
            commonMain.dependencies {
                implementation(project(":compose:ui:ui-text"))
                implementation(KOTLIN_STDLIB)
            }

            jvmMain.dependencies {
                api(project(":compose:ui:ui-test"))
                api(JUNIT)
                api(KOTLIN_STDLIB)
                api(KOTLIN_STDLIB_COMMON)

                implementation("androidx.annotation:annotation:1.1.0")
                implementation(KOTLIN_COROUTINES_CORE)
            }

            androidMain.dependencies {
                api("androidx.activity:activity:1.2.0")
                api(ANDROIDX_TEST_EXT_JUNIT)

                implementation(project(":compose:animation:animation-core"))
                implementation(project(":compose:runtime:runtime-saveable"))
                implementation("androidx.lifecycle:lifecycle-common:2.3.0")
                implementation("androidx.lifecycle:lifecycle-runtime:2.3.0")
                implementation(ANDROIDX_TEST_CORE)
                implementation(ANDROIDX_TEST_MONITOR)
                implementation(ESPRESSO_CORE)
                implementation(ESPRESSO_IDLING_RESOURCE)
                implementation(KOTLIN_COROUTINES_TEST)
            }

            androidAndroidTest.dependencies {
                implementation(project(":compose:test-utils"))
                implementation(project(":compose:material:material"))
                implementation(ANDROIDX_TEST_RULES)
                implementation(ANDROIDX_TEST_RUNNER)
                implementation(TRUTH)
                implementation(MOCKITO_CORE, libs.exclude_bytebuddy) // DexMaker has it"s own MockMaker
                implementation(DEXMAKER_MOCKITO, libs.exclude_bytebuddy) // DexMaker has it"s own MockMaker
                implementation(MOCKITO_KOTLIN, {
                    exclude group: "org.mockito" // to keep control on the mockito version
                })
            }

            desktopMain.dependencies {
                implementation(TRUTH)
                implementation(SKIKO)
            }

            androidMain.dependsOn(jvmMain)
            desktopMain.dependsOn(jvmMain)
            jvmMain.dependsOn(commonMain)
        }
    }
}

androidx {
    name = "Compose Testing for JUnit4"
    publish = Publish.SNAPSHOT_AND_RELEASE
    mavenGroup = LibraryGroups.Compose.UI
    inceptionYear = "2020"
    description = "Compose testing integration with JUnit4"
    legacyDisableKotlinStrictApiMode = true
}
