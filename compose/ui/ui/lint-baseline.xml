<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-alpha02" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-alpha02)" variant="all" version="8.3.0-alpha02">

    <issue
        id="BanHideTag"
        message="@hide is not allowed in documentation"
        errorLine1="    fun findViewByAccessibilityIdTraversal(accessibilityId: Int): View? {"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeView.android.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="                Thread.sleep(sleepTime)"
        errorLine2="                       ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/ui/input/pointer/AndroidPointerInputTest.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="    @InternalComposeUiApi"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/ComposeView.android.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="    @ExperimentalComposeUiApi"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="    @get:ExperimentalComposeUiApi"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/platform/WindowInfo.kt"/>
    </issue>

    <issue
        id="ExperimentalPropertyAnnotation"
        message="This property does not have all required annotations to correctly mark it as experimental."
        errorLine1="    @get:ExperimentalComposeUiApi"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/platform/WindowInfo.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field pendingHorizontalScrollEvents with type HashMap&lt;Integer, ScrollAxisRange>: replace with IntObjectMap"
        errorLine1="    private val pendingHorizontalScrollEvents = HashMap&lt;Int, ScrollAxisRange>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field pendingVerticalScrollEvents with type HashMap&lt;Integer, ScrollAxisRange>: replace with IntObjectMap"
        errorLine1="    private val pendingVerticalScrollEvents = HashMap&lt;Int, ScrollAxisRange>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field bufferedContentCaptureAppearedNodes with type ArrayMap&lt;Integer, ViewStructureCompat>: replace with IntObjectMap"
        errorLine1="    internal val bufferedContentCaptureAppearedNodes = ArrayMap&lt;Int, ViewStructureCompat>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type ArrayMap&lt;Integer, ViewStructureCompat> of getBufferedContentCaptureAppearedNodes$lint_module: replace with IntObjectMap"
        errorLine1="    internal val bufferedContentCaptureAppearedNodes = ArrayMap&lt;Int, ViewStructureCompat>()"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field bufferedContentCaptureDisappearedNodes with type ArraySet&lt;Integer>: replace with IntSet"
        errorLine1="    internal val bufferedContentCaptureDisappearedNodes = ArraySet&lt;Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type ArraySet&lt;Integer> of getBufferedContentCaptureDisappearedNodes$lint_module: replace with IntSet"
        errorLine1="    internal val bufferedContentCaptureDisappearedNodes = ArraySet&lt;Int>()"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setCurrentSemanticsNodes$lint_module has parameter &lt;set-?> with type Map&lt;Integer, SemanticsNodeWithAdjustedBounds>: replace with IntObjectMap"
        errorLine1="    /**"
        errorLine2="    ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field currentSemanticsNodes with type Map&lt;Integer, SemanticsNodeWithAdjustedBounds>: replace with IntObjectMap"
        errorLine1="    internal var currentSemanticsNodes: Map&lt;Int, SemanticsNodeWithAdjustedBounds> = mapOf()"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, SemanticsNodeWithAdjustedBounds> of getCurrentSemanticsNodes$lint_module: replace with IntObjectMap"
        errorLine1="    internal var currentSemanticsNodes: Map&lt;Int, SemanticsNodeWithAdjustedBounds> = mapOf()"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field paneDisplayed with type ArraySet&lt;Integer>: replace with IntSet"
        errorLine1="    private var paneDisplayed = ArraySet&lt;Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field idToBeforeMap with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="    internal var idToBeforeMap = HashMap&lt;Int, Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setIdToBeforeMap$lint_module has parameter &lt;set-?> with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="    internal var idToBeforeMap = HashMap&lt;Int, Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type HashMap&lt;Integer, Integer> of getIdToBeforeMap$lint_module: replace with IntIntMap"
        errorLine1="    internal var idToBeforeMap = HashMap&lt;Int, Int>()"
        errorLine2="                 ~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field idToAfterMap with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="    internal var idToAfterMap = HashMap&lt;Int, Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setIdToAfterMap$lint_module has parameter &lt;set-?> with type HashMap&lt;Integer, Integer>: replace with IntIntMap"
        errorLine1="    internal var idToAfterMap = HashMap&lt;Int, Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type HashMap&lt;Integer, Integer> of getIdToAfterMap$lint_module: replace with IntIntMap"
        errorLine1="    internal var idToAfterMap = HashMap&lt;Int, Int>()"
        errorLine2="                 ~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor SemanticsNodeCopy has parameter currentSemanticsNodes with type Map&lt;Integer, SemanticsNodeWithAdjustedBounds>: replace with IntObjectMap"
        errorLine1="        currentSemanticsNodes: Map&lt;Int, SemanticsNodeWithAdjustedBounds>"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field children with type Set&lt;Integer>: replace with IntSet"
        errorLine1="        val children: MutableSet&lt;Int> = mutableSetOf()"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Set&lt;Integer> of getChildren: replace with IntSet"
        errorLine1="        val children: MutableSet&lt;Int> = mutableSetOf()"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setPreviousSemanticsNodes$lint_module has parameter &lt;set-?> with type Map&lt;Integer, SemanticsNodeCopy>: replace with IntObjectMap"
        errorLine1="    // previousSemanticsNodes holds the previous pruned semantics tree so that we can compare the"
        errorLine2="    ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field previousSemanticsNodes with type Map&lt;Integer, SemanticsNodeCopy>: replace with IntObjectMap"
        errorLine1="    internal var previousSemanticsNodes: MutableMap&lt;Int, SemanticsNodeCopy> = mutableMapOf()"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, SemanticsNodeCopy> of getPreviousSemanticsNodes$lint_module: replace with IntObjectMap"
        errorLine1="    internal var previousSemanticsNodes: MutableMap&lt;Int, SemanticsNodeCopy> = mutableMapOf()"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method sortByGeometryGroupings has parameter containerChildrenMapping with type Map&lt;Integer, List&lt;SemanticsNode>>: replace with IntObjectMap"
        errorLine1="        containerChildrenMapping: MutableMap&lt;Int, MutableList&lt;SemanticsNode>> = mutableMapOf()"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method geometryDepthFirstSearch has parameter containerMapToChildren with type Map&lt;Integer, List&lt;SemanticsNode>>: replace with IntObjectMap"
        errorLine1="        containerMapToChildren: MutableMap&lt;Int, MutableList&lt;SemanticsNode>>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable containerMapToChildren with type Map&lt;Integer, List&lt;SemanticsNode>>: replace with IntObjectMap"
        errorLine1="        val containerMapToChildren = mutableMapOf&lt;Int, MutableList&lt;SemanticsNode>>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable currentLabelToActionId with type Map&lt;CharSequence, Integer>: replace with ObjectIntMap"
        errorLine1="                val currentLabelToActionId = mutableMapOf&lt;CharSequence, Int>()"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldLabelToActionId with type Map&lt;CharSequence, ? extends Integer>: replace with ObjectIntMap"
        errorLine1="                    val oldLabelToActionId = labelToActionId[virtualViewId]"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable availableIds with type List&lt;Integer>: replace with IntList"
        errorLine1="                    val availableIds = AccessibilityActionsResourceIds.toMutableList()"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable subtreeChangedSemanticsNodesIds with type ArraySet&lt;Integer>: replace with IntSet"
        errorLine1="            val subtreeChangedSemanticsNodesIds = ArraySet&lt;Int>()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method sendSubtreeChangeAccessibilityEvents has parameter subtreeChangedSemanticsNodesIds with type ArraySet&lt;Integer>: replace with IntSet"
        errorLine1="        subtreeChangedSemanticsNodesIds: ArraySet&lt;Int>"
        errorLine2="                                         ~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable toRemove with type ArraySet&lt;Integer>: replace with IntSet"
        errorLine1="        val toRemove = ArraySet&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method sendSemanticsPropertyChangeEvents$lint_module has parameter newSemanticsNodes with type Map&lt;Integer, SemanticsNodeWithAdjustedBounds>: replace with IntObjectMap"
        errorLine1="        newSemanticsNodes: Map&lt;Int, SemanticsNodeWithAdjustedBounds>"
        errorLine2="                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable newChildren with type Set&lt;Integer>: replace with IntSet"
        errorLine1="        val newChildren: MutableSet&lt;Int> = mutableSetOf()"
        errorLine2="                         ~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, SemanticsNodeWithAdjustedBounds> of getAllUncoveredSemanticsNodesToMap: replace with IntObjectMap"
        errorLine1="    Map&lt;Int, SemanticsNodeWithAdjustedBounds> {"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable nodes with type Map&lt;Integer, SemanticsNodeWithAdjustedBounds>: replace with IntObjectMap"
        errorLine1="    val nodes = mutableMapOf&lt;Int, SemanticsNodeWithAdjustedBounds>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field children with type Map&lt;Integer, AutofillNode>: replace with IntObjectMap"
        errorLine1="    val children: MutableMap&lt;Int, AutofillNode> = mutableMapOf()"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/autofill/AutofillTree.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, AutofillNode> of getChildren: replace with IntObjectMap"
        errorLine1="    val children: MutableMap&lt;Int, AutofillNode> = mutableMapOf()"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/autofill/AutofillTree.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable deltas with type List&lt;? extends Offset>: replace with LongList"
        errorLine1="    val deltas = items.fastZipWithNext { el1, el2 ->"
        errorLine2="    ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/accessibility/CollectionInfo.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;LayoutNode, Integer> of getMapOfOriginalDepth: replace with ObjectIntMap"
        errorLine1="    private val mapOfOriginalDepth by lazy(LazyThreadSafetyMode.NONE) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/DepthSortedSet.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;HapticFeedbackType> of values: replace with IntList"
        errorLine1="        fun values(): List&lt;HapticFeedbackType> = listOf(LongPress, TextHandleMove)"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/hapticfeedback/HapticFeedbackType.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field alignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="            override val alignmentLines = alignmentLines"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/IntermediateLayoutModifierNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field alignmentLineMap with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    private val alignmentLineMap: MutableMap&lt;AlignmentLine, Int> = hashMapOf()"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getLastCalculation: replace with ObjectIntMap"
        errorLine1="    fun getLastCalculation(): Map&lt;AlignmentLine, Int> = alignmentLineMap"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getAlignmentLinesMap: replace with ObjectIntMap"
        errorLine1="    protected abstract val NodeCoordinator.alignmentLinesMap: Map&lt;AlignmentLine, Int>"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeAlignmentLines.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of calculateAlignmentLines: replace with ObjectIntMap"
        errorLine1="    fun calculateAlignmentLines(): Map&lt;AlignmentLine, Int>"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutNodeLayoutDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field oldAlignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    private var oldAlignmentLines: MutableMap&lt;AlignmentLine, Int>? = null"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="                    val oldLines = oldAlignmentLines"
        errorLine2="                    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable var4a364b23 with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="                    val oldLines = oldAlignmentLines"
        errorLine2="                                   ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field cachedAlignmentLinesMap with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    protected val cachedAlignmentLinesMap = mutableMapOf&lt;AlignmentLine, Int>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getCachedAlignmentLinesMap: replace with ObjectIntMap"
        errorLine1="    protected val cachedAlignmentLinesMap = mutableMapOf&lt;AlignmentLine, Int>()"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LookaheadDelegate.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;AlignmentLine, Integer> of getAlignmentLines: replace with ObjectIntMap"
        errorLine1="    val alignmentLines: Map&lt;AlignmentLine, Int>"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/MeasureResult.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method layout has parameter alignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="        alignmentLines: Map&lt;AlignmentLine, Int> = emptyMap(),"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/MeasureScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field alignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="        override val alignmentLines = alignmentLines"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/MeasureScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="                    val oldLines = oldAlignmentLines"
        errorLine2="                    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/NodeCoordinator.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable var43bc1f85 with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="                    val oldLines = oldAlignmentLines"
        errorLine2="                                   ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/NodeCoordinator.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field oldAlignmentLines with type Map&lt;AlignmentLine, Integer>: replace with ObjectIntMap"
        errorLine1="    private var oldAlignmentLines: MutableMap&lt;AlignmentLine, Int>? = null"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/NodeCoordinator.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable alignmentLines with type Map&lt;AlignmentLine, ? extends Integer>: replace with ObjectIntMap"
        errorLine1="                val alignmentLines = coordinator._measureResult?.alignmentLines"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/NodeCoordinator.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Integer, SemanticsNode> of getAllSemanticsNodesToMap: replace with IntObjectMap"
        errorLine1="): Map&lt;Int, SemanticsNode> {"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsOwner.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable nodes with type Map&lt;Integer, SemanticsNode>: replace with IntObjectMap"
        errorLine1="    val nodes = mutableMapOf&lt;Int, SemanticsNode>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsOwner.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor AlignmentLine has parameter &apos;merger&apos; with type Function2&lt;? super Integer, ? super Integer, Integer>."
        errorLine1="    internal val merger: (Int, Int) -> Int"
        errorLine2="                         ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/AlignmentLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;Integer, Integer, Integer> of &apos;getMerger$lint_module&apos;."
        errorLine1="    internal val merger: (Int, Int) -> Int"
        errorLine2="                         ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/AlignmentLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor VerticalAlignmentLine has parameter &apos;merger&apos; with type Function2&lt;? super Integer, ? super Integer, Integer>."
        errorLine1="class VerticalAlignmentLine(merger: (Int, Int) -> Int) : AlignmentLine(merger)"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/AlignmentLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor HorizontalAlignmentLine has parameter &apos;merger&apos; with type Function2&lt;? super Integer, ? super Integer, Integer>."
        errorLine1="class HorizontalAlignmentLine(merger: (Int, Int) -> Int) : AlignmentLine(merger)"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/AlignmentLine.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;setSelectionAction&apos; with type AccessibilityAction&lt;Function3&lt;? super Integer, ? super Integer, ? super Boolean, ? extends Boolean>>."
        errorLine1="            val setSelectionAction ="
        errorLine2="            ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;scrollAction&apos; with type AccessibilityAction&lt;Function2&lt;? super Float, ? super Float, ? extends Boolean>>."
        errorLine1="        val scrollAction = semanticsNode.unmergedConfig.getOrNull(SemanticsActions.ScrollBy)"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;setProgressAction&apos; with type AccessibilityAction&lt;Function1&lt;? super Float, ? extends Boolean>>."
        errorLine1="                    val setProgressAction ="
        errorLine2="                    ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;canScroll&apos; with type Function2&lt;? super ScrollAxisRange, ? super Float, ? extends Boolean>."
        errorLine1="                // Will the scrollable scroll when ScrollBy is invoked with the given [amount]?"
        errorLine2="                ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;scrollAction&apos; with type AccessibilityAction&lt;Function2&lt;? super Float, ? super Float, ? extends Boolean>>."
        errorLine1="                var scrollAction = scrollableAncestor?.config?.getOrNull(SemanticsActions.ScrollBy)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;scrollDelta&apos; with type Function2&lt;? super Float, ? super Float, ? extends Float>."
        errorLine1="                // Given the desired scroll value to align either side of the target with the"
        errorLine2="                ^">
        <location
            file="src/androidMain/kotlin/androidx/compose/ui/platform/AndroidComposeViewAccessibilityDelegateCompat.android.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;ComposeUiNode, Integer, Unit> of &apos;getSetCompositeKeyHash&apos;."
        errorLine1="        val SetCompositeKeyHash: ComposeUiNode.(Int) -> Unit ="
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/ComposeUiNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;factory&apos; with type Function3&lt;? super Modifier, ? super Composer, ? super Integer, ? extends Modifier>."
        errorLine1="                @Suppress(&quot;UNCHECKED_CAST&quot;)"
        errorLine2="                ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/ComposedModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;FocusDirection, FocusRequester> of &apos;getEnter&apos;."
        errorLine1="    var enter: (FocusDirection) -> FocusRequester"
        errorLine2="        ~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/FocusProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setEnter has parameter &apos;_&apos; with type Function1&lt;? super FocusDirection, FocusRequester>."
        errorLine1="        set(_) {}"
        errorLine2="            ~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/FocusProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;FocusDirection, FocusRequester> of &apos;getExit&apos;."
        errorLine1="    var exit: (FocusDirection) -> FocusRequester"
        errorLine2="        ~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/FocusProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setExit has parameter &apos;_&apos; with type Function1&lt;? super FocusDirection, FocusRequester>."
        errorLine1="        set(_) {}"
        errorLine2="            ~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/FocusProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method withInfiniteAnimationFrameNanos has parameter &apos;onFrame&apos; with type Function1&lt;? super Long, ? extends R>."
        errorLine1="internal suspend fun &lt;R> withInfiniteAnimationFrameNanos(onFrame: (frameTimeNanos: Long) -> R): R ="
        errorLine2="                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/platform/InfiniteAnimationPolicy.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor InputModeManagerImpl has parameter &apos;onRequestInputModeChange&apos; with type Function1&lt;? super InputMode, Boolean>."
        errorLine1="    private val onRequestInputModeChange: (InputMode) -> Boolean"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/input/InputModeManager.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor IntermediateLayoutModifierNode has parameter &apos;measureBlock&apos; with type Function3&lt;? super IntermediateMeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    internal var measureBlock: IntermediateMeasureScope.("
        errorLine2="                               ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/IntermediateLayoutModifierNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setMeasureBlock$lint_module has parameter &apos;&lt;set-?>&apos; with type Function3&lt;? super IntermediateMeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    internal var measureBlock: IntermediateMeasureScope.("
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/IntermediateLayoutModifierNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function3&lt;IntermediateMeasureScope, Measurable, Constraints, MeasureResult> of &apos;getMeasureBlock$lint_module&apos;."
        errorLine1="    internal var measureBlock: IntermediateMeasureScope.("
        errorLine2="                               ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/IntermediateLayoutModifierNode.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method layout has parameter &apos;measure&apos; with type Function3&lt;? super MeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    measure: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor LayoutElement has parameter &apos;measure&apos; with type Function3&lt;? super MeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    val measure: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function3&lt;MeasureScope, Measurable, Constraints, MeasureResult> of &apos;getMeasure&apos;."
        errorLine1="    val measure: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor LayoutModifierImpl has parameter &apos;measureBlock&apos; with type Function3&lt;? super MeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    var measureBlock: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setMeasureBlock has parameter &apos;&lt;set-?>&apos; with type Function3&lt;? super MeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    var measureBlock: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function3&lt;MeasureScope, Measurable, Constraints, MeasureResult> of &apos;getMeasureBlock&apos;."
        errorLine1="    var measureBlock: MeasureScope.(Measurable, Constraints) -> MeasureResult"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LayoutModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;printSubTree&apos; with type Function2&lt;? super LayoutNode, ? super Integer, ? extends Unit>."
        errorLine1="        fun printSubTree(node: LayoutNode, depth: Int) {"
        errorLine2="        ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/node/LayoutTreeConsistencyChecker.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method intermediateLayout has parameter &apos;measure&apos; with type Function3&lt;? super IntermediateMeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    measure: IntermediateMeasureScope.("
        errorLine2="             ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LookaheadScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor IntermediateLayoutElement has parameter &apos;measure&apos; with type Function3&lt;? super IntermediateMeasureScope, ? super Measurable, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    val measure: IntermediateMeasureScope.("
        errorLine2="                 ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LookaheadScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function3&lt;IntermediateMeasureScope, Measurable, Constraints, MeasureResult> of &apos;getMeasure&apos;."
        errorLine1="    val measure: IntermediateMeasureScope.("
        errorLine2="                 ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/LookaheadScope.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method onSizeChanged has parameter &apos;onSizeChanged&apos; with type Function1&lt;? super IntSize, Unit>."
        errorLine1="    onSizeChanged: (IntSize) -> Unit"
        errorLine2="                   ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/OnRemeasuredModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor OnSizeChangedModifier has parameter &apos;onSizeChanged&apos; with type Function1&lt;? super IntSize, Unit>."
        errorLine1="    val onSizeChanged: (IntSize) -> Unit,"
        errorLine2="                       ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/OnRemeasuredModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function1&lt;IntSize, Unit> of &apos;getOnSizeChanged&apos;."
        errorLine1="    val onSizeChanged: (IntSize) -> Unit,"
        errorLine2="                       ~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/OnRemeasuredModifier.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method invokeOverAllPasses has parameter &apos;$this$invokeOverAllPasses&apos; with type Function3&lt;? super PointerEvent, ? super PointerEventPass, ? super IntSize, Unit>."
        errorLine1="internal fun PointerInputHandler.invokeOverAllPasses("
        errorLine2="             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/input/pointer/PointerInputTestUtil.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method invokeOverPass has parameter &apos;$this$invokeOverPass&apos; with type Function3&lt;? super PointerEvent, ? super PointerEventPass, ? super IntSize, Unit>."
        errorLine1="internal fun PointerInputHandler.invokeOverPass("
        errorLine2="             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/input/pointer/PointerInputTestUtil.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method invokeOverPasses has parameter &apos;$this$invokeOverPasses&apos; with type Function3&lt;? super PointerEvent, ? super PointerEventPass, ? super IntSize, Unit>."
        errorLine1="internal fun PointerInputHandler.invokeOverPasses("
        errorLine2="             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/input/pointer/PointerInputTestUtil.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method invokeOverPasses has parameter &apos;$this$invokeOverPasses&apos; with type Function3&lt;? super PointerEvent, ? super PointerEventPass, ? super IntSize, Unit>."
        errorLine1="internal fun PointerInputHandler.invokeOverPasses("
        errorLine2="             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/input/pointer/PointerInputTestUtil.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type SemanticsPropertyKey&lt;Function1&lt;Object, Integer>> of &apos;getIndexForKey&apos;."
        errorLine1="    val IndexForKey = SemanticsPropertyKey&lt;(Any) -> Int>(&quot;IndexForKey&quot;)"
        errorLine2="        ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type SemanticsPropertyKey&lt;AccessibilityAction&lt;Function2&lt;Float, Float, Boolean>>> of &apos;getScrollBy&apos;."
        errorLine1="    val ScrollBy = ActionPropertyKey&lt;(x: Float, y: Float) -> Boolean>(&quot;ScrollBy&quot;)"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type SemanticsPropertyKey&lt;AccessibilityAction&lt;Function1&lt;Integer, Boolean>>> of &apos;getScrollToIndex&apos;."
        errorLine1="    val ScrollToIndex = ActionPropertyKey&lt;(Int) -> Boolean>(&quot;ScrollToIndex&quot;)"
        errorLine2="        ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type SemanticsPropertyKey&lt;AccessibilityAction&lt;Function1&lt;Float, Boolean>>> of &apos;getSetProgress&apos;."
        errorLine1="    val SetProgress = ActionPropertyKey&lt;(progress: Float) -> Boolean>(&quot;SetProgress&quot;)"
        errorLine2="        ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type SemanticsPropertyKey&lt;AccessibilityAction&lt;Function3&lt;Integer, Integer, Boolean, Boolean>>> of &apos;getSetSelection&apos;."
        errorLine1="    val SetSelection = ActionPropertyKey&lt;(Int, Int, Boolean) -> Boolean>(&quot;SetSelection&quot;)"
        errorLine2="        ~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor ScrollAxisRange has parameter &apos;value&apos; with type Function0&lt;Float>."
        errorLine1="    val value: () -> Float,"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function0&lt;Float> of &apos;getValue&apos;."
        errorLine1="    val value: () -> Float,"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in constructor ScrollAxisRange has parameter &apos;maxValue&apos; with type Function0&lt;Float>."
        errorLine1="    val maxValue: () -> Float,"
        errorLine2="                  ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function0&lt;Float> of &apos;getMaxValue&apos;."
        errorLine1="    val maxValue: () -> Float,"
        errorLine2="                  ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method indexForKey has parameter &apos;mapping&apos; with type Function1&lt;Object, Integer>."
        errorLine1="fun SemanticsPropertyReceiver.indexForKey(mapping: (Any) -> Int) {"
        errorLine2="                                                   ~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method scrollBy has parameter &apos;action&apos; with type Function2&lt;? super Float, ? super Float, Boolean>."
        errorLine1="    action: ((x: Float, y: Float) -> Boolean)?"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method scrollToIndex has parameter &apos;action&apos; with type Function1&lt;? super Integer, Boolean>."
        errorLine1="    action: (Int) -> Boolean"
        errorLine2="            ~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setProgress has parameter &apos;action&apos; with type Function1&lt;? super Float, Boolean>."
        errorLine1="fun SemanticsPropertyReceiver.setProgress(label: String? = null, action: ((Float) -> Boolean)?) {"
        errorLine2="                                                                         ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method setSelection has parameter &apos;action&apos; with type Function3&lt;? super Integer, ? super Integer, ? super Boolean, Boolean>."
        errorLine1="    action: ((startIndex: Int, endIndex: Int, relativeToOriginalText: Boolean) -> Boolean)?"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/semantics/SemanticsProperties.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SubcomposeLayout has parameter &apos;measurePolicy&apos; with type Function2&lt;? super SubcomposeMeasureScope, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    measurePolicy: SubcomposeMeasureScope.(Constraints) -> MeasureResult"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method SubcomposeLayout has parameter &apos;measurePolicy&apos; with type Function2&lt;? super SubcomposeMeasureScope, ? super Constraints, ? extends MeasureResult>."
        errorLine1="    measurePolicy: SubcomposeMeasureScope.(Constraints) -> MeasureResult"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in return type Function2&lt;LayoutNode, Function2&lt;? super SubcomposeMeasureScope, ? super Constraints, ? extends MeasureResult>, Unit> of &apos;getSetMeasurePolicy$lint_module&apos;."
        errorLine1="        LayoutNode.((SubcomposeMeasureScope.(Constraints) -> MeasureResult)) -> Unit ="
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method createMeasurePolicy has parameter &apos;block&apos; with type Function2&lt;? super SubcomposeMeasureScope, ? super Constraints, ? extends MeasureResult>."
        errorLine1="        block: SubcomposeMeasureScope.(Constraints) -> MeasureResult"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;majorAxisDistance&apos; with type Function1&lt;? super Rect, ? extends Float>."
        errorLine1="    // The distance from the edge furthest in the given direction of source to the edge nearest"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/TwoDimensionalFocusSearch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;minorAxisDistance&apos; with type Function1&lt;? super Rect, ? extends Float>."
        errorLine1="    // Find the distance on the minor axis w.r.t the direction to the nearest edge of the"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/TwoDimensionalFocusSearch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;weightedDistance&apos; with type Function1&lt;? super Rect, ? extends Long>."
        errorLine1="    // Fudge-factor opportunity: how to calculate distance given major and minor axis distances."
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/TwoDimensionalFocusSearch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;majorAxisDistance&apos; with type Function1&lt;? super Rect, ? extends Float>."
        errorLine1="    // The distance from the edge furthest in the given direction of source to the edge nearest"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/TwoDimensionalFocusSearch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in variable &apos;majorAxisDistanceToFarEdge&apos; with type Function1&lt;? super Rect, ? extends Float>."
        errorLine1="    // The distance along the major axis w.r.t the direction from the edge of source to the far"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/focus/TwoDimensionalFocusSearch.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method rememberVectorPainter has parameter &apos;content&apos; with type Function2&lt;? super Float, ? super Float, Unit>."
        errorLine1="    content: @Composable @VectorComposable (viewportWidth: Float, viewportHeight: Float) -> Unit"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/graphics/vector/VectorPainter.kt"/>
    </issue>

    <issue
        id="PrimitiveInLambda"
        message="Use a functional interface instead of lambda syntax for lambdas with primitive values in method rememberVectorPainter has parameter &apos;content&apos; with type Function2&lt;? super Float, ? super Float, Unit>."
        errorLine1="    content: @Composable @VectorComposable (viewportWidth: Float, viewportHeight: Float) -> Unit"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/ui/graphics/vector/VectorPainter.kt"/>
    </issue>

</issues>
