// Signature format: 4.0
package androidx.constraintlayout.compose {

  public interface BaselineAnchorable {
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.BaselineAnchor anchor, optional float margin, optional float goneMargin);
  }

  @androidx.compose.runtime.Immutable public final class ChainStyle {
    field public static final androidx.constraintlayout.compose.ChainStyle.Companion Companion;
  }

  public static final class ChainStyle.Companion {
    method @androidx.compose.runtime.Stable public androidx.constraintlayout.compose.ChainStyle Packed(float bias);
    method public androidx.constraintlayout.compose.ChainStyle getPacked();
    method public androidx.constraintlayout.compose.ChainStyle getSpread();
    method public androidx.constraintlayout.compose.ChainStyle getSpreadInside();
    property public final androidx.constraintlayout.compose.ChainStyle Packed;
    property public final androidx.constraintlayout.compose.ChainStyle Spread;
    property public final androidx.constraintlayout.compose.ChainStyle SpreadInside;
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker @androidx.compose.runtime.Stable public final class ConstrainScope {
    method public void centerAround(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor anchor);
    method public void centerAround(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor anchor);
    method public void centerHorizontallyTo(androidx.constraintlayout.compose.ConstrainedLayoutReference other, optional @FloatRange(from=0.0, to=1.0) float bias);
    method public void centerTo(androidx.constraintlayout.compose.ConstrainedLayoutReference other);
    method public void centerVerticallyTo(androidx.constraintlayout.compose.ConstrainedLayoutReference other, optional @FloatRange(from=0.0, to=1.0) float bias);
    method public void circular(androidx.constraintlayout.compose.ConstrainedLayoutReference other, float angle, float distance);
    method public void clearConstraints();
    method public void clearHorizontal();
    method public void clearVertical();
    method public androidx.constraintlayout.compose.VerticalAnchorable getAbsoluteLeft();
    method public androidx.constraintlayout.compose.VerticalAnchorable getAbsoluteRight();
    method public float getAlpha();
    method public androidx.constraintlayout.compose.BaselineAnchorable getBaseline();
    method public androidx.constraintlayout.compose.HorizontalAnchorable getBottom();
    method public androidx.constraintlayout.compose.VerticalAnchorable getEnd();
    method public androidx.constraintlayout.compose.Dimension getHeight();
    method public float getHorizontalChainWeight();
    method public androidx.constraintlayout.compose.ConstrainedLayoutReference getParent();
    method public float getPivotX();
    method public float getPivotY();
    method public float getRotationX();
    method public float getRotationY();
    method public float getRotationZ();
    method public float getScaleX();
    method public float getScaleY();
    method public androidx.constraintlayout.compose.VerticalAnchorable getStart();
    method public androidx.constraintlayout.compose.HorizontalAnchorable getTop();
    method public float getTranslationX();
    method public float getTranslationY();
    method public float getTranslationZ();
    method public float getVerticalChainWeight();
    method public androidx.constraintlayout.compose.Visibility getVisibility();
    method public androidx.constraintlayout.compose.Dimension getWidth();
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor start, androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor end, optional float startMargin, optional float endMargin, optional float startGoneMargin, optional float endGoneMargin, optional @FloatRange(from=0.0, to=1.0) float bias);
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor top, androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor bottom, optional float topMargin, optional float bottomMargin, optional float topGoneMargin, optional float bottomGoneMargin, optional @FloatRange(from=0.0, to=1.0) float bias);
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor start, androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor top, androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor end, androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor bottom, optional float startMargin, optional float topMargin, optional float endMargin, optional float bottomMargin, optional float startGoneMargin, optional float topGoneMargin, optional float endGoneMargin, optional float bottomGoneMargin, optional @FloatRange(from=0.0, to=1.0) float horizontalBias, optional @FloatRange(from=0.0, to=1.0) float verticalBias);
    method public void resetDimensions();
    method public void resetTransforms();
    method public void setAlpha(float);
    method public void setHeight(androidx.constraintlayout.compose.Dimension);
    method public void setHorizontalChainWeight(float);
    method public void setPivotX(float);
    method public void setPivotY(float);
    method public void setRotationX(float);
    method public void setRotationY(float);
    method public void setRotationZ(float);
    method public void setScaleX(float);
    method public void setScaleY(float);
    method public void setTranslationX(float);
    method public void setTranslationY(float);
    method public void setTranslationZ(float);
    method public void setVerticalChainWeight(float);
    method public void setVisibility(androidx.constraintlayout.compose.Visibility);
    method public void setWidth(androidx.constraintlayout.compose.Dimension);
    property public final androidx.constraintlayout.compose.VerticalAnchorable absoluteLeft;
    property public final androidx.constraintlayout.compose.VerticalAnchorable absoluteRight;
    property public final float alpha;
    property public final androidx.constraintlayout.compose.BaselineAnchorable baseline;
    property public final androidx.constraintlayout.compose.HorizontalAnchorable bottom;
    property public final androidx.constraintlayout.compose.VerticalAnchorable end;
    property public final androidx.constraintlayout.compose.Dimension height;
    property public final float horizontalChainWeight;
    property public final androidx.constraintlayout.compose.ConstrainedLayoutReference parent;
    property public final float pivotX;
    property public final float pivotY;
    property public final float rotationX;
    property public final float rotationY;
    property public final float rotationZ;
    property public final float scaleX;
    property public final float scaleY;
    property public final androidx.constraintlayout.compose.VerticalAnchorable start;
    property public final androidx.constraintlayout.compose.HorizontalAnchorable top;
    property public final float translationX;
    property public final float translationY;
    property public final float translationZ;
    property public final float verticalChainWeight;
    property public final androidx.constraintlayout.compose.Visibility visibility;
    property public final androidx.constraintlayout.compose.Dimension width;
  }

  @androidx.compose.runtime.Stable public final class ConstrainedLayoutReference extends androidx.constraintlayout.compose.LayoutReference {
    ctor public ConstrainedLayoutReference(Object id);
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getAbsoluteLeft();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getAbsoluteRight();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.BaselineAnchor getBaseline();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor getBottom();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getEnd();
    method public Object getId();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getStart();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor getTop();
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor absoluteLeft;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor absoluteRight;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.BaselineAnchor baseline;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor bottom;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor end;
    property public Object id;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor start;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor top;
  }

  public abstract class ConstraintLayoutBaseScope {
    ctor public ConstraintLayoutBaseScope();
    method public final void applyTo(androidx.constraintlayout.compose.State state);
    method public final androidx.constraintlayout.compose.HorizontalChainScope constrain(androidx.constraintlayout.compose.HorizontalChainReference ref, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.HorizontalChainScope,kotlin.Unit> constrainBlock);
    method public final androidx.constraintlayout.compose.VerticalChainScope constrain(androidx.constraintlayout.compose.VerticalChainReference ref, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.VerticalChainScope,kotlin.Unit> constrainBlock);
    method public final androidx.constraintlayout.compose.ConstrainScope constrain(androidx.constraintlayout.compose.ConstrainedLayoutReference ref, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.ConstrainScope,kotlin.Unit> constrainBlock);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createAbsoluteLeftBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createAbsoluteRightBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createBottomBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createEndBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.ConstrainedLayoutReference createFlow(androidx.constraintlayout.compose.LayoutReference![]? elements, optional boolean flowVertically, optional float verticalGap, optional float horizontalGap, optional int maxElement, optional float padding, optional androidx.constraintlayout.compose.Wrap wrapMode, optional androidx.constraintlayout.compose.VerticalAlign verticalAlign, optional androidx.constraintlayout.compose.HorizontalAlign horizontalAlign, optional float horizontalFlowBias, optional float verticalFlowBias, optional androidx.constraintlayout.compose.FlowStyle verticalStyle, optional androidx.constraintlayout.compose.FlowStyle horizontalStyle);
    method public final androidx.constraintlayout.compose.ConstrainedLayoutReference createFlow(androidx.constraintlayout.compose.LayoutReference![]? elements, optional boolean flowVertically, optional float verticalGap, optional float horizontalGap, optional int maxElement, optional float paddingHorizontal, optional float paddingVertical, optional androidx.constraintlayout.compose.Wrap wrapMode, optional androidx.constraintlayout.compose.VerticalAlign verticalAlign, optional androidx.constraintlayout.compose.HorizontalAlign horizontalAlign, optional float horizontalFlowBias, optional float verticalFlowBias, optional androidx.constraintlayout.compose.FlowStyle verticalStyle, optional androidx.constraintlayout.compose.FlowStyle horizontalStyle);
    method public final androidx.constraintlayout.compose.ConstrainedLayoutReference createFlow(androidx.constraintlayout.compose.LayoutReference![]? elements, optional boolean flowVertically, optional float verticalGap, optional float horizontalGap, optional int maxElement, optional float paddingLeft, optional float paddingTop, optional float paddingRight, optional float paddingBottom, optional androidx.constraintlayout.compose.Wrap wrapMode, optional androidx.constraintlayout.compose.VerticalAlign verticalAlign, optional androidx.constraintlayout.compose.HorizontalAlign horizontalAlign, optional float horizontalFlowBias, optional float verticalFlowBias, optional androidx.constraintlayout.compose.FlowStyle verticalStyle, optional androidx.constraintlayout.compose.FlowStyle horizontalStyle);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromAbsoluteLeft(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromAbsoluteLeft(float fraction);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromAbsoluteRight(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromAbsoluteRight(float fraction);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createGuidelineFromBottom(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createGuidelineFromBottom(float fraction);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromEnd(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromEnd(float fraction);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromStart(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createGuidelineFromStart(float fraction);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createGuidelineFromTop(float offset);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createGuidelineFromTop(float fraction);
    method public final androidx.constraintlayout.compose.HorizontalChainReference createHorizontalChain(androidx.constraintlayout.compose.LayoutReference![] elements, optional androidx.constraintlayout.compose.ChainStyle chainStyle);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor createStartBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor createTopBarrier(androidx.constraintlayout.compose.LayoutReference![] elements, optional float margin);
    method public final androidx.constraintlayout.compose.VerticalChainReference createVerticalChain(androidx.constraintlayout.compose.LayoutReference![] elements, optional androidx.constraintlayout.compose.ChainStyle chainStyle);
    method protected final java.util.List<kotlin.jvm.functions.Function1<androidx.constraintlayout.compose.State,kotlin.Unit>> getTasks();
    method public void reset();
    property protected final java.util.List<kotlin.jvm.functions.Function1<androidx.constraintlayout.compose.State,kotlin.Unit>> tasks;
    field @kotlin.PublishedApi internal int helpersHashCode;
  }

  @androidx.compose.runtime.Stable public static final class ConstraintLayoutBaseScope.BaselineAnchor {
    method public androidx.constraintlayout.compose.LayoutReference component2();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.BaselineAnchor copy(Object id, androidx.constraintlayout.compose.LayoutReference reference);
    method public androidx.constraintlayout.compose.LayoutReference getReference();
    property public final androidx.constraintlayout.compose.LayoutReference reference;
  }

  @androidx.compose.runtime.Stable public static final class ConstraintLayoutBaseScope.HorizontalAnchor {
    method public androidx.constraintlayout.compose.LayoutReference component3();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor copy(Object id, int index, androidx.constraintlayout.compose.LayoutReference reference);
    method public androidx.constraintlayout.compose.LayoutReference getReference();
    property public final androidx.constraintlayout.compose.LayoutReference reference;
  }

  @androidx.compose.runtime.Stable public static final class ConstraintLayoutBaseScope.VerticalAnchor {
    method public androidx.constraintlayout.compose.LayoutReference component3();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor copy(Object id, int index, androidx.constraintlayout.compose.LayoutReference reference);
    method public androidx.constraintlayout.compose.LayoutReference getReference();
    property public final androidx.constraintlayout.compose.LayoutReference reference;
  }

  public final class ConstraintLayoutKt {
    method @androidx.compose.runtime.Composable public static inline void ConstraintLayout(optional androidx.compose.ui.Modifier modifier, optional int optimizationLevel, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.ConstraintLayoutScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static inline void ConstraintLayout(androidx.constraintlayout.compose.ConstraintSet constraintSet, optional androidx.compose.ui.Modifier modifier, optional int optimizationLevel, optional boolean animateChanges, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.jvm.functions.Function0<kotlin.Unit>? finishedAnimationListener, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static androidx.constraintlayout.compose.ConstraintSet ConstraintSet(@org.intellij.lang.annotations.Language("json5") String content, optional @org.intellij.lang.annotations.Language("json5") String? overrideVariables);
    method public static androidx.constraintlayout.compose.ConstraintSet ConstraintSet(@org.intellij.lang.annotations.Language("json5") String jsonContent);
    method public static androidx.constraintlayout.compose.ConstraintSet ConstraintSet(androidx.constraintlayout.compose.ConstraintSet extendConstraintSet, @org.intellij.lang.annotations.Language("json5") String jsonContent);
    method public static androidx.constraintlayout.compose.ConstraintSet ConstraintSet(kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.ConstraintSetScope,kotlin.Unit> description);
    method public static androidx.constraintlayout.compose.ConstraintSet ConstraintSet(androidx.constraintlayout.compose.ConstraintSet extendConstraintSet, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.ConstraintSetScope,kotlin.Unit> description);
    method public static androidx.constraintlayout.compose.Dimension.MaxCoercible atLeast(androidx.constraintlayout.compose.Dimension.Coercible, float dp);
    method public static androidx.constraintlayout.compose.Dimension atLeast(androidx.constraintlayout.compose.Dimension.MinCoercible, float dp);
    method @Deprecated public static androidx.constraintlayout.compose.Dimension atLeastWrapContent(androidx.constraintlayout.compose.Dimension.MinCoercible, float dp);
    method public static androidx.constraintlayout.compose.Dimension.MinCoercible atMost(androidx.constraintlayout.compose.Dimension.Coercible, float dp);
    method public static androidx.constraintlayout.compose.Dimension atMost(androidx.constraintlayout.compose.Dimension.MaxCoercible, float dp);
    method public static androidx.constraintlayout.compose.Dimension.MaxCoercible getAtLeastWrapContent(androidx.constraintlayout.compose.Dimension.Coercible);
    method public static androidx.constraintlayout.compose.Dimension getAtLeastWrapContent(androidx.constraintlayout.compose.Dimension.MinCoercible);
    method public static androidx.constraintlayout.compose.Dimension.MinCoercible getAtMostWrapContent(androidx.constraintlayout.compose.Dimension.Coercible);
    method public static androidx.constraintlayout.compose.Dimension getAtMostWrapContent(androidx.constraintlayout.compose.Dimension.MaxCoercible);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static kotlin.Pair<androidx.compose.ui.layout.MeasurePolicy,kotlin.jvm.functions.Function0<kotlin.Unit>> rememberConstraintLayoutMeasurePolicy(int optimizationLevel, androidx.constraintlayout.compose.ConstraintLayoutScope scope, androidx.compose.runtime.MutableState<java.lang.Boolean> remeasureRequesterState, androidx.constraintlayout.compose.Measurer measurer);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static androidx.compose.ui.layout.MeasurePolicy rememberConstraintLayoutMeasurePolicy(int optimizationLevel, androidx.compose.runtime.MutableState<java.lang.Long> needsUpdate, androidx.constraintlayout.compose.ConstraintSet constraintSet, androidx.constraintlayout.compose.Measurer measurer);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public final class ConstraintLayoutScope extends androidx.constraintlayout.compose.ConstraintLayoutBaseScope {
    ctor @kotlin.PublishedApi internal ConstraintLayoutScope();
    method @androidx.compose.runtime.Stable public androidx.compose.ui.Modifier constrainAs(androidx.compose.ui.Modifier, androidx.constraintlayout.compose.ConstrainedLayoutReference ref, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.ConstrainScope,kotlin.Unit> constrainBlock);
    method public androidx.constraintlayout.compose.ConstrainedLayoutReference createRef();
    method @androidx.compose.runtime.Stable public androidx.constraintlayout.compose.ConstraintLayoutScope.ConstrainedLayoutReferences createRefs();
  }

  public final class ConstraintLayoutScope.ConstrainedLayoutReferences {
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component1();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component10();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component11();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component12();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component13();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component14();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component15();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component16();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component2();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component3();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component4();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component5();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component6();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component7();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component8();
    method public operator androidx.constraintlayout.compose.ConstrainedLayoutReference component9();
  }

  public final class ConstraintLayoutTagKt {
    method public static Object? getConstraintLayoutId(androidx.compose.ui.layout.Measurable);
    method public static Object? getConstraintLayoutTag(androidx.compose.ui.layout.Measurable);
    method public static androidx.compose.ui.Modifier layoutId(androidx.compose.ui.Modifier, String layoutId, optional String? tag);
  }

  public interface ConstraintLayoutTagParentData {
    method public String getConstraintLayoutId();
    method public String getConstraintLayoutTag();
    property public abstract String constraintLayoutId;
    property public abstract String constraintLayoutTag;
  }

  @androidx.compose.runtime.Immutable public interface ConstraintSet {
    method public void applyTo(androidx.constraintlayout.compose.State state, java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables);
    method public default void applyTo(androidx.constraintlayout.core.state.Transition transition, int type);
    method public default boolean isDirty(java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables);
    method public default androidx.constraintlayout.compose.ConstraintSet override(String name, float value);
  }

  public final class ConstraintSetRef {
    method public androidx.constraintlayout.compose.ConstraintSetRef copy(String name);
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker public final class ConstraintSetScope extends androidx.constraintlayout.compose.ConstraintLayoutBaseScope {
    method public androidx.constraintlayout.compose.ConstrainedLayoutReference createRefFor(Object id);
  }

  public final class DesignElements {
    method public void define(String name, kotlin.jvm.functions.Function2<? super java.lang.String,? super java.util.HashMap<java.lang.String,java.lang.String>,kotlin.Unit> function);
    method public java.util.HashMap<java.lang.String,kotlin.jvm.functions.Function2<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>,kotlin.Unit>> getMap();
    method public void setMap(java.util.HashMap<java.lang.String,kotlin.jvm.functions.Function2<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>,kotlin.Unit>>);
    property public final java.util.HashMap<java.lang.String,kotlin.jvm.functions.Function2<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>,kotlin.Unit>> map;
    field public static final androidx.constraintlayout.compose.DesignElements INSTANCE;
  }

  public interface DesignInfoProvider {
    method public String getDesignInfo(int startX, int startY, String args);
  }

  public interface Dimension {
    field public static final androidx.constraintlayout.compose.Dimension.Companion Companion;
  }

  public static interface Dimension.Coercible extends androidx.constraintlayout.compose.Dimension {
  }

  public static final class Dimension.Companion {
    method public androidx.constraintlayout.compose.Dimension.Coercible getFillToConstraints();
    method public androidx.constraintlayout.compose.Dimension getMatchParent();
    method public androidx.constraintlayout.compose.Dimension.Coercible getPreferredWrapContent();
    method public androidx.constraintlayout.compose.Dimension getWrapContent();
    method public androidx.constraintlayout.compose.Dimension percent(float percent);
    method public androidx.constraintlayout.compose.Dimension.MinCoercible preferredValue(float dp);
    method public androidx.constraintlayout.compose.Dimension ratio(String ratio);
    method public androidx.constraintlayout.compose.Dimension value(float dp);
    property public final androidx.constraintlayout.compose.Dimension.Coercible fillToConstraints;
    property public final androidx.constraintlayout.compose.Dimension matchParent;
    property public final androidx.constraintlayout.compose.Dimension.Coercible preferredWrapContent;
    property public final androidx.constraintlayout.compose.Dimension wrapContent;
  }

  public static interface Dimension.MaxCoercible extends androidx.constraintlayout.compose.Dimension {
  }

  public static interface Dimension.MinCoercible extends androidx.constraintlayout.compose.Dimension {
  }

  @kotlin.PublishedApi internal abstract class EditableJSONLayout implements androidx.constraintlayout.compose.LayoutInformationReceiver {
    ctor public EditableJSONLayout(@org.intellij.lang.annotations.Language("json5") String content);
    method public final String getCurrentContent();
    method public final String? getDebugName();
    method public androidx.constraintlayout.compose.MotionLayoutDebugFlags getForcedDrawDebug();
    method public int getForcedHeight();
    method public int getForcedWidth();
    method public final String getLayoutInformation();
    method public androidx.constraintlayout.compose.LayoutInfoFlags getLayoutInformationMode();
    method protected final void initialization();
    method protected final void onDrawDebug(int debugMode);
    method protected final void onLayoutInformation(int mode);
    method protected void onNewContent(String content);
    method public final void onNewDimensions(int width, int height);
    method public final void setCurrentContent(String content);
    method public final void setDebugName(String? name);
    method public void setLayoutInformation(String information);
    method public void setUpdateFlag(androidx.compose.runtime.MutableState<java.lang.Long> needsUpdate);
    method protected final void signalUpdate();
  }

  @androidx.compose.runtime.Immutable public final class FlowStyle {
    field public static final androidx.constraintlayout.compose.FlowStyle.Companion Companion;
  }

  public static final class FlowStyle.Companion {
    method public androidx.constraintlayout.compose.FlowStyle getPacked();
    method public androidx.constraintlayout.compose.FlowStyle getSpread();
    method public androidx.constraintlayout.compose.FlowStyle getSpreadInside();
    property public final androidx.constraintlayout.compose.FlowStyle Packed;
    property public final androidx.constraintlayout.compose.FlowStyle Spread;
    property public final androidx.constraintlayout.compose.FlowStyle SpreadInside;
  }

  @androidx.compose.runtime.Immutable public final class HorizontalAlign {
    field public static final androidx.constraintlayout.compose.HorizontalAlign.Companion Companion;
  }

  public static final class HorizontalAlign.Companion {
    method public androidx.constraintlayout.compose.HorizontalAlign getCenter();
    method public androidx.constraintlayout.compose.HorizontalAlign getEnd();
    method public androidx.constraintlayout.compose.HorizontalAlign getStart();
    property public final androidx.constraintlayout.compose.HorizontalAlign Center;
    property public final androidx.constraintlayout.compose.HorizontalAlign End;
    property public final androidx.constraintlayout.compose.HorizontalAlign Start;
  }

  public interface HorizontalAnchorable {
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor anchor, optional float margin, optional float goneMargin);
  }

  @androidx.compose.runtime.Stable public final class HorizontalChainReference extends androidx.constraintlayout.compose.LayoutReference {
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getAbsoluteLeft();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getAbsoluteRight();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getEnd();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor getStart();
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor absoluteLeft;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor absoluteRight;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor end;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor start;
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker @androidx.compose.runtime.Stable public final class HorizontalChainScope {
    method public androidx.constraintlayout.compose.VerticalAnchorable getAbsoluteLeft();
    method public androidx.constraintlayout.compose.VerticalAnchorable getAbsoluteRight();
    method public androidx.constraintlayout.compose.VerticalAnchorable getEnd();
    method public androidx.constraintlayout.compose.ConstrainedLayoutReference getParent();
    method public androidx.constraintlayout.compose.VerticalAnchorable getStart();
    property public final androidx.constraintlayout.compose.VerticalAnchorable absoluteLeft;
    property public final androidx.constraintlayout.compose.VerticalAnchorable absoluteRight;
    property public final androidx.constraintlayout.compose.VerticalAnchorable end;
    property public final androidx.constraintlayout.compose.ConstrainedLayoutReference parent;
    property public final androidx.constraintlayout.compose.VerticalAnchorable start;
  }

  public enum LayoutInfoFlags {
    method public static androidx.constraintlayout.compose.LayoutInfoFlags valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.constraintlayout.compose.LayoutInfoFlags[] values();
    enum_constant public static final androidx.constraintlayout.compose.LayoutInfoFlags BOUNDS;
    enum_constant public static final androidx.constraintlayout.compose.LayoutInfoFlags NONE;
  }

  public interface LayoutInformationReceiver {
    method public androidx.constraintlayout.compose.MotionLayoutDebugFlags getForcedDrawDebug();
    method public int getForcedHeight();
    method public float getForcedProgress();
    method public int getForcedWidth();
    method public androidx.constraintlayout.compose.LayoutInfoFlags getLayoutInformationMode();
    method public void onNewProgress(float progress);
    method public void resetForcedProgress();
    method public void setLayoutInformation(String information);
    method public void setUpdateFlag(androidx.compose.runtime.MutableState<java.lang.Long> needsUpdate);
  }

  @androidx.compose.runtime.Stable public abstract class LayoutReference {
  }

  @kotlin.PublishedApi internal class Measurer implements androidx.constraintlayout.core.widgets.analyzer.BasicMeasure.Measurer androidx.constraintlayout.compose.DesignInfoProvider {
    method public final void addLayoutInformationReceiver(androidx.constraintlayout.compose.LayoutInformationReceiver? layoutReceiver);
    method protected final void applyRootSize(long constraints);
    method public void computeLayoutResult();
    method @androidx.compose.runtime.Composable public final void createDesignElements();
    method public void didMeasures();
    method @androidx.compose.runtime.Composable public final void drawDebugBounds(androidx.compose.foundation.layout.BoxScope, float forcedScaleFactor);
    method public final void drawDebugBounds(androidx.compose.ui.graphics.drawscope.DrawScope, float forcedScaleFactor);
    method protected final androidx.compose.ui.unit.Density getDensity();
    method public String getDesignInfo(int startX, int startY, String args);
    method public final float getForcedScaleFactor();
    method protected final java.util.Map<androidx.compose.ui.layout.Measurable,androidx.constraintlayout.core.state.WidgetFrame> getFrameCache();
    method public final int getLayoutCurrentHeight();
    method public final int getLayoutCurrentWidth();
    method protected final androidx.constraintlayout.compose.LayoutInformationReceiver? getLayoutInformationReceiver();
    method protected final androidx.compose.ui.layout.MeasureScope getMeasureScope();
    method protected final java.util.Map<androidx.compose.ui.layout.Measurable,androidx.compose.ui.layout.Placeable> getPlaceables();
    method protected final androidx.constraintlayout.core.widgets.ConstraintWidgetContainer getRoot();
    method protected final androidx.constraintlayout.compose.State getState();
    method public void measure(androidx.constraintlayout.core.widgets.ConstraintWidget constraintWidget, androidx.constraintlayout.core.widgets.analyzer.BasicMeasure.Measure measure);
    method public final void parseDesignElements(androidx.constraintlayout.compose.ConstraintSet constraintSet);
    method public final void performLayout(androidx.compose.ui.layout.Placeable.PlacementScope, java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables);
    method public final long performMeasure(long constraints, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.constraintlayout.compose.ConstraintSet constraintSet, java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables, int optimizationLevel, androidx.compose.ui.layout.MeasureScope measureScope);
    method protected final void setDensity(androidx.compose.ui.unit.Density);
    method public final void setForcedScaleFactor(float);
    method protected final void setLayoutInformationReceiver(androidx.constraintlayout.compose.LayoutInformationReceiver?);
    method protected final void setMeasureScope(androidx.compose.ui.layout.MeasureScope);
    property protected final androidx.compose.ui.unit.Density density;
    property public final float forcedScaleFactor;
    property protected final java.util.Map<androidx.compose.ui.layout.Measurable,androidx.constraintlayout.core.state.WidgetFrame> frameCache;
    property public final int layoutCurrentHeight;
    property public final int layoutCurrentWidth;
    property protected final androidx.constraintlayout.compose.LayoutInformationReceiver? layoutInformationReceiver;
    property protected final androidx.compose.ui.layout.MeasureScope measureScope;
    property protected final java.util.Map<androidx.compose.ui.layout.Measurable,androidx.compose.ui.layout.Placeable> placeables;
    property protected final androidx.constraintlayout.core.widgets.ConstraintWidgetContainer root;
    property protected final androidx.constraintlayout.compose.State state;
    field protected androidx.compose.ui.unit.Density density;
    field protected androidx.compose.ui.layout.MeasureScope measureScope;
  }

  @kotlin.PublishedApi internal interface MotionAnimationCommand {
  }

  public static final class MotionAnimationCommand.Animate implements androidx.constraintlayout.compose.MotionAnimationCommand {
    ctor public MotionAnimationCommand.Animate(float newProgress, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec);
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getAnimationSpec();
    method public float getNewProgress();
    property public final androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec;
    property public final float newProgress;
  }

  public static final class MotionAnimationCommand.Snap implements androidx.constraintlayout.compose.MotionAnimationCommand {
    ctor public MotionAnimationCommand.Snap(float newProgress);
    method public float getNewProgress();
    property public final float newProgress;
  }

  public final class MotionCarouselKt {
    method @androidx.compose.runtime.Composable public static void ItemHolder(int i, String slotPrefix, boolean showSlot, kotlin.jvm.functions.Function0<kotlin.Unit> function);
    method @androidx.compose.runtime.Composable public static void MotionCarousel(androidx.constraintlayout.compose.MotionScene motionScene, int initialSlotIndex, int numSlots, optional String backwardTransition, optional String forwardTransition, optional String slotPrefix, optional boolean showSlots, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.MotionCarouselScope,kotlin.Unit> content);
    method public static inline <T> void items(androidx.constraintlayout.compose.MotionCarouselScope, java.util.List<? extends T> items, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> itemContent);
    method public static inline <T> void itemsWithProperties(androidx.constraintlayout.compose.MotionCarouselScope, java.util.List<? extends T> items, kotlin.jvm.functions.Function2<? super T,? super androidx.compose.runtime.State<androidx.constraintlayout.compose.MotionLayoutScope.MotionProperties>,kotlin.Unit> itemContent);
  }

  public interface MotionCarouselScope {
    method public void items(int count, kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> itemContent);
    method public void itemsWithProperties(int count, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super androidx.compose.runtime.State<androidx.constraintlayout.compose.MotionLayoutScope.MotionProperties>,kotlin.Unit> itemContent);
  }

  public final class MotionDragHandlerKt {
    method @kotlin.PublishedApi internal static inline androidx.compose.ui.Modifier motionPointerInput(androidx.compose.ui.Modifier, optional Object key, androidx.constraintlayout.compose.MotionProgress motionProgress, androidx.constraintlayout.compose.MotionMeasurer measurer);
  }

  @kotlin.PublishedApi internal final class MotionDragState {
    ctor public MotionDragState(boolean isDragging, long dragAmount, long velocity);
    method public boolean component1();
    method public long component2-F1C5BW0();
    method public long component3-9UxMQ8M();
    method internal boolean equals(Object? other);
    method public long getDragAmount();
    method public long getVelocity();
    method internal int hashCode();
    method public boolean isDragging();
    method internal String toString();
    property public final long dragAmount;
    property public final boolean isDragging;
    property public final long velocity;
    field public static final androidx.constraintlayout.compose.MotionDragState.Companion Companion;
  }

  public static final class MotionDragState.Companion {
    method public androidx.constraintlayout.compose.MotionDragState onDrag(long dragAmount);
    method public androidx.constraintlayout.compose.MotionDragState onDragEnd(long velocity);
  }

  @kotlin.DslMarker public @interface MotionDslScope {
  }

  public interface MotionItemsProvider {
    method public int count();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getContent(int index);
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getContent(int index, androidx.compose.runtime.State<androidx.constraintlayout.compose.MotionLayoutScope.MotionProperties> properties);
    method public boolean hasItemsWithProperties();
  }

  public final class MotionKt {
  }

  public enum MotionLayoutDebugFlags {
    method public static androidx.constraintlayout.compose.MotionLayoutDebugFlags valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.constraintlayout.compose.MotionLayoutDebugFlags[] values();
    enum_constant public static final androidx.constraintlayout.compose.MotionLayoutDebugFlags NONE;
    enum_constant public static final androidx.constraintlayout.compose.MotionLayoutDebugFlags SHOW_ALL;
    enum_constant public static final androidx.constraintlayout.compose.MotionLayoutDebugFlags UNKNOWN;
  }

  public enum MotionLayoutFlag {
    method public static androidx.constraintlayout.compose.MotionLayoutFlag valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.constraintlayout.compose.MotionLayoutFlag[] values();
    enum_constant public static final androidx.constraintlayout.compose.MotionLayoutFlag Default;
    enum_constant public static final androidx.constraintlayout.compose.MotionLayoutFlag FullMeasure;
  }

  public final class MotionLayoutKt {
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static inline void MotionLayoutCore(androidx.constraintlayout.compose.MotionScene motionScene, optional androidx.compose.ui.Modifier modifier, optional String? constraintSetName, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional androidx.constraintlayout.compose.MotionLayoutDebugFlags debugFlag, optional int optimizationLevel, optional java.util.Set<? extends androidx.constraintlayout.compose.MotionLayoutFlag> motionLayoutFlags, optional kotlin.jvm.functions.Function0<kotlin.Unit>? finishedAnimationListener, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.MotionLayoutScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static inline void MotionLayoutCore(androidx.constraintlayout.compose.MotionScene motionScene, float progress, optional androidx.compose.ui.Modifier modifier, optional java.util.EnumSet<androidx.constraintlayout.compose.MotionLayoutDebugFlags> debug, optional int optimizationLevel, String transitionName, optional java.util.Set<? extends androidx.constraintlayout.compose.MotionLayoutFlag> motionLayoutFlags, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.MotionLayoutScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static inline void MotionLayoutCore(androidx.constraintlayout.compose.ConstraintSet start, androidx.constraintlayout.compose.ConstraintSet end, optional androidx.compose.ui.Modifier modifier, optional androidx.constraintlayout.compose.TransitionImpl? transition, androidx.constraintlayout.compose.MotionProgress motionProgress, optional androidx.constraintlayout.compose.MotionLayoutDebugFlags debugFlag, optional androidx.constraintlayout.compose.LayoutInformationReceiver? informationReceiver, optional int optimizationLevel, optional java.util.Set<? extends androidx.constraintlayout.compose.MotionLayoutFlag> motionLayoutFlags, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.MotionLayoutScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static inline void MotionLayoutCore(optional androidx.compose.ui.Modifier modifier, optional int optimizationLevel, androidx.constraintlayout.compose.MotionLayoutStateImpl motionLayoutState, androidx.constraintlayout.compose.MotionScene motionScene, optional String transitionName, kotlin.jvm.functions.Function1<? super androidx.constraintlayout.compose.MotionLayoutScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static void UpdateWithForcedIfNoUserChange(androidx.constraintlayout.compose.MotionProgress motionProgress, androidx.constraintlayout.compose.LayoutInformationReceiver? informationReceiver);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static inline androidx.constraintlayout.compose.MotionProgress createAndUpdateMotionProgress(float progress);
    method @androidx.compose.runtime.Composable @kotlin.PublishedApi internal static androidx.compose.ui.layout.MeasurePolicy rememberMotionLayoutMeasurePolicy(int optimizationLevel, java.util.EnumSet<androidx.constraintlayout.compose.MotionLayoutDebugFlags> debug, androidx.constraintlayout.compose.ConstraintSet constraintSetStart, androidx.constraintlayout.compose.ConstraintSet constraintSetEnd, androidx.constraintlayout.compose.TransitionImpl? transition, androidx.constraintlayout.compose.MotionProgress motionProgress, optional java.util.Set<? extends androidx.constraintlayout.compose.MotionLayoutFlag> motionLayoutFlags, androidx.constraintlayout.compose.MotionMeasurer measurer);
  }

  @androidx.compose.runtime.Immutable @kotlin.PublishedApi internal final class MotionLayoutStateImpl {
    ctor public MotionLayoutStateImpl(float initialProgress, androidx.constraintlayout.compose.MotionLayoutDebugFlags initialDebugMode, kotlinx.coroutines.CoroutineScope motionCoroutineScope);
    method public void animateTo(float newProgress, androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec);
    method public float getCurrentProgress();
    method public boolean isInDebugMode();
    method public void setDebugMode(androidx.constraintlayout.compose.MotionLayoutDebugFlags motionDebugFlag);
    method public void snapTo(float newProgress);
    property public float currentProgress;
    property public boolean isInDebugMode;
    field @kotlin.PublishedApi internal final androidx.constraintlayout.compose.MotionProgress motionProgress;
  }

  public final class MotionLayoutStateKt {
  }

  @kotlin.PublishedApi internal final class MotionMeasurer extends androidx.constraintlayout.compose.Measurer {
    method public void clearConstraintSets();
    method public void drawDebug(androidx.compose.ui.graphics.drawscope.DrawScope);
    method public void encodeRoot(StringBuilder json);
    method public long getCustomColor(String id, String name, float progress);
    method public float getCustomFloat(String id, String name, float progress);
    method public androidx.constraintlayout.core.state.Transition getTransition();
    method public void initWith(androidx.constraintlayout.compose.ConstraintSet start, androidx.constraintlayout.compose.ConstraintSet end, androidx.compose.ui.unit.Density density, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.constraintlayout.compose.TransitionImpl? transition, float progress);
    method public long performInterpolationMeasure(long constraints, androidx.compose.ui.unit.LayoutDirection layoutDirection, androidx.constraintlayout.compose.ConstraintSet constraintSetStart, androidx.constraintlayout.compose.ConstraintSet constraintSetEnd, androidx.constraintlayout.compose.TransitionImpl? transition, java.util.List<? extends androidx.compose.ui.layout.Measurable> measurables, int optimizationLevel, float progress, optional java.util.Set<? extends androidx.constraintlayout.compose.MotionLayoutFlag> motionLayoutFlags, androidx.compose.ui.layout.MeasureScope measureScope);
    property public final androidx.constraintlayout.core.state.Transition transition;
  }

  @kotlin.PublishedApi internal interface MotionProgress {
    method public float getCurrentProgress();
    method public void updateProgress(float newProgress);
    property public abstract float currentProgress;
    field public static final androidx.constraintlayout.compose.MotionProgress.Companion Companion;
  }

  public static final class MotionProgress.Companion {
    method public androidx.constraintlayout.compose.MotionProgress fromMutableState(androidx.compose.runtime.MutableState<java.lang.Float> mutableProgress);
    method public androidx.constraintlayout.compose.MotionProgress fromState(androidx.compose.runtime.State<java.lang.Float> progressState, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onUpdate);
  }

  public final class MotionSceneKt {
  }

  public final class MotionSceneScopeKt {
  }

  public final class State extends androidx.constraintlayout.core.state.State {
    ctor public State(androidx.compose.ui.unit.Density density);
    method public androidx.compose.ui.unit.Density getDensity();
    method public androidx.compose.ui.unit.LayoutDirection getLayoutDirection();
    method public long getRootIncomingConstraints();
    method public void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection);
    method public void setRootIncomingConstraints(long);
    property public final androidx.compose.ui.unit.Density density;
    property public final androidx.compose.ui.unit.LayoutDirection layoutDirection;
    property public final long rootIncomingConstraints;
    field public androidx.compose.ui.unit.LayoutDirection layoutDirection;
  }

  public final class ToolingUtilsKt {
    method public static androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.constraintlayout.compose.DesignInfoProvider> getDesignInfoDataKey();
    property public static final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.constraintlayout.compose.DesignInfoProvider> DesignInfoDataKey;
    field @kotlin.PublishedApi internal static final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.constraintlayout.compose.DesignInfoProvider> designInfoProvider$delegate;
  }

  @kotlin.PublishedApi internal final class TransitionHandler {
    ctor public TransitionHandler(androidx.constraintlayout.compose.MotionMeasurer motionMeasurer, androidx.constraintlayout.compose.MotionProgress motionProgress);
    method public suspend Object? onTouchUp(long velocity, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public boolean pendingProgressWhileTouchUp();
    method public void updateProgressOnDrag(long dragAmount);
    method public suspend Object? updateProgressWhileTouchUp(kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class TransitionKt {
  }

  public final class TransitionScopeKt {
  }

  @androidx.compose.runtime.Immutable public final class VerticalAlign {
    field public static final androidx.constraintlayout.compose.VerticalAlign.Companion Companion;
  }

  public static final class VerticalAlign.Companion {
    method public androidx.constraintlayout.compose.VerticalAlign getBaseline();
    method public androidx.constraintlayout.compose.VerticalAlign getBottom();
    method public androidx.constraintlayout.compose.VerticalAlign getCenter();
    method public androidx.constraintlayout.compose.VerticalAlign getTop();
    property public final androidx.constraintlayout.compose.VerticalAlign Baseline;
    property public final androidx.constraintlayout.compose.VerticalAlign Bottom;
    property public final androidx.constraintlayout.compose.VerticalAlign Center;
    property public final androidx.constraintlayout.compose.VerticalAlign Top;
  }

  public interface VerticalAnchorable {
    method public void linkTo(androidx.constraintlayout.compose.ConstraintLayoutBaseScope.VerticalAnchor anchor, optional float margin, optional float goneMargin);
  }

  @androidx.compose.runtime.Stable public final class VerticalChainReference extends androidx.constraintlayout.compose.LayoutReference {
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor getBottom();
    method public androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor getTop();
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor bottom;
    property public final androidx.constraintlayout.compose.ConstraintLayoutBaseScope.HorizontalAnchor top;
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker @androidx.compose.runtime.Stable public final class VerticalChainScope {
    method public androidx.constraintlayout.compose.HorizontalAnchorable getBottom();
    method public androidx.constraintlayout.compose.ConstrainedLayoutReference getParent();
    method public androidx.constraintlayout.compose.HorizontalAnchorable getTop();
    property public final androidx.constraintlayout.compose.HorizontalAnchorable bottom;
    property public final androidx.constraintlayout.compose.ConstrainedLayoutReference parent;
    property public final androidx.constraintlayout.compose.HorizontalAnchorable top;
  }

  @androidx.compose.runtime.Immutable public final class Visibility {
    field public static final androidx.constraintlayout.compose.Visibility.Companion Companion;
  }

  public static final class Visibility.Companion {
    method public androidx.constraintlayout.compose.Visibility getGone();
    method public androidx.constraintlayout.compose.Visibility getInvisible();
    method public androidx.constraintlayout.compose.Visibility getVisible();
    property public final androidx.constraintlayout.compose.Visibility Gone;
    property public final androidx.constraintlayout.compose.Visibility Invisible;
    property public final androidx.constraintlayout.compose.Visibility Visible;
  }

  @androidx.compose.runtime.Immutable public final class Wrap {
    field public static final androidx.constraintlayout.compose.Wrap.Companion Companion;
  }

  public static final class Wrap.Companion {
    method public androidx.constraintlayout.compose.Wrap getAligned();
    method public androidx.constraintlayout.compose.Wrap getChain();
    method public androidx.constraintlayout.compose.Wrap getNone();
    property public final androidx.constraintlayout.compose.Wrap Aligned;
    property public final androidx.constraintlayout.compose.Wrap Chain;
    property public final androidx.constraintlayout.compose.Wrap None;
  }

}

package androidx.constraintlayout.compose.carousel {

  public final class CarouselSwipeableKt {
  }

}

