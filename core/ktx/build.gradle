buildscript {
    ext.versions = [
        'kotlin': '1.2.20'
    ]

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.15"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.dokka-android'

repositories {
    jcenter()
    google()
}

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 14

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

configurations {
    ktlint
    metalava
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation 'com.android.support:support-annotations:27.0.2'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:27.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.google.truth:truth:0.37'
    androidTestImplementation 'com.squareup.okio:okio:1.13.0'

    ktlint 'com.github.shyiko:ktlint:0.14.0'

    // Metalava isn't released yet. Check in its jar and explicitly track its transitive deps.
    metalava files('metalava.jar')
    metalava 'com.android.tools.external.org-jetbrains:uast:26.1.0-alpha06'
    metalava 'com.android.tools.external.com-intellij:intellij-core:26.1.0-alpha06'
    metalava 'com.android.tools.lint:lint-api:26.1.0-alpha06'
    metalava 'com.android.tools.lint:lint-checks:26.1.0-alpha06'
    metalava 'com.android.tools.lint:lint:26.1.0-alpha06'
    metalava 'org.jetbrains.kotlin:kotlin-stdlib:1.2.10'
}

task ktlint(type: JavaExec, group: LifecycleBasePlugin.VERIFICATION_GROUP) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = 'com.github.shyiko.ktlint.Main'
    args 'src/**/*.kt'
}
check.dependsOn ktlint

task ktFormat(type: JavaExec, group: 'formatting') {
    description = 'Fix Kotlin code style deviations.'
    classpath = configurations.ktlint
    main = 'com.github.shyiko.ktlint.Main'
    args '-F', 'src/**/*.kt'
}

task updateApi(type: JavaExec) {
    classpath = configurations.metalava
    main = 'com.android.tools.metalava.Driver'

    // Defer setting arguments so that we can read a variant-specific configuration.
    doFirst {
        args = [
            '--source-path',
            'src/main/java',
            '--compatible-output=no',
            '--omit-common-packages=yes',
            '--output-kotlin-nulls=yes',
            '--allow-referencing-unknown-classes', // TODO we probably shouldn't need this
            '--classpath',
            (android.bootClasspath + configurations.releaseCompileClasspath.asFileTree.files).join(File.pathSeparator),
            '--api',
            'src/main/api/0.txt'
        ]
    }
}

task checkApi(type: JavaExec) {
    classpath = configurations.metalava
    main = 'com.android.tools.metalava.Driver'

    // Defer setting arguments so that we can read a variant-specific configuration.
    doFirst {
        args = [
            '--source-path',
            'src/main/java',
            '--compatible-output=no',
            '--omit-common-packages=yes',
            '--output-kotlin-nulls=yes',
            '--input-kotlin-nulls=yes',
            '--allow-referencing-unknown-classes', // TODO we probably shouldn't need this
            '--classpath',
            (android.bootClasspath + configurations.releaseCompileClasspath.asFileTree.files).join(File.pathSeparator),
            '--check-compatibility',
            '--warnings-as-errors',
            '--previous-api',
            'src/main/api/0.txt'
        ]
    }
}
check.dependsOn checkApi

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/documentation"
}
