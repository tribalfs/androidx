#!/bin/bash
#
# Script to fetch generated API references docs from the Android build server and stage them.

source gbash.sh || exit

readonly defaultDb=""
DEFINE_string buildId --required "" "The build ID from the Android build server"
DEFINE_string db "$defaultDb" "The database used for staging. Omitting this value will stage changes to the staging DB."

gbash::init_google "$@"

# Change directory to this script's location and store the directory
cd "$(dirname $0)"
readonly scriptDirectory=$(pwd)

# Working directories for the refdocs
readonly newDir="reference-docs"
readonly dackkaNewDir="reference-docs-dackka"

# Allowlist for including specific directories being generated by Dackka.
#
# Each directory's spelling must match the library's directory in
# frameworks/support.
#
# This list should match, or be a subset of, the list of libraries defined in
# https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:buildSrc/src/main/kotlin/androidx/build/docs/AndroidXDocsPlugin.kt;l=568
readonly libraryDirs=(
  "benchmark"
  "compose"
  "collection"
  "paging"
)

# Remove and recreate the existing out directory to avoid conflicts from previous runs
rm -rf out
mkdir -p out/$newDir
mkdir -p out/$dackkaNewDir
cd out

printf "=================================================================== \n"
printf "== Download the doc zip files from the build server \n"
printf "=================================================================== \n"

readonly androidxPublicJavaDocsZip="doclava-public-docs-${FLAGS_buildId}.zip"
readonly androidxPublicKotlinDocsZip="dokka-public-docs-${FLAGS_buildId}.zip"
readonly androidxPublicDackkaDocsZip="dackka-public-docs-${FLAGS_buildId}.zip"

/google/data/ro/projects/android/fetch_artifact --bid $FLAGS_buildId --target androidx $androidxPublicJavaDocsZip
/google/data/ro/projects/android/fetch_artifact --bid $FLAGS_buildId --target androidx $androidxPublicKotlinDocsZip
/google/data/ro/projects/android/fetch_artifact --bid $FLAGS_buildId --target androidx $androidxPublicDackkaDocsZip

printf "\n"
printf "=================================================================== \n"
printf "== Unzip the doc zip files \n"
printf "=================================================================== \n"

unzip $androidxPublicJavaDocsZip -d $newDir
unzip $androidxPublicKotlinDocsZip -d $newDir
unzip $androidxPublicDackkaDocsZip -d $dackkaNewDir

printf "\n"
printf "=================================================================== \n"
printf "== Format the doc zip files \n"
printf "=================================================================== \n"

cd $newDir

# Remove directories we never publish
rm en -rf
rm reference/android -rf
rm reference/java -rf
rm reference/org -rf
rm reference/hierarchy.html
rm reference/kotlin/org -rf
rm reference/kotlin/android -rf

# Move package list into the correct location
mv reference/kotlin/package-list reference/kotlin/androidx/package-list

# Remove javascript files that have no use
rm -f reference/androidx/lists.js
rm -f reference/androidx/navtree_data.js

# Remove extraneous _book.yaml that improperly overwrites the correct one
rm -f reference/androidx/_book.yaml

# Remove the version_added labels to the _toc.yaml that don't do anything
sed -i "s/  version_added/# version_added/" reference/androidx/_toc.yaml
sed -i "s/    # version_added/#     version_added/" reference/androidx/_toc.yaml

printf "\n"
printf "=================================================================== \n"
printf "== Generate the language switcher \n"
printf "=================================================================== \n"

# The switcher script still requires python2 to run correctly
cd reference
python2 ./../../../switcher.py --work androidx

printf "\n"
printf "=================================================================== \n"
printf "== Copy over Dackka generated refdocs \n"
printf "=================================================================== \n"

# Dackka adds the language switcher during generation, so the Dackka directories
# should be copied over after the switcher.py runs - otherwise the contents in
# the Dackka directories will contain a duplicate language switcher.

cd $scriptDirectory/out
for dir in "${libraryDirs[@]}"
do
  printf "Copying $dir\n"
  cp -r $dackkaNewDir/reference/androidx/$dir $newDir/reference/androidx/
  cp -r $dackkaNewDir/reference/kotlin/androidx/$dir $newDir/reference/kotlin/androidx/
done

printf "\n"
printf "=================================================================== \n"
printf "== Create (if needed) and sync g4 workspace \n"
printf "=================================================================== \n"

readonly client="$(p4 g4d -f androidx-ref-docs-stage)"
cd "$client"

# Revert all local changes to prevent merge conflicts when syncing.
# This is OK since we always want to start with a fresh CitC client
g4 revert ...
g4 sync

# temporarily skipping due to o/128063951
# TODO: check this logic when uncommenting
#
# Provision database if the target DB is not the default staging DB.
# if [ "${FLAGS_db}" != "$defaultDb" ]; then
#   printf "\n"
#   printf "=================================================================== \n"
#   printf "== Provision staging database ${FLAGS_db} \n"
#   printf "=================================================================== \n"
#
#   /google/data/ro/projects/devsite/devsite2 provision --db="${FLAGS_db}"
# fi

printf "\n"
printf "=================================================================== \n"
printf "== Copy refdocs to CitC client \n"
printf "=================================================================== \n"

cd third_party/devsite/android/en/reference
cp -r $scriptDirectory/out/$newDir/reference/* .

printf "\n"
printf "=================================================================== \n"
printf "== Create a changelist of pending refdoc changes \n"
printf "=================================================================== \n"

# Grab the CL number generated from running `g4 change`.
readonly clNum=$(g4 change --desc "Update AndroidX refdocs from build ${FLAGS_buildId}" | tail -1 | awk '{print $2}')
printf "View pending changes at http://cl/${clNum} \n"

printf "\n"
printf "=================================================================== \n"
printf "== Stage changes \n"
printf "=================================================================== \n"

# Add the --db flag if the target database is not the default staging DB.
if [ "${FLAGS_db}" != "$defaultDb" ]; then
  /google/data/ro/projects/devsite/devsite2 stage --parallelize_build \
    --use_large_thread_pools --upload_safety_check_mode=ignore \
    --db="${FLAGS_db}" \
  "androidx" \
  "kotlin/androidx"
else
  /google/data/ro/projects/devsite/devsite2 stage --parallelize_build \
    --use_large_thread_pools --upload_safety_check_mode=ignore \
  "androidx" \
  "kotlin/androidx"
fi

# Print CL link again in case it scrolled off the screen or scrollback buffer
printf "View pending changes at http://cl/${clNum} \n"
