<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 4.2.0-alpha15" client="gradle" variant="debug" version="4.2.0-alpha15">

    <issue
        id="InlinedApi"
        message="Field requires API level 21 (current min is 14): `android.R.attr#colorPrimaryDark`"
        errorLine1="            android.R.attr.colorPrimaryDark"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="111"
            column="13"/>
    </issue>

    <issue
        id="UnsafeNewApiCall"
        message="This call is to a method from API 23, the call containing class androidx.drawerlayout.widget.DrawerLayout is not annotated with @RequiresApi(x) where x is at least 23. Either annotate the containing class with at least @RequiresApi(23) or move the call to a static method in a wrapper class annotated with at least @RequiresApi(23)."
        errorLine1="            WindowInsets rootInsets = getRootWindowInsets();"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1334"
            column="39"/>
    </issue>

    <issue
        id="SwitchIntDef"
        message="Switch statement on an `int` with known associated constant missing case `Gravity.NO_GRAVITY`"
        errorLine1="        switch (edgeGravity) {"
        errorLine2="        ~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="614"
            column="9"/>
    </issue>

    <issue
        id="SwitchIntDef"
        message="Switch statement on an `int` with known associated constant missing case `LOCK_MODE_UNDEFINED`, `LOCK_MODE_UNLOCKED`"
        errorLine1="        switch (lockMode) {"
        errorLine2="        ~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="634"
            column="9"/>
    </issue>

    <issue
        id="SwitchIntDef"
        message="Switch statement on an `int` with known associated constant missing case `Gravity.NO_GRAVITY`"
        errorLine1="        switch (edgeGravity) {"
        errorLine2="        ~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="689"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="Custom view `DrawerLayout` overrides `onTouchEvent` but not `performClick`"
        errorLine1="    public boolean onTouchEvent(MotionEvent ev) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1620"
            column="20"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="    @IntDef(value = {Gravity.LEFT, Gravity.RIGHT, GravityCompat.START, GravityCompat.END,"
        errorLine2="                                           ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="160"
            column="44"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="    @IntDef(value = {Gravity.LEFT, Gravity.RIGHT, GravityCompat.START, GravityCompat.END,"
        errorLine2="                             ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="160"
            column="30"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        mLeftCallback = new ViewDragCallback(Gravity.LEFT);"
        errorLine2="                                                     ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="342"
            column="54"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        mRightCallback = new ViewDragCallback(Gravity.RIGHT);"
        errorLine2="                                                      ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="343"
            column="55"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if ((gravity &amp; Gravity.LEFT) == Gravity.LEFT) {"
        errorLine2="                                      ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="474"
            column="39"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if ((gravity &amp; Gravity.LEFT) == Gravity.LEFT) {"
        errorLine2="                                                       ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="474"
            column="56"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if ((gravity &amp; Gravity.RIGHT) == Gravity.RIGHT) {"
        errorLine2="                                      ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="476"
            column="39"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if ((gravity &amp; Gravity.RIGHT) == Gravity.RIGHT) {"
        errorLine2="                                                        ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="476"
            column="57"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        setDrawerLockMode(lockMode, Gravity.LEFT);"
        errorLine2="                                            ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="587"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        setDrawerLockMode(lockMode, Gravity.RIGHT);"
        errorLine2="                                            ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="588"
            column="45"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            case Gravity.LEFT:"
        errorLine2="                         ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="615"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            case Gravity.RIGHT:"
        errorLine2="                         ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="618"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            final ViewDragHelper helper = absGravity == Gravity.LEFT ? mLeftDragger : mRightDragger;"
        errorLine2="                                                                ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="631"
            column="65"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            case Gravity.LEFT:"
        errorLine2="                         ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="690"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            case Gravity.RIGHT:"
        errorLine2="                         ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="700"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if (absGravity == Gravity.LEFT) {"
        errorLine2="                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="764"
            column="35"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if (absGravity == Gravity.RIGHT) {"
        errorLine2="                                         ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="766"
            column="42"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if (absGravity == Gravity.LEFT) {"
        errorLine2="                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="783"
            column="35"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        } else if (absGravity == Gravity.RIGHT) {"
        errorLine2="                                         ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="785"
            column="42"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                checkDrawerViewAbsoluteGravity(drawerView, Gravity.LEFT) ? dx : -dx);"
        errorLine2="                                                                   ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1018"
            column="68"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((gravity &amp; Gravity.LEFT) == Gravity.LEFT) {"
        errorLine2="                               ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1049"
            column="32"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((gravity &amp; Gravity.LEFT) == Gravity.LEFT) {"
        errorLine2="                                                ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1049"
            column="49"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((gravity &amp; Gravity.RIGHT) == Gravity.RIGHT) {"
        errorLine2="                               ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1052"
            column="32"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((gravity &amp; Gravity.RIGHT) == Gravity.RIGHT) {"
        errorLine2="                                                 ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1052"
            column="50"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                        if (cgrav == Gravity.LEFT) {"
        errorLine2="                                             ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1122"
            column="46"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                        } else if (cgrav == Gravity.RIGHT) {"
        errorLine2="                                                    ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1126"
            column="53"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                        if (cgrav == Gravity.LEFT) {"
        errorLine2="                                             ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1136"
            column="46"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                        } else if (cgrav == Gravity.RIGHT) {"
        errorLine2="                                                    ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1140"
            column="53"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                boolean isLeftEdgeDrawer = (childGravity == Gravity.LEFT);"
        errorLine2="                                                                    ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1170"
            column="69"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                if (checkDrawerViewAbsoluteGravity(child, Gravity.LEFT)) {"
        errorLine2="                                                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1275"
            column="67"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                if (checkDrawerViewAbsoluteGravity(v, Gravity.LEFT)) {"
        errorLine2="                                                              ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1470"
            column="63"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                &amp;&amp;  checkDrawerViewAbsoluteGravity(child, Gravity.LEFT)) {"
        errorLine2="                                                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1491"
            column="67"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                &amp;&amp;  checkDrawerViewAbsoluteGravity(child, Gravity.RIGHT)) {"
        errorLine2="                                                                  ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1502"
            column="67"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((absGravity &amp; Gravity.LEFT) != 0) {"
        errorLine2="                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1525"
            column="35"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="        if ((absGravity &amp; Gravity.RIGHT) != 0) {"
        errorLine2="                                  ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1529"
            column="35"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(child, Gravity.LEFT)) {"
        errorLine2="                                                              ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1700"
            column="63"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(drawerView, Gravity.LEFT)) {"
        errorLine2="                                                                   ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1757"
            column="68"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(drawerView, Gravity.LEFT)) {"
        errorLine2="                                                                   ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1832"
            column="68"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            setDrawerLockMode(ss.lockModeLeft, Gravity.LEFT);"
        errorLine2="                                                       ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2090"
            column="56"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            setDrawerLockMode(ss.lockModeRight, Gravity.RIGHT);"
        errorLine2="                                                        ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2093"
            column="57"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(changedView, Gravity.LEFT)) {"
        errorLine2="                                                                    ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2260"
            column="69"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            final int otherGrav = mAbsGravity == Gravity.LEFT ? Gravity.RIGHT : Gravity.LEFT;"
        errorLine2="                                                                        ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2280"
            column="73"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            final int otherGrav = mAbsGravity == Gravity.LEFT ? Gravity.RIGHT : Gravity.LEFT;"
        errorLine2="                                                         ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2280"
            column="58"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            final int otherGrav = mAbsGravity == Gravity.LEFT ? Gravity.RIGHT : Gravity.LEFT;"
        errorLine2="                                                                                        ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2280"
            column="89"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(releasedChild, Gravity.LEFT)) {"
        errorLine2="                                                                      ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2295"
            column="71"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            final boolean leftEdge = mAbsGravity == Gravity.LEFT;"
        errorLine2="                                                            ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2315"
            column="61"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                toCapture = findDrawerWithGravity(Gravity.LEFT);"
        errorLine2="                                                          ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2317"
            column="59"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                toCapture = findDrawerWithGravity(Gravity.RIGHT);"
        errorLine2="                                                          ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2320"
            column="59"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                toCapture = findDrawerWithGravity(Gravity.LEFT);"
        errorLine2="                                                          ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2354"
            column="59"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="                toCapture = findDrawerWithGravity(Gravity.RIGHT);"
        errorLine2="                                                          ~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2356"
            column="59"/>
    </issue>

    <issue
        id="RtlHardcoded"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        errorLine1="            if (checkDrawerViewAbsoluteGravity(child, Gravity.LEFT)) {"
        errorLine2="                                                              ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2371"
            column="63"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="        public void onDrawerSlide(View drawerView, float slideOffset) {"
        errorLine2="                                  ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="310"
            column="35"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="        public void onDrawerOpened(View drawerView) {"
        errorLine2="                                   ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="314"
            column="36"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="        public void onDrawerClosed(View drawerView) {"
        errorLine2="                                   ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="318"
            column="36"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void setChildInsets(WindowInsetsCompat insets, boolean draw) {"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="439"
            column="32"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void setDrawerShadow(Drawable shadowDrawable, @EdgeGravity int gravity) {"
        errorLine2="                                ~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="460"
            column="33"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void setDrawerListener(DrawerListener listener) {"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="525"
            column="35"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void onDraw(Canvas c) {"
        errorLine2="                       ~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1437"
            column="24"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {"
        errorLine2="                                ~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1454"
            column="33"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {"
        errorLine2="                                               ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1454"
            column="48"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public boolean onInterceptTouchEvent(MotionEvent ev) {"
        errorLine2="                                         ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1538"
            column="42"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public boolean dispatchGenericMotionEvent(MotionEvent event) {"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1583"
            column="47"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public boolean onTouchEvent(MotionEvent ev) {"
        errorLine2="                                ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1620"
            column="33"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1963"
            column="15"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1968"
            column="15"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {"
        errorLine2="                                                          ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1968"
            column="59"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1977"
            column="41"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) {"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1982"
            column="12"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) {"
        errorLine2="                                                       ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1982"
            column="56"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void addFocusables(ArrayList&lt;View> views, int direction, int focusableMode) {"
        errorLine2="                              ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="1987"
            column="31"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public boolean onKeyDown(int keyCode, KeyEvent event) {"
        errorLine2="                                          ~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2052"
            column="43"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public boolean onKeyUp(int keyCode, KeyEvent event) {"
        errorLine2="                                        ~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2061"
            column="41"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected void onRestoreInstanceState(Parcelable state) {"
        errorLine2="                                          ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2073"
            column="43"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    protected Parcelable onSaveInstanceState() {"
        errorLine2="              ~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2104"
            column="15"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void addView(View child, int index, ViewGroup.LayoutParams params) {"
        errorLine2="                        ~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2133"
            column="25"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://android.github.io/kotlin-guides/interop.html#nullability-annotations"
        errorLine1="    public void addView(View child, int index, ViewGroup.LayoutParams params) {"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/drawerlayout/widget/DrawerLayout.java"
            line="2133"
            column="48"/>
    </issue>

</issues>
