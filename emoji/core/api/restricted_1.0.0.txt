// Signature format: 3.0
package androidx.emoji.text {

  @AnyThread public class EmojiCompat {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @VisibleForTesting public static androidx.emoji.text.EmojiCompat! reset(androidx.emoji.text.EmojiCompat.Config);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @VisibleForTesting public static androidx.emoji.text.EmojiCompat! reset(androidx.emoji.text.EmojiCompat!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void updateEditorInfoAttrs(android.view.inputmethod.EditorInfo);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface EmojiCompat.LoadState {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface EmojiCompat.LoadStrategy {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static @interface EmojiCompat.ReplaceStrategy {
  }

  @AnyThread @RequiresApi(19) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class EmojiMetadata {
    method public void draw(android.graphics.Canvas, float, float, android.graphics.Paint);
    method public int getCodepointAt(int);
    method public int getCodepointsLength();
    method public short getCompatAdded();
    method public int getHasGlyph();
    method public short getHeight();
    method public int getId();
    method public short getSdkAdded();
    method public android.graphics.Typeface! getTypeface();
    method public short getWidth();
    method public boolean isDefaultEmoji();
    method public void setHasGlyph(boolean);
    method public String toString();
    field public static final int HAS_GLYPH_ABSENT = 1; // 0x1
    field public static final int HAS_GLYPH_EXISTS = 2; // 0x2
    field public static final int HAS_GLYPH_UNKNOWN = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface EmojiMetadata.HasGlyph {
  }

  @RequiresApi(19) public abstract class EmojiSpan {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @VisibleForTesting public final int getId();
  }

  public class FontRequestEmojiCompatConfig extends androidx.emoji.text.EmojiCompat.Config {
    ctor @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public FontRequestEmojiCompatConfig(android.content.Context, androidx.core.provider.FontRequest, androidx.emoji.text.FontRequestEmojiCompatConfig.FontProviderHelper);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class FontRequestEmojiCompatConfig.FontProviderHelper {
    ctor public FontRequestEmojiCompatConfig.FontProviderHelper();
    method public android.graphics.Typeface! buildTypeface(android.content.Context, androidx.core.provider.FontsContractCompat.FontInfo);
    method public androidx.core.provider.FontsContractCompat.FontFamilyResult! fetchFonts(android.content.Context, androidx.core.provider.FontRequest);
    method public void registerObserver(android.content.Context, android.net.Uri, android.database.ContentObserver);
    method public void unregisterObserver(android.content.Context, android.database.ContentObserver);
  }

  @AnyThread @RequiresApi(19) public final class MetadataRepo {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public char[]! getEmojiCharArray();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public androidx.text.emoji.flatbuffer.MetadataList! getMetadataList();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @RequiresApi(19) public final class TypefaceEmojiSpan extends androidx.emoji.text.EmojiSpan {
    ctor public TypefaceEmojiSpan(androidx.emoji.text.EmojiMetadata!);
    method public void draw(android.graphics.Canvas, CharSequence!, @IntRange(from=0L) int, @IntRange(from=0L) int, float, int, int, int, android.graphics.Paint);
  }

}

package androidx.emoji.widget {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class EditTextAttributeHelper {
    ctor public EditTextAttributeHelper(android.view.View, android.util.AttributeSet!, int, int);
    method public int getMaxEmojiCount();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class EmojiExtractEditText {
    ctor public EmojiExtractEditText(android.content.Context!);
    ctor public EmojiExtractEditText(android.content.Context!, android.util.AttributeSet!);
    ctor public EmojiExtractEditText(android.content.Context!, android.util.AttributeSet!, int);
    ctor @RequiresApi(21) public EmojiExtractEditText(android.content.Context!, android.util.AttributeSet!, int, int);
    method public int getEmojiReplaceStrategy();
    method public int getMaxEmojiCount();
    method public android.view.inputmethod.InputConnection! onCreateInputConnection(android.view.inputmethod.EditorInfo!);
    method public void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback!);
    method public void setEmojiReplaceStrategy(int);
    method public void setKeyListener(android.text.method.KeyListener?);
    method public void setMaxEmojiCount(@IntRange(from=0L) int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public class ExtractButtonCompat {
    ctor public ExtractButtonCompat(android.content.Context!);
    ctor public ExtractButtonCompat(android.content.Context!, android.util.AttributeSet!);
    ctor public ExtractButtonCompat(android.content.Context!, android.util.AttributeSet!, int);
    ctor @RequiresApi(api=21) public ExtractButtonCompat(android.content.Context!, android.util.AttributeSet!, int, int);
    method public boolean hasWindowFocus();
    method public void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class SpannableBuilder {
    method public android.text.SpannableStringBuilder! append(CharSequence!);
    method public android.text.SpannableStringBuilder! append(char);
    method public android.text.SpannableStringBuilder! append(CharSequence!, int, int);
    method public android.text.SpannableStringBuilder! append(CharSequence!, Object!, int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void beginBatchEdit();
    method public android.text.SpannableStringBuilder! delete(int, int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public void endBatchEdit();
    method public int getSpanEnd(Object!);
    method public int getSpanFlags(Object!);
    method public int getSpanStart(Object!);
    method public <T> T[]! getSpans(int, int, Class<T>!);
    method public android.text.SpannableStringBuilder! insert(int, CharSequence!);
    method public android.text.SpannableStringBuilder! insert(int, CharSequence!, int, int);
    method public int nextSpanTransition(int, int, Class!);
    method public void removeSpan(Object!);
    method public android.text.SpannableStringBuilder! replace(int, int, CharSequence!);
    method public android.text.SpannableStringBuilder! replace(int, int, CharSequence!, int, int);
    method public void setSpan(Object!, int, int, int);
    method public CharSequence! subSequence(int, int);
  }

}

