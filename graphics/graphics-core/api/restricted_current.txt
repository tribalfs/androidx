// Signature format: 4.0
package androidx.graphics.opengl {

  public final class GLRenderer {
    ctor public GLRenderer(optional kotlin.jvm.functions.Function0<? extends androidx.graphics.opengl.egl.EglSpec> eglSpecFactory, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.egl.EglManager,? extends android.opengl.EGLConfig> eglConfigFactory);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.Surface surface, int width, int height, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.SurfaceView surfaceView, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.TextureView textureView, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public void detach(androidx.graphics.opengl.GLRenderer.RenderTarget target, boolean cancelPending, optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onDetachComplete);
    method public void detach(androidx.graphics.opengl.GLRenderer.RenderTarget target, boolean cancelPending);
    method public boolean isRunning();
    method public void registerEglContextCallback(androidx.graphics.opengl.GLRenderer.EglContextCallback callback);
    method public void requestRender(androidx.graphics.opengl.GLRenderer.RenderTarget target, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onRenderComplete);
    method public void requestRender(androidx.graphics.opengl.GLRenderer.RenderTarget target);
    method public void resize(androidx.graphics.opengl.GLRenderer.RenderTarget target, int width, int height, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onResizeComplete);
    method public void resize(androidx.graphics.opengl.GLRenderer.RenderTarget target, int width, int height);
    method public void start(optional String name);
    method public void start();
    method public void stop(boolean cancelPending, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer,kotlin.Unit>? onStop);
    method public void stop(boolean cancelPending);
    method public void unregisterEglContextCallback(androidx.graphics.opengl.GLRenderer.EglContextCallback callback);
    field public static final androidx.graphics.opengl.GLRenderer.Companion Companion;
  }

  public static final class GLRenderer.Companion {
  }

  public static interface GLRenderer.EglContextCallback {
    method @WorkerThread public void onEglContextCreated(androidx.graphics.opengl.egl.EglManager eglManager);
    method @WorkerThread public void onEglContextDestroyed(androidx.graphics.opengl.egl.EglManager eglManager);
  }

  public static interface GLRenderer.RenderCallback {
    method @WorkerThread public void onDrawFrame(androidx.graphics.opengl.egl.EglManager eglManager);
    method @WorkerThread public default android.opengl.EGLSurface onSurfaceCreated(androidx.graphics.opengl.egl.EglSpec spec, android.opengl.EGLConfig config, android.view.Surface surface, int width, int height);
  }

  public static final class GLRenderer.RenderTarget {
    method public void detach(boolean cancelPending, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onDetachComplete);
    method public void detach(boolean cancelPending);
    method public boolean isAttached();
    method public void requestRender(optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onRenderComplete);
    method public void requestRender();
    method public void resize(int width, int height, optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onResizeComplete);
    method public void resize(int width, int height);
  }

}

package androidx.graphics.opengl.egl {

  public final class EGLExt {
    method public static int eglClientWaitSyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR sync, int flags, long timeoutNanos);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.graphics.opengl.egl.EGLImageKHR? eglCreateImageFromHardwareBuffer(android.opengl.EGLDisplay eglDisplay, android.hardware.HardwareBuffer hardwareBuffer);
    method public static androidx.graphics.opengl.egl.EGLSyncKHR? eglCreateSyncKHR(android.opengl.EGLDisplay eglDisplay, int type, int[]? attributes);
    method public static boolean eglDestroyImageKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLImageKHR image);
    method public static boolean eglDestroySyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR eglSync);
    method @RequiresApi(android.os.Build.VERSION_CODES.KITKAT) public static androidx.hardware.SyncFenceCompat eglDupNativeFenceFDANDROID(android.opengl.EGLDisplay display, androidx.graphics.opengl.egl.EGLSyncKHR sync);
    method public static boolean eglGetSyncAttribKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR sync, int attribute, int[] value, int offset);
    method public static void glEGLImageTargetTexture2DOES(int target, androidx.graphics.opengl.egl.EGLImageKHR image);
    field public static final androidx.graphics.opengl.egl.EGLExt.Companion Companion;
    field public static final int EGL_CONDITION_SATISFIED_KHR = 12534; // 0x30f6
    field public static final int EGL_FALSE = 0; // 0x0
    field public static final long EGL_FOREVER_KHR = -1L; // 0xffffffffffffffffL
    field public static final int EGL_SIGNALED_KHR = 12530; // 0x30f2
    field public static final int EGL_SYNC_CONDITION_KHR = 12536; // 0x30f8
    field public static final int EGL_SYNC_FENCE_KHR = 12537; // 0x30f9
    field public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 1; // 0x1
    field public static final int EGL_SYNC_NATIVE_FENCE_ANDROID = 12612; // 0x3144
    field public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 12528; // 0x30f0
    field public static final int EGL_SYNC_STATUS_KHR = 12529; // 0x30f1
    field public static final int EGL_SYNC_TYPE_KHR = 12535; // 0x30f7
    field public static final int EGL_TIMEOUT_EXPIRED_KHR = 12533; // 0x30f5
    field public static final int EGL_TRUE = 1; // 0x1
    field public static final int EGL_UNSIGNALED_KHR = 12531; // 0x30f3
  }

  public static final class EGLExt.Companion {
    method public int eglClientWaitSyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR sync, int flags, long timeoutNanos);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.graphics.opengl.egl.EGLImageKHR? eglCreateImageFromHardwareBuffer(android.opengl.EGLDisplay eglDisplay, android.hardware.HardwareBuffer hardwareBuffer);
    method public androidx.graphics.opengl.egl.EGLSyncKHR? eglCreateSyncKHR(android.opengl.EGLDisplay eglDisplay, int type, int[]? attributes);
    method public boolean eglDestroyImageKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLImageKHR image);
    method public boolean eglDestroySyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR eglSync);
    method @RequiresApi(android.os.Build.VERSION_CODES.KITKAT) public androidx.hardware.SyncFenceCompat eglDupNativeFenceFDANDROID(android.opengl.EGLDisplay display, androidx.graphics.opengl.egl.EGLSyncKHR sync);
    method public boolean eglGetSyncAttribKHR(android.opengl.EGLDisplay eglDisplay, androidx.graphics.opengl.egl.EGLSyncKHR sync, int attribute, int[] value, int offset);
    method public void glEGLImageTargetTexture2DOES(int target, androidx.graphics.opengl.egl.EGLImageKHR image);
  }

  public interface EGLHandle {
    method public long getNativeHandle();
    property public abstract long nativeHandle;
  }

  public final class EGLImageKHR implements androidx.graphics.opengl.egl.EGLHandle {
    ctor public EGLImageKHR(long nativeHandle);
    method public long getNativeHandle();
    property public long nativeHandle;
  }

  public final class EGLSyncKHR implements androidx.graphics.opengl.egl.EGLHandle {
    ctor public EGLSyncKHR(long nativeHandle);
    method public long getNativeHandle();
    property public long nativeHandle;
  }

  public final inline class EglConfigAttributes {
    ctor public EglConfigAttributes();
  }

  public static final class EglConfigAttributes.Builder {
    ctor @kotlin.PublishedApi internal EglConfigAttributes.Builder();
    method @kotlin.PublishedApi internal int[] build();
    method public void include(int[] attributes);
    method public infix void to(int, int that);
  }

  public final class EglConfigAttributesKt {
    method public static inline int[] EglConfigAttributes(kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.egl.EglConfigAttributes.Builder,kotlin.Unit> block);
    method public static int[] getEglConfigAttributes1010102();
    method public static int[] getEglConfigAttributes8888();
    method public static int[] getEglConfigAttributesF16();
    property public static final int[] EglConfigAttributes1010102;
    property public static final int[] EglConfigAttributes8888;
    property public static final int[] EglConfigAttributesF16;
    field public static final int EglColorComponentTypeExt = 13113; // 0x3339
    field public static final int EglColorComponentTypeFixedExt = 13114; // 0x333a
    field public static final int EglColorComponentTypeFloatExt = 13115; // 0x333b
  }

  public final class EglException extends java.lang.RuntimeException {
    ctor public EglException(int error, optional String msg);
    method public int getError();
    method public String getMsg();
    property public final int error;
    property public String message;
    property public final String msg;
  }

  public final inline class EglExtensions {
    ctor public EglExtensions();
  }

  public static final class EglExtensions.Companion {
    method public java.util.Set<? extends java.lang.String> from(String queryString);
  }

  public final class EglExtensionsKt {
    field public static final String EglAndroidImageNativeBuffer = "EGL_ANDROID_image_native_buffer";
    field public static final String EglAndroidNativeFenceSync = "EGL_ANDROID_native_fence_sync";
    field public static final String EglExtBufferAge = "EGL_EXT_buffer_age";
    field public static final String EglExtColorSpaceDisplayP3Passthrough = "EGL_EXT_gl_colorspace_display_p3_passthrough";
    field public static final String EglExtGlColorSpaceBt2020Pq = "EGL_EXT_gl_colorspace_bt2020_pq";
    field public static final String EglExtGlColorSpaceScRgb = "EGL_EXT_gl_colorspace_scrgb";
    field public static final String EglExtPixelFormatFloat = "EGL_EXT_pixel_format_float";
    field public static final String EglImgContextPriority = "EGL_IMG_context_priority";
    field public static final String EglKhrFenceSync = "EGL_KHR_fence_sync";
    field public static final String EglKhrGlColorSpace = "EGL_KHR_gl_colorspace";
    field public static final String EglKhrImage = "EGL_KHR_image";
    field public static final String EglKhrImageBase = "EGL_KHR_image_base";
    field public static final String EglKhrNoConfigContext = "EGL_KHR_no_config_context";
    field public static final String EglKhrPartialUpdate = "EGL_KHR_partial_update";
    field public static final String EglKhrSurfacelessContext = "EGL_KHR_surfaceless_context";
    field public static final String EglKhrSwapBuffersWithDamage = "EGL_KHR_swap_buffers_with_damage";
    field public static final String EglKhrWaitSync = "EGL_KHR_wait_sync";
  }

  public final class EglManager {
    ctor public EglManager(optional androidx.graphics.opengl.egl.EglSpec eglSpec);
    method public android.opengl.EGLContext createContext(android.opengl.EGLConfig config);
    method public android.opengl.EGLSurface getCurrentDrawSurface();
    method public android.opengl.EGLSurface getCurrentReadSurface();
    method public android.opengl.EGLSurface getDefaultSurface();
    method public android.opengl.EGLConfig? getEglConfig();
    method public android.opengl.EGLContext? getEglContext();
    method public androidx.graphics.opengl.egl.EglSpec getEglSpec();
    method public androidx.graphics.opengl.egl.EglVersion getEglVersion();
    method public void initialize();
    method public boolean isExtensionSupported(String extensionName);
    method public android.opengl.EGLConfig? loadConfig(int[] configAttributes);
    method public boolean makeCurrent(android.opengl.EGLSurface drawSurface, optional android.opengl.EGLSurface readSurface);
    method public boolean makeCurrent(android.opengl.EGLSurface drawSurface);
    method public void release();
    method public void swapAndFlushBuffers();
    property public final android.opengl.EGLSurface currentDrawSurface;
    property public final android.opengl.EGLSurface currentReadSurface;
    property public final android.opengl.EGLSurface defaultSurface;
    property public final android.opengl.EGLConfig? eglConfig;
    property public final android.opengl.EGLContext? eglContext;
    property public final androidx.graphics.opengl.egl.EglSpec eglSpec;
    property public final androidx.graphics.opengl.egl.EglVersion eglVersion;
    field public static final androidx.graphics.opengl.egl.EglManager.Companion Companion;
  }

  public static final class EglManager.Companion {
  }

  public interface EglSpec {
    method public android.opengl.EGLContext eglCreateContext(android.opengl.EGLConfig config);
    method public android.opengl.EGLSurface eglCreatePBufferSurface(android.opengl.EGLConfig config, int[]? configAttributes);
    method public android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLConfig config, android.view.Surface surface, int[]? configAttributes);
    method public void eglDestroyContext(android.opengl.EGLContext eglContext);
    method public boolean eglDestroySurface(android.opengl.EGLSurface surface);
    method public android.opengl.EGLSurface eglGetCurrentDrawSurface();
    method public android.opengl.EGLSurface eglGetCurrentReadSurface();
    method public int eglGetError();
    method public androidx.graphics.opengl.egl.EglVersion eglInitialize();
    method public boolean eglMakeCurrent(android.opengl.EGLContext context, android.opengl.EGLSurface drawSurface, android.opengl.EGLSurface readSurface);
    method public String eglQueryString(int nameId);
    method public boolean eglQuerySurface(android.opengl.EGLSurface surface, int attribute, int[] result, int offset);
    method public boolean eglSwapBuffers(android.opengl.EGLSurface surface);
    method public default String getErrorMessage();
    method public default static String getStatusString(int error);
    method public android.opengl.EGLConfig? loadConfig(int[] configAttributes);
    field public static final androidx.graphics.opengl.egl.EglSpec.Companion Companion;
    field public static final androidx.graphics.opengl.egl.EglSpec Egl14;
  }

  public static final class EglSpec.Companion {
    method public String getStatusString(int error);
  }

  public final class EglVersion {
    ctor public EglVersion(int major, int minor);
    method public int component1();
    method public int component2();
    method public androidx.graphics.opengl.egl.EglVersion copy(int major, int minor);
    method public int getMajor();
    method public int getMinor();
    property public final int major;
    property public final int minor;
    field public static final androidx.graphics.opengl.egl.EglVersion.Companion Companion;
    field public static final androidx.graphics.opengl.egl.EglVersion Unknown;
    field public static final androidx.graphics.opengl.egl.EglVersion V14;
    field public static final androidx.graphics.opengl.egl.EglVersion V15;
  }

  public static final class EglVersion.Companion {
  }

}

package androidx.graphics.surface {

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class SurfaceControlCompat {
    method protected void finalize();
  }

  public static final class SurfaceControlCompat.Builder {
    ctor public SurfaceControlCompat.Builder(android.view.Surface surface);
    ctor public SurfaceControlCompat.Builder(androidx.graphics.surface.SurfaceControlCompat surfaceControl);
    method public androidx.graphics.surface.SurfaceControlCompat build();
    method public androidx.graphics.surface.SurfaceControlCompat.Builder setDebugName(String debugName);
  }

  public static final class SurfaceControlCompat.Transaction {
    ctor public SurfaceControlCompat.Transaction();
    method @RequiresApi(android.os.Build.VERSION_CODES.S) public androidx.graphics.surface.SurfaceControlCompat.Transaction addTransactionCommittedListener(java.util.concurrent.Executor executor, androidx.graphics.surface.SurfaceControlCompat.TransactionCommittedListener listener);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction addTransactionCompletedListener(java.util.concurrent.Executor executor, androidx.graphics.surface.SurfaceControlCompat.TransactionCompletedListener listener);
    method public void close();
    method public void commit();
    method public void finalize();
  }

  public static interface SurfaceControlCompat.TransactionCommittedListener {
    method public void onCommit(long latchTimeNanos, long presentTimeNanos);
  }

  public static interface SurfaceControlCompat.TransactionCompletedListener {
    method public void onComplete(long latchTimeNanos, long presentTimeNanos);
  }

}

package androidx.hardware {

  @RequiresApi(android.os.Build.VERSION_CODES.KITKAT) public final class SyncFenceCompat implements java.lang.AutoCloseable {
    ctor public SyncFenceCompat(int fd);
    method public boolean await(long timeoutNanos);
    method public boolean awaitForever();
    method public void close();
    method public long getSignalTime();
    method public boolean isValid();
    field public static final androidx.hardware.SyncFenceCompat.Companion Companion;
    field public static final long SIGNAL_TIME_INVALID = -1L; // 0xffffffffffffffffL
    field public static final long SIGNAL_TIME_PENDING = 9223372036854775807L; // 0x7fffffffffffffffL
  }

  public static final class SyncFenceCompat.Companion {
  }

}

