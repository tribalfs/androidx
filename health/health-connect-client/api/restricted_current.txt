// Signature format: 4.0
package androidx.health.connect.client {

  public interface HealthConnectClient {
    method public suspend Object? aggregate(androidx.health.connect.client.request.AggregateRequest request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.aggregate.AggregationResult>);
    method public suspend Object? aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest request, kotlin.coroutines.Continuation<? super java.util.List<? extends androidx.health.connect.client.aggregate.AggregationResultGroupedByDuration>>);
    method public suspend Object? aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest request, kotlin.coroutines.Continuation<? super java.util.List<? extends androidx.health.connect.client.aggregate.AggregationResultGroupedByPeriod>>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, java.util.List<java.lang.String> uidsList, java.util.List<java.lang.String> clientIdsList, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? deleteRecords(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? getChanges(String changesToken, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ChangesResponse>);
    method public suspend Object? getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest request, kotlin.coroutines.Continuation<? super java.lang.String>);
    method public default static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, optional java.util.List<java.lang.String> packageNames);
    method public default static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context);
    method public androidx.health.connect.client.PermissionController getPermissionController();
    method public suspend Object? insertRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.InsertRecordsResponse>);
    method public default static boolean isAvailable(android.content.Context context, optional java.util.List<java.lang.String> packageNames);
    method public default static boolean isAvailable(android.content.Context context);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecord(kotlin.reflect.KClass<T> recordType, String uid, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordResponse<T>>);
    method public suspend <T extends androidx.health.connect.client.records.Record> Object? readRecords(androidx.health.connect.client.request.ReadRecordsRequest<T> request, kotlin.coroutines.Continuation<? super androidx.health.connect.client.response.ReadRecordsResponse<T>>);
    method public suspend Object? updateRecords(java.util.List<? extends androidx.health.connect.client.records.Record> records, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract androidx.health.connect.client.PermissionController permissionController;
    field public static final androidx.health.connect.client.HealthConnectClient.Companion Companion;
  }

  public static final class HealthConnectClient.Companion {
    method public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, optional java.util.List<java.lang.String> packageNames);
    method public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context);
    method public boolean isAvailable(android.content.Context context, optional java.util.List<java.lang.String> packageNames);
    method public boolean isAvailable(android.content.Context context);
  }

  public interface PermissionController {
    method public suspend Object? getGrantedPermissions(java.util.Set<androidx.health.connect.client.permission.Permission> permissions, kotlin.coroutines.Continuation<? super java.util.Set<? extends androidx.health.connect.client.permission.Permission>>);
    method public suspend Object? revokeAllPermissions(kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package androidx.health.connect.client.aggregate {

  public final class AggregateMetric<T> {
  }

  public final class AggregationResult {
    method public java.util.List<androidx.health.connect.client.metadata.DataOrigin> getDataOrigins();
    method public <T> T? getMetric(androidx.health.connect.client.aggregate.AggregateMetric<T> metric);
    method public boolean hasMetric(androidx.health.connect.client.aggregate.AggregateMetric<?> metric);
    property public final java.util.List<androidx.health.connect.client.metadata.DataOrigin> dataOrigins;
  }

  public final class AggregationResultGroupedByDuration {
    method public java.time.Instant getEndTime();
    method public androidx.health.connect.client.aggregate.AggregationResult getResult();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset getZoneOffset();
    property public final java.time.Instant endTime;
    property public final androidx.health.connect.client.aggregate.AggregationResult result;
    property public final java.time.Instant startTime;
    property public final java.time.ZoneOffset zoneOffset;
  }

  public final class AggregationResultGroupedByPeriod {
    method public java.time.LocalDateTime getEndTime();
    method public androidx.health.connect.client.aggregate.AggregationResult getResult();
    method public java.time.LocalDateTime getStartTime();
    property public final java.time.LocalDateTime endTime;
    property public final androidx.health.connect.client.aggregate.AggregationResult result;
    property public final java.time.LocalDateTime startTime;
  }

}

package androidx.health.connect.client.changes {

  public interface Change {
  }

  public final class DeletionChange implements androidx.health.connect.client.changes.Change {
    method public String getDeletedUid();
    property public final String deletedUid;
  }

  public final class UpsertionChange implements androidx.health.connect.client.changes.Change {
    method public androidx.health.connect.client.records.Record getRecord();
    property public final androidx.health.connect.client.records.Record record;
  }

}

package androidx.health.connect.client.metadata {

  public final class DataOrigin {
    ctor public DataOrigin(String packageName);
    method public String getPackageName();
    property public final String packageName;
  }

  public final class Device {
    ctor public Device(optional String? manufacturer, optional String? model, optional String? type);
    method public String? getManufacturer();
    method public String? getModel();
    method public String? getType();
    property public final String? manufacturer;
    property public final String? model;
    property public final String? type;
  }

  public final class DeviceTypes {
    field public static final String CHEST_STRAP = "CHEST_STRAP";
    field public static final String FITNESS_BAND = "FITNESS_BAND";
    field public static final String HEAD_MOUNTED = "HEAD_MOUNTED";
    field public static final androidx.health.connect.client.metadata.DeviceTypes INSTANCE;
    field public static final String PHONE = "PHONE";
    field public static final String RING = "RING";
    field public static final String SCALE = "SCALE";
    field public static final String SMART_DISPLAY = "SMART_DISPLAY";
    field public static final String UNKNOWN = "UNKNOWN";
    field public static final String WATCH = "WATCH";
  }

  public final class Metadata {
    ctor public Metadata(optional String? uid, optional androidx.health.connect.client.metadata.DataOrigin dataOrigin, optional java.time.Instant lastModifiedTime, optional String? clientId, optional long clientVersion, optional androidx.health.connect.client.metadata.Device? device);
    method public String? getClientId();
    method public long getClientVersion();
    method public androidx.health.connect.client.metadata.DataOrigin getDataOrigin();
    method public androidx.health.connect.client.metadata.Device? getDevice();
    method public java.time.Instant getLastModifiedTime();
    method public String? getUid();
    property public final String? clientId;
    property public final long clientVersion;
    property public final androidx.health.connect.client.metadata.DataOrigin dataOrigin;
    property public final androidx.health.connect.client.metadata.Device? device;
    property public final java.time.Instant lastModifiedTime;
    property public final String? uid;
  }

}

package androidx.health.connect.client.permission {

  public final class HealthDataRequestPermissions extends androidx.activity.result.contract.ActivityResultContract<java.util.Set<? extends androidx.health.connect.client.permission.Permission>,java.util.Set<? extends androidx.health.connect.client.permission.Permission>> {
    ctor public HealthDataRequestPermissions(optional String providerPackageName);
    method public android.content.Intent createIntent(android.content.Context context, java.util.Set<androidx.health.connect.client.permission.Permission> input);
    method public androidx.activity.result.contract.ActivityResultContract.SynchronousResult<java.util.Set<androidx.health.connect.client.permission.Permission>>? getSynchronousResult(android.content.Context context, java.util.Set<androidx.health.connect.client.permission.Permission> input);
    method public java.util.Set<androidx.health.connect.client.permission.Permission> parseResult(int resultCode, android.content.Intent? intent);
  }

  public final class Permission {
    method public static androidx.health.connect.client.permission.Permission createReadPermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    method public static androidx.health.connect.client.permission.Permission createWritePermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    field public static final androidx.health.connect.client.permission.Permission.Companion Companion;
  }

  public static final class Permission.Companion {
    method public androidx.health.connect.client.permission.Permission createReadPermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
    method public androidx.health.connect.client.permission.Permission createWritePermission(kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record> recordType);
  }

}

package androidx.health.connect.client.records {

  public final class ActiveCaloriesBurned implements androidx.health.connect.client.records.IntervalRecord {
    ctor public ActiveCaloriesBurned(double energyKcal, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public double getEnergyKcal();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public final double energyKcal;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> ACTIVE_CALORIES_TOTAL;
    field public static final androidx.health.connect.client.records.ActiveCaloriesBurned.Companion Companion;
  }

  public static final class ActiveCaloriesBurned.Companion {
  }

  public final class ActivitySession implements androidx.health.connect.client.records.IntervalRecord {
    ctor public ActivitySession(String activityType, optional String? title, optional String? notes, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public String getActivityType();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public String? getNotes();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    property public final String activityType;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public final String? notes;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public final String? title;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> ACTIVE_TIME_TOTAL;
    field public static final androidx.health.connect.client.records.ActivitySession.Companion Companion;
  }

  public static final class ActivitySession.Companion {
  }

  public final class ActivityTypes {
    field public static final String BACK_EXTENSION = "back_extension";
    field public static final String BADMINTON = "badminton";
    field public static final String BARBELL_SHOULDER_PRESS = "barbell_shoulder_press";
    field public static final String BASEBALL = "baseball";
    field public static final String BASKETBALL = "basketball";
    field public static final String BENCH_PRESS = "bench_press";
    field public static final String BENCH_SIT_UP = "bench_sit_up";
    field public static final String BIKING = "biking";
    field public static final String BIKING_STATIONARY = "biking_stationary";
    field public static final String BOOT_CAMP = "boot_camp";
    field public static final String BOXING = "boxing";
    field public static final String BURPEE = "burpee";
    field public static final String CALISTHENICS = "calisthenics";
    field public static final String CRICKET = "cricket";
    field public static final String CRUNCH = "crunch";
    field public static final String DANCING = "dancing";
    field public static final String DEADLIFT = "deadlift";
    field public static final String DUMBBELL_CURL_LEFT_ARM = "dumbbell_curl_left_arm";
    field public static final String DUMBBELL_CURL_RIGHT_ARM = "dumbbell_curl_right_arm";
    field public static final String DUMBBELL_FRONT_RAISE = "dumbbell_front_raise";
    field public static final String DUMBBELL_LATERAL_RAISE = "dumbbell_lateral_raise";
    field public static final String DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM = "dumbbell_triceps_extension_left_arm";
    field public static final String DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM = "dumbbell_triceps_extension_right_arm";
    field public static final String DUMBBELL_TRICEPS_EXTENSION_TWO_ARM = "dumbbell_triceps_extension_two_arm";
    field public static final String ELLIPTICAL = "elliptical";
    field public static final String EXERCISE_CLASS = "exercise_class";
    field public static final String FENCING = "fencing";
    field public static final String FOOTBALL_AMERICAN = "football_american";
    field public static final String FOOTBALL_AUSTRALIAN = "football_australian";
    field public static final String FORWARD_TWIST = "forward_twist";
    field public static final String FRISBEE_DISC = "frisbee_disc";
    field public static final String GOLF = "golf";
    field public static final String GUIDED_BREATHING = "guided_breathing";
    field public static final String GYMNASTICS = "gymnastics";
    field public static final String HANDBALL = "handball";
    field public static final String HIGH_INTENSITY_INTERVAL_TRAINING = "high_intensity_interval_training";
    field public static final String HIKING = "hiking";
    field public static final String ICE_HOCKEY = "ice_hockey";
    field public static final String ICE_SKATING = "ice_skating";
    field public static final androidx.health.connect.client.records.ActivityTypes INSTANCE;
    field public static final String JUMPING_JACK = "jumping_jack";
    field public static final String JUMP_ROPE = "jump_rope";
    field public static final String LAT_PULL_DOWN = "lat_pull_down";
    field public static final String LUNGE = "lunge";
    field public static final String MARTIAL_ARTS = "martial_arts";
    field public static final String MEDITATION = "meditation";
    field public static final String PADDLING = "paddling";
    field public static final String PARA_GLIDING = "para_gliding";
    field public static final String PILATES = "pilates";
    field public static final String PLANK = "plank";
    field public static final String RACQUETBALL = "racquetball";
    field public static final String ROCK_CLIMBING = "rock_climbing";
    field public static final String ROLLER_HOCKEY = "roller_hockey";
    field public static final String ROWING = "rowing";
    field public static final String ROWING_MACHINE = "rowing_machine";
    field public static final String RUGBY = "rugby";
    field public static final String RUNNING = "running";
    field public static final String RUNNING_TREADMILL = "running_treadmill";
    field public static final String SAILING = "sailing";
    field public static final String SCUBA_DIVING = "scuba_diving";
    field public static final String SKATING = "skating";
    field public static final String SKIING = "skiing";
    field public static final String SNOWBOARDING = "snowboarding";
    field public static final String SNOWSHOEING = "snowshoeing";
    field public static final String SOCCER = "soccer";
    field public static final String SOFTBALL = "softball";
    field public static final String SQUASH = "squash";
    field public static final String SQUAT = "squat";
    field public static final String STAIR_CLIMBING = "stair_climbing";
    field public static final String STAIR_CLIMBING_MACHINE = "stair_climbing_machine";
    field public static final String STRENGTH_TRAINING = "strength_training";
    field public static final String STRETCHING = "stretching";
    field public static final String SURFING = "surfing";
    field public static final String SWIMMING_OPEN_WATER = "swimming_open_water";
    field public static final String SWIMMING_POOL = "swimming_pool";
    field public static final String TABLE_TENNIS = "table_tennis";
    field public static final String TENNIS = "tennis";
    field public static final String UPPER_TWIST = "upper_twist";
    field public static final String VOLLEYBALL = "volleyball";
    field public static final String WALKING = "walking";
    field public static final String WATER_POLO = "water_polo";
    field public static final String WEIGHTLIFTING = "weightlifting";
    field public static final String WORKOUT = "workout";
    field public static final String YOGA = "yoga";
  }

  public final class BasalMetabolicRate implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public BasalMetabolicRate(double kcalPerDay, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getKcalPerDay();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public final double kcalPerDay;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> BASAL_CALORIES_TOTAL;
    field public static final androidx.health.connect.client.records.BasalMetabolicRate.Companion Companion;
  }

  public static final class BasalMetabolicRate.Companion {
  }

  public final class BloodPressureMeasurementLocations {
    field public static final androidx.health.connect.client.records.BloodPressureMeasurementLocations INSTANCE;
    field public static final String LEFT_UPPER_ARM = "left_upper_arm";
    field public static final String LEFT_WRIST = "left_wrist";
    field public static final String RIGHT_UPPER_ARM = "right_upper_arm";
    field public static final String RIGHT_WRIST = "right_wrist";
  }

  public final class BodyPositions {
    field public static final androidx.health.connect.client.records.BodyPositions INSTANCE;
    field public static final String LYING_DOWN = "lying_down";
    field public static final String RECLINING = "reclining";
    field public static final String SITTING_DOWN = "sitting_down";
    field public static final String STANDING_UP = "standing_up";
  }

  public final class BodyTemperature implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public BodyTemperature(double temperatureDegreesCelsius, optional String? measurementLocation, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public String? getMeasurementLocation();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public double getTemperatureDegreesCelsius();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public final String? measurementLocation;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public final double temperatureDegreesCelsius;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class BodyTemperatureMeasurementLocations {
    field public static final String ARMPIT = "armpit";
    field public static final String EAR = "ear";
    field public static final String FINGER = "finger";
    field public static final String FOREHEAD = "forehead";
    field public static final androidx.health.connect.client.records.BodyTemperatureMeasurementLocations INSTANCE;
    field public static final String MOUTH = "mouth";
    field public static final String RECTUM = "rectum";
    field public static final String TEMPORAL_ARTERY = "temporal_artery";
    field public static final String TOE = "toe";
    field public static final String VAGINA = "vagina";
    field public static final String WRIST = "wrist";
  }

  public final class CyclingPedalingCadence {
    ctor public CyclingPedalingCadence(java.time.Instant time, @FloatRange(from=0.0, to=10000.0) double revolutionsPerMinute);
    method public double getRevolutionsPerMinute();
    method public java.time.Instant getTime();
    property public final double revolutionsPerMinute;
    property public final java.time.Instant time;
  }

  public final class CyclingPedalingCadenceSeries implements androidx.health.connect.client.records.SeriesRecord<androidx.health.connect.client.records.CyclingPedalingCadence> {
    ctor public CyclingPedalingCadenceSeries(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.CyclingPedalingCadence> samples, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.CyclingPedalingCadence> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.CyclingPedalingCadence> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.CyclingPedalingCadenceSeries.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RPM_MIN;
  }

  public static final class CyclingPedalingCadenceSeries.Companion {
  }

  public final class Distance implements androidx.health.connect.client.records.IntervalRecord {
    ctor public Distance(double distanceMeters, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getDistanceMeters();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public final double distanceMeters;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.Distance.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> DISTANCE_TOTAL;
  }

  public static final class Distance.Companion {
  }

  public final class ElevationGained implements androidx.health.connect.client.records.IntervalRecord {
    ctor public ElevationGained(double elevationMeters, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getElevationMeters();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public final double elevationMeters;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.ElevationGained.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> ELEVATION_GAINED_TOTAL;
  }

  public static final class ElevationGained.Companion {
  }

  public final class HeartRate {
    ctor public HeartRate(java.time.Instant time, @IntRange(from=1L, to=300L) long beatsPerMinute);
    method public long getBeatsPerMinute();
    method public java.time.Instant getTime();
    property public final long beatsPerMinute;
    property public final java.time.Instant time;
  }

  public final class HeartRateSeries implements androidx.health.connect.client.records.SeriesRecord<androidx.health.connect.client.records.HeartRate> {
    ctor public HeartRateSeries(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.HeartRate> samples, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.HeartRate> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.HeartRate> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
    field public static final androidx.health.connect.client.records.HeartRateSeries.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> MEASUREMENTS_COUNT;
  }

  public static final class HeartRateSeries.Companion {
  }

  public final class Height implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public Height(double heightMeters, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getHeightMeters();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public final double heightMeters;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.Height.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> HEIGHT_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> HEIGHT_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> HEIGHT_MIN;
  }

  public static final class Height.Companion {
  }

  public final class HipCircumference implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public HipCircumference(double circumferenceMeters, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getCircumferenceMeters();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public final double circumferenceMeters;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
  }

  public final class Hydration implements androidx.health.connect.client.records.IntervalRecord {
    ctor public Hydration(double volumeLiters, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public double getVolumeLiters();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public final double volumeLiters;
    field public static final androidx.health.connect.client.records.Hydration.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VOLUME_TOTAL;
  }

  public static final class Hydration.Companion {
  }

  @kotlin.PublishedApi internal interface InstantaneousRecord extends androidx.health.connect.client.records.Record {
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public abstract java.time.Instant time;
    property public abstract java.time.ZoneOffset? zoneOffset;
  }

  @kotlin.PublishedApi internal interface IntervalRecord extends androidx.health.connect.client.records.Record {
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public abstract java.time.Instant endTime;
    property public abstract java.time.ZoneOffset? endZoneOffset;
    property public abstract java.time.Instant startTime;
    property public abstract java.time.ZoneOffset? startZoneOffset;
  }

  public final class Nutrition implements androidx.health.connect.client.records.IntervalRecord {
    ctor public Nutrition(optional double biotinGrams, optional double caffeineGrams, optional double calciumGrams, optional double kcal, optional double kcalFromFat, optional double chlorideGrams, optional double cholesterolGrams, optional double chromiumGrams, optional double copperGrams, optional double dietaryFiberGrams, optional double folateGrams, optional double folicAcidGrams, optional double iodineGrams, optional double ironGrams, optional double magnesiumGrams, optional double manganeseGrams, optional double molybdenumGrams, optional double monounsaturatedFatGrams, optional double niacinGrams, optional double pantothenicAcidGrams, optional double phosphorusGrams, optional double polyunsaturatedFatGrams, optional double potassiumGrams, optional double proteinGrams, optional double riboflavinGrams, optional double saturatedFatGrams, optional double seleniumGrams, optional double sodiumGrams, optional double sugarGrams, optional double thiaminGrams, optional double totalCarbohydrateGrams, optional double totalFatGrams, optional double transFatGrams, optional double unsaturatedFatGrams, optional double vitaminAGrams, optional double vitaminB12Grams, optional double vitaminB6Grams, optional double vitaminCGrams, optional double vitaminDGrams, optional double vitaminEGrams, optional double vitaminKGrams, optional double zincGrams, optional String? name, optional String? mealType, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public double getBiotinGrams();
    method public double getCaffeineGrams();
    method public double getCalciumGrams();
    method public double getChlorideGrams();
    method public double getCholesterolGrams();
    method public double getChromiumGrams();
    method public double getCopperGrams();
    method public double getDietaryFiberGrams();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public double getFolateGrams();
    method public double getFolicAcidGrams();
    method public double getIodineGrams();
    method public double getIronGrams();
    method public double getKcal();
    method public double getKcalFromFat();
    method public double getMagnesiumGrams();
    method public double getManganeseGrams();
    method public String? getMealType();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public double getMolybdenumGrams();
    method public double getMonounsaturatedFatGrams();
    method public String? getName();
    method public double getNiacinGrams();
    method public double getPantothenicAcidGrams();
    method public double getPhosphorusGrams();
    method public double getPolyunsaturatedFatGrams();
    method public double getPotassiumGrams();
    method public double getProteinGrams();
    method public double getRiboflavinGrams();
    method public double getSaturatedFatGrams();
    method public double getSeleniumGrams();
    method public double getSodiumGrams();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public double getSugarGrams();
    method public double getThiaminGrams();
    method public double getTotalCarbohydrateGrams();
    method public double getTotalFatGrams();
    method public double getTransFatGrams();
    method public double getUnsaturatedFatGrams();
    method public double getVitaminAGrams();
    method public double getVitaminB12Grams();
    method public double getVitaminB6Grams();
    method public double getVitaminCGrams();
    method public double getVitaminDGrams();
    method public double getVitaminEGrams();
    method public double getVitaminKGrams();
    method public double getZincGrams();
    property public final double biotinGrams;
    property public final double caffeineGrams;
    property public final double calciumGrams;
    property public final double chlorideGrams;
    property public final double cholesterolGrams;
    property public final double chromiumGrams;
    property public final double copperGrams;
    property public final double dietaryFiberGrams;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public final double folateGrams;
    property public final double folicAcidGrams;
    property public final double iodineGrams;
    property public final double ironGrams;
    property public final double kcal;
    property public final double kcalFromFat;
    property public final double magnesiumGrams;
    property public final double manganeseGrams;
    property public final String? mealType;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public final double molybdenumGrams;
    property public final double monounsaturatedFatGrams;
    property public final String? name;
    property public final double niacinGrams;
    property public final double pantothenicAcidGrams;
    property public final double phosphorusGrams;
    property public final double polyunsaturatedFatGrams;
    property public final double potassiumGrams;
    property public final double proteinGrams;
    property public final double riboflavinGrams;
    property public final double saturatedFatGrams;
    property public final double seleniumGrams;
    property public final double sodiumGrams;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public final double sugarGrams;
    property public final double thiaminGrams;
    property public final double totalCarbohydrateGrams;
    property public final double totalFatGrams;
    property public final double transFatGrams;
    property public final double unsaturatedFatGrams;
    property public final double vitaminAGrams;
    property public final double vitaminB12Grams;
    property public final double vitaminB6Grams;
    property public final double vitaminCGrams;
    property public final double vitaminDGrams;
    property public final double vitaminEGrams;
    property public final double vitaminKGrams;
    property public final double zincGrams;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> BIOTIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CAFFEINE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CALCIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CALORIES_FROM_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CALORIES_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CHLORIDE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CHOLESTEROL_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CHROMIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> COPPER_TOTAL;
    field public static final androidx.health.connect.client.records.Nutrition.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> DIETARY_FIBER_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> FOLATE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> FOLIC_ACID_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> IODINE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> IRON_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> MAGNESIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> MANGANESE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> MOLYBDENUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> MONOUNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> NIACIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> PANTOTHENIC_ACID_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> PHOSPHORUS_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> POLYUNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> POTASSIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> PROTEIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RIBOFLAVIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SELENIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SODIUM_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SUGAR_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> THIAMIN_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> TOTAL_CARBOHYDRATE_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> TOTAL_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> TRANS_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> UNSATURATED_FAT_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_A_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_B12_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_B6_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_C_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_D_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_E_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> VITAMIN_K_TOTAL;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> ZINC_TOTAL;
  }

  public static final class Nutrition.Companion {
  }

  public final class OvulationTestResults {
    field public static final androidx.health.connect.client.records.OvulationTestResults INSTANCE;
    field public static final String NEGATIVE = "negative";
    field public static final String POSITIVE = "positive";
  }

  public final class Power {
    ctor public Power(java.time.Instant time, @FloatRange(from=0.0, to=100000.0) double watts);
    method public java.time.Instant getTime();
    method public double getWatts();
    property public final java.time.Instant time;
    property public final double watts;
  }

  public final class PowerSeries implements androidx.health.connect.client.records.SeriesRecord<androidx.health.connect.client.records.Power> {
    ctor public PowerSeries(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.Power> samples, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.Power> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.Power> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.PowerSeries.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WATTS_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WATTS_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WATTS_MIN;
  }

  public static final class PowerSeries.Companion {
  }

  public interface Record {
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    property public abstract androidx.health.connect.client.metadata.Metadata metadata;
  }

  public final class RestingHeartRate implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public RestingHeartRate(long beatsPerMinute, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public long getBeatsPerMinute();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public java.time.ZoneOffset? getZoneOffset();
    property public final long beatsPerMinute;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> BPM_MIN;
    field public static final androidx.health.connect.client.records.RestingHeartRate.Companion Companion;
  }

  public static final class RestingHeartRate.Companion {
  }

  @kotlin.PublishedApi internal interface SeriesRecord<T> extends androidx.health.connect.client.records.IntervalRecord {
    method public java.util.List<T> getSamples();
    property public abstract java.util.List<T> samples;
  }

  public final class SleepSession implements androidx.health.connect.client.records.IntervalRecord {
    ctor public SleepSession(optional String? title, optional String? notes, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public String? getNotes();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    method public String? getTitle();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public final String? notes;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    property public final String? title;
    field public static final androidx.health.connect.client.records.SleepSession.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.time.Duration> SLEEP_DURATION_TOTAL;
  }

  public static final class SleepSession.Companion {
  }

  public final class Speed {
    ctor public Speed(java.time.Instant time, @FloatRange(from=0.0, to=1000000.0) double metersPerSecond);
    method public double getMetersPerSecond();
    method public java.time.Instant getTime();
    property public final double metersPerSecond;
    property public final java.time.Instant time;
  }

  public final class SpeedSeries implements androidx.health.connect.client.records.SeriesRecord<androidx.health.connect.client.records.Speed> {
    ctor public SpeedSeries(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.Speed> samples, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.Speed> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.Speed> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.SpeedSeries.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SPEED_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SPEED_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> SPEED_MIN;
  }

  public static final class SpeedSeries.Companion {
  }

  public final class Steps implements androidx.health.connect.client.records.IntervalRecord {
    ctor public Steps(long count, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public long getCount();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public final long count;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
    field public static final androidx.health.connect.client.records.Steps.Companion Companion;
  }

  public static final class Steps.Companion {
  }

  public final class StepsCadence {
    ctor public StepsCadence(java.time.Instant time, @FloatRange(from=0.0, to=10000.0) double rate);
    method public double getRate();
    method public java.time.Instant getTime();
    property public final double rate;
    property public final java.time.Instant time;
  }

  public final class StepsCadenceSeries implements androidx.health.connect.client.records.SeriesRecord<androidx.health.connect.client.records.StepsCadence> {
    ctor public StepsCadenceSeries(java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, java.util.List<androidx.health.connect.client.records.StepsCadence> samples, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.util.List<androidx.health.connect.client.records.StepsCadence> getSamples();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.util.List<androidx.health.connect.client.records.StepsCadence> samples;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.records.StepsCadenceSeries.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> RATE_MIN;
  }

  public static final class StepsCadenceSeries.Companion {
  }

  public final class TotalCaloriesBurned implements androidx.health.connect.client.records.IntervalRecord {
    ctor public TotalCaloriesBurned(double energyKcal, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public double getEnergyKcal();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public final double energyKcal;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> CALORIES_TOTAL;
    field public static final androidx.health.connect.client.records.TotalCaloriesBurned.Companion Companion;
  }

  public static final class TotalCaloriesBurned.Companion {
  }

  public final class Weight implements androidx.health.connect.client.records.InstantaneousRecord {
    ctor public Weight(double weightKg, java.time.Instant time, java.time.ZoneOffset? zoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getTime();
    method public double getWeightKg();
    method public java.time.ZoneOffset? getZoneOffset();
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant time;
    property public final double weightKg;
    property public java.time.ZoneOffset? zoneOffset;
    field public static final androidx.health.connect.client.records.Weight.Companion Companion;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WEIGHT_AVG;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WEIGHT_MAX;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Double> WEIGHT_MIN;
  }

  public static final class Weight.Companion {
  }

  public final class WheelchairPushes implements androidx.health.connect.client.records.IntervalRecord {
    ctor public WheelchairPushes(long count, java.time.Instant startTime, java.time.ZoneOffset? startZoneOffset, java.time.Instant endTime, java.time.ZoneOffset? endZoneOffset, optional androidx.health.connect.client.metadata.Metadata metadata);
    method public long getCount();
    method public java.time.Instant getEndTime();
    method public java.time.ZoneOffset? getEndZoneOffset();
    method public androidx.health.connect.client.metadata.Metadata getMetadata();
    method public java.time.Instant getStartTime();
    method public java.time.ZoneOffset? getStartZoneOffset();
    property public final long count;
    property public java.time.Instant endTime;
    property public java.time.ZoneOffset? endZoneOffset;
    property public androidx.health.connect.client.metadata.Metadata metadata;
    property public java.time.Instant startTime;
    property public java.time.ZoneOffset? startZoneOffset;
    field public static final androidx.health.connect.client.aggregate.AggregateMetric<java.lang.Long> COUNT_TOTAL;
    field public static final androidx.health.connect.client.records.WheelchairPushes.Companion Companion;
  }

  public static final class WheelchairPushes.Companion {
  }

}

package androidx.health.connect.client.request {

  public final class AggregateGroupByDurationRequest {
    ctor public AggregateGroupByDurationRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration timeRangeSlicer, optional java.util.List<androidx.health.connect.client.metadata.DataOrigin> dataOriginFilter);
  }

  public final class AggregateGroupByPeriodRequest {
    ctor public AggregateGroupByPeriodRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period timeRangeSlicer, optional java.util.List<androidx.health.connect.client.metadata.DataOrigin> dataOriginFilter);
  }

  public final class AggregateRequest {
    ctor public AggregateRequest(java.util.Set<? extends androidx.health.connect.client.aggregate.AggregateMetric<?>> metrics, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, optional java.util.List<androidx.health.connect.client.metadata.DataOrigin> dataOriginFilter);
  }

  public final class ChangesTokenRequest {
    ctor public ChangesTokenRequest(java.util.Set<? extends kotlin.reflect.KClass<? extends androidx.health.connect.client.records.Record>> recordTypes, optional java.util.Set<androidx.health.connect.client.metadata.DataOrigin> dataOriginFilters);
  }

  public final class ReadRecordsRequest<T extends androidx.health.connect.client.records.Record> {
    ctor public ReadRecordsRequest(kotlin.reflect.KClass<T> recordType, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, optional java.util.List<androidx.health.connect.client.metadata.DataOrigin> dataOriginFilter, optional boolean ascendingOrder, optional int pageSize, optional String? pageToken);
  }

}

package androidx.health.connect.client.response {

  public final class ChangesResponse {
    method public java.util.List<androidx.health.connect.client.changes.Change> getChanges();
    method public boolean getChangesTokenExpired();
    method public boolean getHasMore();
    method public String getNextChangesToken();
    property public final java.util.List<androidx.health.connect.client.changes.Change> changes;
    property public final boolean changesTokenExpired;
    property public final boolean hasMore;
    property public final String nextChangesToken;
  }

  public final class InsertRecordsResponse {
    method public java.util.List<java.lang.String> getRecordUidsList();
    property public final java.util.List<java.lang.String> recordUidsList;
  }

  public final class ReadRecordResponse<T extends androidx.health.connect.client.records.Record> {
    method public T getRecord();
    property public final T record;
  }

  public final class ReadRecordsResponse<T extends androidx.health.connect.client.records.Record> {
    method public String? getPageToken();
    method public java.util.List<T> getRecords();
    property public final String? pageToken;
    property public final java.util.List<T> records;
  }

}

package androidx.health.connect.client.time {

  public final class TimeRangeFilter {
    method public static androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant startTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime startTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant startTime, java.time.Instant endTime);
    method public static androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime startTime, java.time.LocalDateTime endTime);
    field public static final androidx.health.connect.client.time.TimeRangeFilter.Companion Companion;
  }

  public static final class TimeRangeFilter.Companion {
    method public androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant startTime);
    method public androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime startTime);
    method public androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant startTime, java.time.Instant endTime);
    method public androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime startTime, java.time.LocalDateTime endTime);
  }

}

