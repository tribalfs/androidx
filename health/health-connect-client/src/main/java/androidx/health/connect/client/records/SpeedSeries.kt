/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package androidx.health.connect.client.records

import androidx.annotation.RestrictTo
import androidx.health.connect.client.aggregate.AggregateMetric
import androidx.health.connect.client.metadata.Metadata
import java.time.Instant
import java.time.ZoneOffset

/** Captures the user's speed. Each record represents a series of measurements. */
@RestrictTo(RestrictTo.Scope.LIBRARY) // Will be made public after API reviews
public class SpeedSeries(
    override val startTime: Instant,
    override val startZoneOffset: ZoneOffset?,
    override val endTime: Instant,
    override val endZoneOffset: ZoneOffset?,
    override val samples: List<Speed>,
    override val metadata: Metadata = Metadata.EMPTY,
) : SeriesRecord<Speed> {

    /*
     * Generated by the IDE: Code -> Generate -> "equals() and hashCode()".
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is SpeedSeries) return false

        if (startTime != other.startTime) return false
        if (startZoneOffset != other.startZoneOffset) return false
        if (endTime != other.endTime) return false
        if (endZoneOffset != other.endZoneOffset) return false
        if (samples != other.samples) return false
        if (metadata != other.metadata) return false

        return true
    }

    /*
     * Generated by the IDE: Code -> Generate -> "equals() and hashCode()".
     */
    override fun hashCode(): Int {
        var result = startTime.hashCode()
        result = 31 * result + (startZoneOffset?.hashCode() ?: 0)
        result = 31 * result + endTime.hashCode()
        result = 31 * result + (endZoneOffset?.hashCode() ?: 0)
        result = 31 * result + samples.hashCode()
        result = 31 * result + metadata.hashCode()
        return result
    }

    internal companion object {
        private const val SPEED_TYPE_NAME = "Speed"
        private const val SPEED_FIELD_NAME = "speed"

        /**
         * Metric identifier to retrieve average speed from
         * [androidx.health.connect.client.aggregate.AggregationResult].
         */
        @JvmField
        internal val AVG: AggregateMetric<Double> =
            AggregateMetric.doubleMetric(
                SPEED_TYPE_NAME,
                AggregateMetric.AggregationType.AVERAGE,
                SPEED_FIELD_NAME
            )

        /**
         * Metric identifier to retrieve minimum speed from
         * [androidx.health.connect.client.aggregate.AggregationResult].
         */
        @JvmField
        internal val MIN: AggregateMetric<Double> =
            AggregateMetric.doubleMetric(
                SPEED_TYPE_NAME,
                AggregateMetric.AggregationType.MINIMUM,
                SPEED_FIELD_NAME
            )

        /**
         * Metric identifier to retrieve maximum speed from
         * [androidx.health.connect.client.aggregate.AggregationResult].
         */
        @JvmField
        internal val MAX: AggregateMetric<Double> =
            AggregateMetric.doubleMetric(
                SPEED_TYPE_NAME,
                AggregateMetric.AggregationType.MAXIMUM,
                SPEED_FIELD_NAME
            )
    }
}

/**
 * Represents a single measurement of the speed, a scalar magnitude.
 *
 * @param time The point in time when the measurement was taken.
 * @param metersPerSecond Speed in meters per second. Valid range: 0-1000000.
 *
 * @see SpeedSeries
 */
@RestrictTo(RestrictTo.Scope.LIBRARY) // Will be made public after API reviews
public class Speed(
    val time: Instant,
    val metersPerSecond: Double,
) {

    /*
     * Generated by the IDE: Code -> Generate -> "equals() and hashCode()".
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Speed) return false

        if (time != other.time) return false
        if (metersPerSecond != other.metersPerSecond) return false

        return true
    }

    /*
     * Generated by the IDE: Code -> Generate -> "equals() and hashCode()".
     */
    override fun hashCode(): Int {
        var result = time.hashCode()
        result = 31 * result + metersPerSecond.hashCode()
        return result
    }
}
