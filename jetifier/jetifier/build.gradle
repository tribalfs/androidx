/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

buildscript {
    ext.supportRootFolder = "${project.projectDir}/../../"
    apply from: "$supportRootFolder/buildSrc/repos.gradle"

    ext.kotlin_version = '1.1.3'

    repos.addMavenRepositories(repositories)

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

subprojects {
    group 'android.support.tools.jetifier'

    ext.supportRootFolder = "${project.projectDir}/../../.."

    apply plugin: 'kotlin'
    apply from: "$supportRootFolder/buildSrc/repos.gradle"

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repos.addMavenRepositories(repositories)

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

ext.runningInBuildServer = System.env.DIST_DIR != null && System.env.OUT_DIR != null
def setupOutDirs() {
    /*
     * With the build server you are given two env variables.
     * The OUT_DIR is a temporary directory you can use to put things during the build.
     * The DIST_DIR is where you want to save things from the build.
     *
     * The build server will copy the contents of DIST_DIR to somewhere and make it available.
     */
    if (ext.runningInBuildServer) {
        buildDir = new File(System.env.OUT_DIR + '/gradle/frameworks/support/build')
                .getCanonicalFile()
        project.ext.distDir = new File(System.env.DIST_DIR).getCanonicalFile()

        // the build server should always print out full stack traces for any failures.
        gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
    } else {
        buildDir = file("${ext.supportRootFolder}/../../out/host/gradle/frameworks/support/jetifier/build")
        project.ext.distDir = new File("${ext.supportRootFolder}/../../out/dist")
    }
    subprojects {
        // Change buildDir so that all plugins pick up the new value.
        project.buildDir = new File("$project.parent.buildDir/../$project.name/build")
        project.ext.distDir = new File("${ext.supportRootFolder}/../../out/dist")
    }
}

def configureBuildOnServer() {
    def buildOnServerTask = rootProject.tasks.create("buildOnServer")
    rootProject.tasks.whenTaskAdded { task ->
        if ("build".equals(task.name)) {
            buildOnServerTask.dependsOn task
        }
    }
    subprojects {
        project.tasks.whenTaskAdded { task ->
            if ("fatJar".equals(task.name)) {
                buildOnServerTask.dependsOn task
            }
        }
    }
}

setupOutDirs()
configureBuildOnServer()
