/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

buildscript {
    ext.supportRootFolder = "${project.projectDir}/../.."
    def prebuiltsDir = "${ext.supportRootFolder}/../../prebuilts"
    repositories {
        maven {
            url "${prebuiltsDir}/tools/common/m2/repository"
        }
    }

    ext.kotlin_version = '1.2.0'

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// upload anchor for subprojects to upload their artifacts to the local repo.
task(mainUpload)

subprojects {
    group 'androidx.tools.jetifier'

    ext.supportRootFolder = "${project.projectDir}/../../.."
    def prebuiltsDir = "${ext.supportRootFolder}/../../prebuilts"
    repositories {
        maven {
            url "${prebuiltsDir}/tools/common/m2/repository"
        }
    }

    apply plugin: 'kotlin'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

ext.runningInBuildServer = System.env.DIST_DIR != null && System.env.OUT_DIR != null
def setupOutDirs() {
    /*
     * With the build server you are given two env variables.
     * The OUT_DIR is a temporary directory you can use to put things during the build.
     * The DIST_DIR is where you want to save things from the build.
     *
     * The build server will copy the contents of DIST_DIR to somewhere and make it available.
     */
    if (ext.runningInBuildServer) {
        buildDir = new File(System.env.OUT_DIR + '/gradle/frameworks/support/build')
                .getCanonicalFile()
        project.ext.distDir = new File(System.env.DIST_DIR).getCanonicalFile()
        // the build server does not pass the build number so we infer it from the last folder of
        // the dist path.
        ext.buildNumber = project.ext.distDir.getName()

        // the build server should always print out full stack traces for any failures.
        gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
    } else {
        buildDir = file("${ext.supportRootFolder}/../../out/host/gradle/frameworks/support/jetifier/build")
        project.ext.distDir = new File("${ext.supportRootFolder}/../../out/dist")
        ext.buildNumber = 0
    }

    ext.repoDir = "file://$project.buildDir/repo"

    subprojects {
        // Change buildDir so that all plugins pick up the new value.
        project.buildDir = new File("$project.parent.buildDir/../$project.name/build")
        project.ext.distDir = new File("${ext.supportRootFolder}/../../out/dist")
    }
}

def configureBuildOnServer() {
    def buildOnServerTask = rootProject.tasks.create("buildOnServer")
    rootProject.tasks.whenTaskAdded { task ->
        if ("build".equals(task.name)) {
            buildOnServerTask.dependsOn task
        }
    }
    subprojects {
        project.tasks.whenTaskAdded { task ->
            if ("fatJar".equals(task.name)) {
                buildOnServerTask.dependsOn task
            }
        }
    }
    buildOnServerTask.dependsOn "createArchive"
}

setupOutDirs()
configureBuildOnServer()

// anchor for prepare repo. This is post unzip.
task prepareRepo() {
    description "This task clears the repo folder to ensure that we run a fresh build every" +
            " time we create arhives. Otherwise, snapshots will accumulate in the builds folder."
    doFirst {
        file(rootProject.ext.repoDir).deleteDir()
        file(rootProject.ext.repoDir).mkdirs()
    }
}

task createArchive(type : Zip) {
    description "Creates a maven repository that includes just the libraries compiled in this" +
            " project, without any history from prebuilts."
    from rootProject.ext.repoDir
    destinationDir rootProject.ext.distDir
    into 'm2repository'
    baseName = String.format("top-of-tree-m2repository-%s", project.ext.buildNumber)
    dependsOn mainUpload
}