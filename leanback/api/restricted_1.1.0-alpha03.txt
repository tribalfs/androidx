// Signature format: 3.0
package androidx.leanback.animation {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class LogAccelerateInterpolator implements android.animation.TimeInterpolator {
    ctor public LogAccelerateInterpolator(int, int);
    method public float getInterpolation(float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class LogDecelerateInterpolator implements android.animation.TimeInterpolator {
    ctor public LogDecelerateInterpolator(int, int);
    method public float getInterpolation(float);
  }

}

package androidx.leanback.app {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class BackgroundFragment extends android.app.Fragment {
    ctor public BackgroundFragment();
  }

  @Deprecated public class GuidedStepFragment extends android.app.Fragment implements androidx.leanback.widget.GuidedActionAdapter.FocusListener {
    method @Deprecated public void onGuidedActionFocused(androidx.leanback.widget.GuidedAction!);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setEntranceTransitionType(int);
    field @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int SLIDE_FROM_BOTTOM = 1; // 0x1
    field @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int SLIDE_FROM_SIDE = 0; // 0x0
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static class GuidedStepFragment.DummyFragment extends android.app.Fragment {
    ctor @Deprecated public GuidedStepFragment.DummyFragment();
  }

  public class GuidedStepSupportFragment extends androidx.fragment.app.Fragment implements androidx.leanback.widget.GuidedActionAdapter.FocusListener {
    method public void onGuidedActionFocused(androidx.leanback.widget.GuidedAction!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setEntranceTransitionType(int);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int SLIDE_FROM_BOTTOM = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int SLIDE_FROM_SIDE = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static class GuidedStepSupportFragment.DummyFragment extends androidx.fragment.app.Fragment {
    ctor public GuidedStepSupportFragment.DummyFragment();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PermissionHelper {
    method public static void requestPermissions(android.app.Fragment!, String[]!, int);
  }

  @Deprecated public class PlaybackFragment extends android.app.Fragment {
  }


  public class PlaybackSupportFragment extends androidx.fragment.app.Fragment {
  }


}

package androidx.leanback.media {

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class MediaPlayerGlue extends androidx.leanback.media.PlaybackControlGlue implements androidx.leanback.widget.OnItemViewSelectedListener {
    ctor @Deprecated public MediaPlayerGlue(android.content.Context!);
    ctor @Deprecated public MediaPlayerGlue(android.content.Context!, int[]!, int[]!);
    method @Deprecated public int getCurrentPosition();
    method @Deprecated public int getCurrentSpeedId();
    method @Deprecated public android.graphics.drawable.Drawable! getMediaArt();
    method @Deprecated public int getMediaDuration();
    method @Deprecated public CharSequence! getMediaSubtitle();
    method @Deprecated public CharSequence! getMediaTitle();
    method @Deprecated public long getSupportedActions();
    method @Deprecated public boolean hasValidMedia();
    method @Deprecated public boolean isMediaPlaying();
    method @Deprecated public void onItemSelected(androidx.leanback.widget.Presenter.ViewHolder!, Object!, androidx.leanback.widget.RowPresenter.ViewHolder!, androidx.leanback.widget.Row!);
    method @Deprecated public void release();
    method @Deprecated public void reset();
    method @Deprecated protected void seekTo(int);
    method @Deprecated public void setArtist(String!);
    method @Deprecated public void setCover(android.graphics.drawable.Drawable!);
    method @Deprecated public void setDisplay(android.view.SurfaceHolder!);
    method @Deprecated public boolean setMediaSource(android.net.Uri!);
    method @Deprecated public boolean setMediaSource(String!);
    method @Deprecated public void setMode(int);
    method @Deprecated public void setTitle(String!);
    method @Deprecated public void setVideoUrl(String!);
    field @Deprecated public static final int FAST_FORWARD_REWIND_REPEAT_DELAY = 200; // 0xc8
    field @Deprecated public static final int FAST_FORWARD_REWIND_STEP = 10000; // 0x2710
    field @Deprecated public static final int NO_REPEAT = 0; // 0x0
    field @Deprecated public static final int REPEAT_ALL = 2; // 0x2
    field @Deprecated public static final int REPEAT_ONE = 1; // 0x1
    field @Deprecated protected final androidx.leanback.widget.PlaybackControlsRow.ThumbsDownAction! mThumbsDownAction;
    field @Deprecated protected final androidx.leanback.widget.PlaybackControlsRow.ThumbsUpAction! mThumbsUpAction;
  }

  @IntDef(flag=true, value={androidx.leanback.media.PlaybackBannerControlGlue.ACTION_CUSTOM_LEFT_FIRST, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_SKIP_TO_PREVIOUS, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_REWIND, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_PLAY_PAUSE, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_FAST_FORWARD, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_SKIP_TO_NEXT, androidx.leanback.media.PlaybackBannerControlGlue.ACTION_CUSTOM_RIGHT_FIRST}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackBannerControlGlue.ACTION_ {
  }

  public abstract class PlaybackControlGlue extends androidx.leanback.media.PlaybackGlue implements androidx.leanback.widget.OnActionClickedListener android.view.View.OnKeyListener {
  }

}

package androidx.leanback.system {

  public class Settings {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public boolean isOutlineClippingDisabled();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public boolean preferStaticShadows();
  }

}

package androidx.leanback.transition {

  @RequiresApi(21) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class FadeAndShortSlide extends android.transition.Visibility {
    ctor public FadeAndShortSlide();
    ctor public FadeAndShortSlide(int);
    ctor public FadeAndShortSlide(android.content.Context!, android.util.AttributeSet!);
    method public float getDistance();
    method public void setDistance(float);
    method public void setSlideEdge(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class LeanbackTransitionHelper {
    method public static Object! loadTitleInTransition(android.content.Context!);
    method public static Object! loadTitleOutTransition(android.content.Context!);
  }

  @RequiresApi(21) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ParallaxTransition extends android.transition.Visibility {
    ctor public ParallaxTransition();
    ctor public ParallaxTransition(android.content.Context!, android.util.AttributeSet!);
  }

  @RequiresApi(21) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SlideNoPropagation extends android.transition.Slide {
    ctor public SlideNoPropagation();
    ctor public SlideNoPropagation(int);
    ctor public SlideNoPropagation(android.content.Context!, android.util.AttributeSet!);
  }


  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class TransitionHelper {
    method public static void addSharedElement(android.app.FragmentTransaction!, android.view.View!, String!);
    method public static void addTarget(Object!, android.view.View!);
    method public static void addTransition(Object!, Object!);
    method public static void addTransitionListener(Object!, androidx.leanback.transition.TransitionListener!);
    method public static void beginDelayedTransition(android.view.ViewGroup!, Object!);
    method public static Object! createAutoTransition();
    method public static Object! createChangeBounds(boolean);
    method public static Object! createChangeTransform();
    method public static Object! createDefaultInterpolator(android.content.Context!);
    method public static Object! createFadeAndShortSlide(int);
    method public static Object! createFadeAndShortSlide(int, float);
    method public static Object! createFadeTransition(int);
    method public static Object! createScale();
    method public static Object! createScene(android.view.ViewGroup!, Runnable!);
    method public static Object! createSlide(int);
    method public static Object! createTransitionSet(boolean);
    method public static void exclude(Object!, int, boolean);
    method public static void exclude(Object!, android.view.View!, boolean);
    method public static void excludeChildren(Object!, int, boolean);
    method public static void excludeChildren(Object!, android.view.View!, boolean);
    method public static Object! getEnterTransition(android.view.Window!);
    method public static Object! getExitTransition(android.view.Window!);
    method public static Object! getReenterTransition(android.view.Window!);
    method public static Object! getReturnTransition(android.view.Window!);
    method public static Object! getSharedElementEnterTransition(android.view.Window!);
    method public static Object! getSharedElementExitTransition(android.view.Window!);
    method public static Object! getSharedElementReenterTransition(android.view.Window!);
    method public static Object! getSharedElementReturnTransition(android.view.Window!);
    method public static void include(Object!, int);
    method public static void include(Object!, android.view.View!);
    method public static Object! loadTransition(android.content.Context!, int);
    method public static void removeTransitionListener(Object!, androidx.leanback.transition.TransitionListener!);
    method public static void runTransition(Object!, Object!);
    method public static void setChangeBoundsDefaultStartDelay(Object!, int);
    method public static void setChangeBoundsStartDelay(Object!, android.view.View!, int);
    method public static void setChangeBoundsStartDelay(Object!, int, int);
    method public static void setChangeBoundsStartDelay(Object!, String!, int);
    method public static void setDuration(Object!, long);
    method public static void setEnterTransition(android.view.Window!, Object!);
    method public static void setEnterTransition(android.app.Fragment!, Object!);
    method public static void setEpicenterCallback(Object!, androidx.leanback.transition.TransitionEpicenterCallback!);
    method public static void setExitTransition(android.app.Fragment!, Object!);
    method public static void setInterpolator(Object!, Object!);
    method public static void setReturnTransition(android.view.Window!, Object!);
    method public static void setSharedElementEnterTransition(android.view.Window!, Object!);
    method public static void setSharedElementEnterTransition(android.app.Fragment!, Object!);
    method public static void setSharedElementReturnTransition(android.view.Window!, Object!);
    method public static void setStartDelay(Object!, long);
    method public static void setTransitionGroup(android.view.ViewGroup!, boolean);
    method public static boolean systemSupportsEntranceTransitions();
    field public static final int FADE_IN = 1; // 0x1
    field public static final int FADE_OUT = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class TransitionListener {
    ctor public TransitionListener();
    method public void onTransitionCancel(Object!);
    method public void onTransitionEnd(Object!);
    method public void onTransitionPause(Object!);
    method public void onTransitionResume(Object!);
    method public void onTransitionStart(Object!);
    field protected Object! mImpl;
  }

}

package androidx.leanback.util {


  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class StateMachine {
    ctor public StateMachine();
    method public void addState(androidx.leanback.util.StateMachine.State!);
    method public void addTransition(androidx.leanback.util.StateMachine.State!, androidx.leanback.util.StateMachine.State!, androidx.leanback.util.StateMachine.Event!);
    method public void addTransition(androidx.leanback.util.StateMachine.State!, androidx.leanback.util.StateMachine.State!, androidx.leanback.util.StateMachine.Condition!);
    method public void addTransition(androidx.leanback.util.StateMachine.State!, androidx.leanback.util.StateMachine.State!);
    method public void fireEvent(androidx.leanback.util.StateMachine.Event!);
    method public void reset();
    method public void start();
    field public static final int STATUS_INVOKED = 1; // 0x1
    field public static final int STATUS_ZERO = 0; // 0x0
  }

  public static class StateMachine.Condition {
    ctor public StateMachine.Condition(String!);
    method public boolean canProceed();
  }

  public static class StateMachine.Event {
    ctor public StateMachine.Event(String!);
  }

  public static class StateMachine.State {
    ctor public StateMachine.State(String!);
    ctor public StateMachine.State(String!, boolean, boolean);
    method public final int getStatus();
    method public void run();
  }

}

package androidx.leanback.widget {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class BackgroundHelper {
    method public static void setBackgroundPreservingAlpha(android.view.View!, android.graphics.drawable.Drawable!);
  }

  public abstract class BaseGridView extends androidx.recyclerview.widget.RecyclerView {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getExtraLayoutSpace();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getFocusScrollStrategy();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public int getSelectedSubPosition();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setExtraLayoutSpace(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setFocusScrollStrategy(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setSelectedPositionSmoothWithSub(int, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setSelectedPositionWithSub(int, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setSelectedPositionWithSub(int, int, int);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int FOCUS_SCROLL_ALIGNED = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int FOCUS_SCROLL_ITEM = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final int FOCUS_SCROLL_PAGE = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class BrowseRowsFrameLayout extends android.widget.FrameLayout {
    ctor public BrowseRowsFrameLayout(android.content.Context!);
    ctor public BrowseRowsFrameLayout(android.content.Context!, android.util.AttributeSet!);
    ctor public BrowseRowsFrameLayout(android.content.Context!, android.util.AttributeSet!, int);
  }


  public class DividerPresenter extends androidx.leanback.widget.Presenter {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public DividerPresenter(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class GuidedActionAdapter extends androidx.recyclerview.widget.RecyclerView.Adapter {
    ctor public GuidedActionAdapter(java.util.List<androidx.leanback.widget.GuidedAction>!, androidx.leanback.widget.GuidedActionAdapter.ClickListener!, androidx.leanback.widget.GuidedActionAdapter.FocusListener!, androidx.leanback.widget.GuidedActionsStylist!, boolean);
    method public androidx.leanback.widget.GuidedActionsStylist.ViewHolder! findSubChildViewHolder(android.view.View!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public java.util.List<androidx.leanback.widget.GuidedAction>! getActions();
    method public int getCount();
    method public androidx.leanback.widget.GuidedActionsStylist! getGuidedActionsStylist();
    method public androidx.leanback.widget.GuidedAction! getItem(int);
    method public int getItemCount();
    method public void handleCheckedActions(androidx.leanback.widget.GuidedActionsStylist.ViewHolder!);
    method public int indexOf(androidx.leanback.widget.GuidedAction!);
    method public void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder!, int);
    method public androidx.recyclerview.widget.RecyclerView.ViewHolder! onCreateViewHolder(android.view.ViewGroup!, int);
    method public void performOnActionClick(androidx.leanback.widget.GuidedActionsStylist.ViewHolder!);
    method public void setActions(java.util.List<androidx.leanback.widget.GuidedAction>!);
    method public void setClickListener(androidx.leanback.widget.GuidedActionAdapter.ClickListener!);
    method public void setDiffCallback(androidx.leanback.widget.DiffCallback<androidx.leanback.widget.GuidedAction>!);
    method public void setFocusListener(androidx.leanback.widget.GuidedActionAdapter.FocusListener!);
  }

  public static interface GuidedActionAdapter.ClickListener {
    method public void onGuidedActionClicked(androidx.leanback.widget.GuidedAction!);
  }

  public static interface GuidedActionAdapter.EditListener {
    method public void onGuidedActionEditCanceled(androidx.leanback.widget.GuidedAction!);
    method public long onGuidedActionEditedAndProceed(androidx.leanback.widget.GuidedAction!);
    method public void onImeClose();
    method public void onImeOpen();
  }

  public static interface GuidedActionAdapter.FocusListener {
    method public void onGuidedActionFocused(androidx.leanback.widget.GuidedAction!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class GuidedActionAdapterGroup {
    ctor public GuidedActionAdapterGroup();
    method public void addAdpter(androidx.leanback.widget.GuidedActionAdapter!, androidx.leanback.widget.GuidedActionAdapter!);
    method public void closeIme(android.view.View!);
    method public void fillAndGoNext(androidx.leanback.widget.GuidedActionAdapter!, android.widget.TextView!);
    method public void fillAndStay(androidx.leanback.widget.GuidedActionAdapter!, android.widget.TextView!);
    method public androidx.leanback.widget.GuidedActionAdapter! getNextAdapter(androidx.leanback.widget.GuidedActionAdapter!);
    method public void openIme(androidx.leanback.widget.GuidedActionAdapter!, androidx.leanback.widget.GuidedActionsStylist.ViewHolder!);
    method public void setEditListener(androidx.leanback.widget.GuidedActionAdapter.EditListener!);
  }

  public class GuidedActionsStylist implements androidx.leanback.widget.FragmentAnimationProvider {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void setEditListener(androidx.leanback.widget.GuidedActionAdapter.EditListener!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class InvisibleRowPresenter extends androidx.leanback.widget.RowPresenter {
    ctor public InvisibleRowPresenter();
    method protected androidx.leanback.widget.RowPresenter.ViewHolder! createRowViewHolder(android.view.ViewGroup!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class MediaNowPlayingView extends android.widget.LinearLayout {
    ctor public MediaNowPlayingView(android.content.Context!, android.util.AttributeSet!);
    field protected final android.view.animation.LinearInterpolator! mLinearInterpolator;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class NonOverlappingLinearLayout extends android.widget.LinearLayout {
    ctor public NonOverlappingLinearLayout(android.content.Context!);
    ctor public NonOverlappingLinearLayout(android.content.Context!, android.util.AttributeSet!);
    ctor public NonOverlappingLinearLayout(android.content.Context!, android.util.AttributeSet!, int);
    method public void setFocusableViewAvailableFixEnabled(boolean);
  }

  public abstract class ObjectAdapter {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final boolean hasObserver();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PagingIndicator extends android.view.View {
    ctor public PagingIndicator(android.content.Context!);
    ctor public PagingIndicator(android.content.Context!, android.util.AttributeSet!);
    ctor public PagingIndicator(android.content.Context!, android.util.AttributeSet!, int);
    method public void onPageSelected(int, boolean);
    method public void setArrowBackgroundColor(@ColorInt int);
    method public void setArrowColor(@ColorInt int);
    method public void setDotBackgroundColor(@ColorInt int);
    method public void setPageCount(int);
  }

  public class PagingIndicator.Dot {
    ctor public PagingIndicator.Dot();
    method public void adjustAlpha();
    method public float getAlpha();
    method public float getDiameter();
    method public float getTranslationX();
    method public void setAlpha(float);
    method public void setDiameter(float);
    method public void setTranslationX(float);
  }

  public abstract class ParallaxEffect {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class PlaybackTransportRowView extends android.widget.LinearLayout {
    ctor public PlaybackTransportRowView(android.content.Context!, android.util.AttributeSet!);
    ctor public PlaybackTransportRowView(android.content.Context!, android.util.AttributeSet!, int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static interface PlaybackTransportRowView.OnUnhandledKeyListener {
    method public boolean onUnhandledKey(android.view.KeyEvent!);
  }

  public class RowHeaderPresenter extends androidx.leanback.widget.Presenter {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public RowHeaderPresenter(int);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public RowHeaderPresenter(int, boolean);
  }

  public static class RowHeaderPresenter.ViewHolder extends androidx.leanback.widget.Presenter.ViewHolder {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public RowHeaderPresenter.ViewHolder(androidx.leanback.widget.RowHeaderView!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ScaleFrameLayout extends android.widget.FrameLayout {
    ctor public ScaleFrameLayout(android.content.Context!);
    ctor public ScaleFrameLayout(android.content.Context!, android.util.AttributeSet!);
    ctor public ScaleFrameLayout(android.content.Context!, android.util.AttributeSet!, int);
    method public void setChildScale(float);
    method public void setLayoutScaleX(float);
    method public void setLayoutScaleY(float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SeekBar extends android.view.View {
    ctor public SeekBar(android.content.Context!, android.util.AttributeSet!);
    method public int getMax();
    method public int getProgress();
    method public int getSecondProgress();
    method public int getSecondaryProgressColor();
    method public void setAccessibilitySeekListener(androidx.leanback.widget.SeekBar.AccessibilitySeekListener!);
    method public void setActiveBarHeight(int);
    method public void setActiveRadius(int);
    method public void setBarHeight(int);
    method public void setMax(int);
    method public void setProgress(int);
    method public void setProgressColor(int);
    method public void setSecondaryProgress(int);
    method public void setSecondaryProgressColor(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract static class SeekBar.AccessibilitySeekListener {
    ctor public SeekBar.AccessibilitySeekListener();
    method public abstract boolean onAccessibilitySeekBackward();
    method public abstract boolean onAccessibilitySeekForward();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ThumbsBar extends android.widget.LinearLayout {
    ctor public ThumbsBar(android.content.Context!, android.util.AttributeSet!);
    ctor public ThumbsBar(android.content.Context!, android.util.AttributeSet!, int);
    method public void clearThumbBitmaps();
    method protected android.view.View! createThumbView(android.view.ViewGroup!);
    method public int getHeroIndex();
    method public android.graphics.Bitmap! getThumbBitmap(int);
    method public void setHeroThumbSize(int, int);
    method public void setNumberOfThumbs(int);
    method public void setThumbBitmap(int, android.graphics.Bitmap!);
    method public void setThumbSize(int, int);
    method public void setThumbSpace(int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class Util {
    method public static boolean isDescendant(android.view.ViewGroup!, android.view.View!);
  }


  @IntDef({android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public @interface Visibility {
  }

}

