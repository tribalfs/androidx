<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.3.0-alpha07" type="baseline" client="gradle" dependencies="false" name="AGP (7.3.0-alpha07)" variant="all" version="7.3.0-alpha07">

    <issue
        id="BanUncheckedReflection"
        message="Calling `Method.invoke` without an SDK check"
        errorLine1="                        mMethod.invoke(target);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/ClassesInfoCache.java"/>
    </issue>

    <issue
        id="BanUncheckedReflection"
        message="Calling `Method.invoke` without an SDK check"
        errorLine1="                        mMethod.invoke(target, source);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/ClassesInfoCache.java"/>
    </issue>

    <issue
        id="BanUncheckedReflection"
        message="Calling `Method.invoke` without an SDK check"
        errorLine1="                        mMethod.invoke(target, source, event);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/ClassesInfoCache.java"/>
    </issue>

    <issue
        id="LambdaLast"
        message="Functional interface parameters (such as parameter 1, &quot;source&quot;, in androidx.lifecycle.GeneratedAdapter.callMethods) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions"
        errorLine1="            MethodCallsLogger logger);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/GeneratedAdapter.java"/>
    </issue>

    <issue
        id="LambdaLast"
        message="Functional interface parameters (such as parameter 1, &quot;source&quot;, in androidx.lifecycle.LifecycleEventObserver.onStateChanged) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions"
        errorLine1="    void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event);"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleEventObserver.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    void callMethods(LifecycleOwner source, Lifecycle.Event event, boolean onAny,"
        errorLine2="                     ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/GeneratedAdapter.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    void callMethods(LifecycleOwner source, Lifecycle.Event event, boolean onAny,"
        errorLine2="                                            ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/GeneratedAdapter.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="            MethodCallsLogger logger);"
        errorLine2="            ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/GeneratedAdapter.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public static String getAdapterName(String className) {"
        errorLine2="                  ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/Lifecycling.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public static String getAdapterName(String className) {"
        errorLine2="                                        ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/Lifecycling.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public boolean approveCall(String name, int type) {"
        errorLine2="                               ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/MethodCallsLogger.java"/>
    </issue>

</issues>
