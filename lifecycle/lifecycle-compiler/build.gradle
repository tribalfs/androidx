
import static androidx.build.dependencies.DependenciesKt.*
import androidx.build.CompilationTarget
import androidx.build.LibraryGroups
import androidx.build.LibraryVersions
import androidx.build.AndroidXExtension
import androidx.build.Publish

plugins {
    id("AndroidXPlugin")
    id("kotlin")
}

// Temporary hack to stop AS to adding two guavas into test's classpath
configurations.all {
    resolutionStrategy {
        force GUAVA
    }
}

dependencies {
    implementation(project(":lifecycle:lifecycle-common"))
    implementation(KOTLIN_STDLIB)
    implementation(AUTO_COMMON)
    implementation(JAVAPOET)
    testImplementation(GOOGLE_COMPILE_TESTING)
    testImplementation(JSR250)
}

// The following tasks are used to regenerate src/test/test-data/lib/src/test-library.jar
// and is run manually when these jars need updating.
// We actually need to compile :lifecycle:lifecycle-common, but compileJava is easier
tasks.register("compileTestLibrarySource", JavaCompile).configure {
    dependsOn(compileJava)
    source "src/test/test-data/lib/src"
    classpath = project.compileJava.classpath
    destinationDir = new File(project.buildDir, 'test-data/lib/classes')
}

tasks.register("jarTestLibrarySource", Jar).configure {
    dependsOn("compileTestLibrarySource")
    from compileTestLibrarySource.destinationDir
    archiveFileName.set("test-library.jar")
    destinationDirectory.set(file("src/test/test-data/lib/"))
}

androidx {
    name = "Android Lifecycles Compiler"
    toolingProject = true
    publish = Publish.SNAPSHOT_AND_RELEASE
    mavenVersion = LibraryVersions.LIFECYCLE
    mavenGroup = LibraryGroups.LIFECYCLE
    inceptionYear = "2017"
    description = "Android Lifecycles annotation processor"
    compilationTarget = CompilationTarget.HOST
}
