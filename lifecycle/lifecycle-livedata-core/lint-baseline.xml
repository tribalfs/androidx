<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.2.0-alpha15" type="baseline" client="gradle" dependencies="false" name="AGP (8.2.0-alpha15)" variant="all" version="8.2.0-alpha15">

    <issue
        id="RestrictedApi"
        message="SafeIterableMap can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            new SafeIterableMap&lt;>();"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.iteratorWithAdditions can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                                          ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                                                    ~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                                          ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);"
        errorLine2="                                                                    ~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.remove can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper removed = mObservers.remove(observer);"
        errorLine2="                                             ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.remove can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ObserverWrapper removed = mObservers.remove(observer);"
        errorLine2="                                                    ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.getInstance can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);"
        errorLine2="                         ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.postToMainThread can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);"
        errorLine2="                                       ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.postToMainThread can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.size can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        return mObservers.size() > 0;"
        errorLine2="                          ~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.getInstance can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        if (!ArchTaskExecutor.getInstance().isMainThread()) {"
        errorLine2="                              ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="ArchTaskExecutor.isMainThread can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        if (!ArchTaskExecutor.getInstance().isMainThread()) {"
        errorLine2="                                            ~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LiveData.java"/>
    </issue>

</issues>
