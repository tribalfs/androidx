<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.2.0-alpha15" type="baseline" client="gradle" dependencies="false" name="AGP (8.2.0-alpha15)" variant="all" version="8.2.0-alpha15">

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="    private var observerMap = FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState>()"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            observerMap = FastSafeIterableMap()"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.size can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            if (observerMap.size() == 0) {"
        errorLine2="                            ~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.eldest can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            val eldestObserverState = observerMap.eldest()!!.value.state"
        errorLine2="                                                  ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.newest can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            val newestObserverState = observerMap.newest()!!.value.state"
        errorLine2="                                                  ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.ceil can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        val map = observerMap.ceil(observer)"
        errorLine2="                              ~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        val previous = observerMap.putIfAbsent(observer, statefulObserver)"
        errorLine2="                                   ~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        val previous = observerMap.putIfAbsent(observer, statefulObserver)"
        errorLine2="                                               ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.putIfAbsent can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        val previous = observerMap.putIfAbsent(observer, statefulObserver)"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.contains can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        while (statefulObserver.state &lt; targetState &amp;&amp; observerMap.contains(observer)"
        errorLine2="                                                                   ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.remove can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        observerMap.remove(observer)"
        errorLine2="                    ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.remove can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        observerMap.remove(observer)"
        errorLine2="                           ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.size can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            return observerMap.size()"
        errorLine2="                               ~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.iteratorWithAdditions can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            observerMap.iteratorWithAdditions()"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.contains can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            while (observer.state &lt; state &amp;&amp; !newEventOccurred &amp;&amp; observerMap.contains(key)"
        errorLine2="                                                                              ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.descendingIterator can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="        val descendingIterator = observerMap.descendingIterator()"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="FastSafeIterableMap.contains can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            while (observer.state > state &amp;&amp; !newEventOccurred &amp;&amp; observerMap.contains(key)"
        errorLine2="                                                                              ~~~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.eldest can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            if (state &lt; observerMap.eldest()!!.value.state) {"
        errorLine2="                                    ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

    <issue
        id="RestrictedApi"
        message="SafeIterableMap.newest can only be called from within the same library group prefix (referenced groupId=`androidx.arch.core` with prefix androidx.arch from groupId=`androidx.lifecycle`)"
        errorLine1="            val newest = observerMap.newest()"
        errorLine2="                                     ~~~~~~">
        <location
            file="src/main/java/androidx/lifecycle/LifecycleRegistry.kt"/>
    </issue>

</issues>
