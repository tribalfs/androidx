// Signature format: 3.0
package androidx.media2.widget {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class RoutePlayer extends androidx.media2.RemoteSessionPlayer {
    ctor public RoutePlayer(android.content.Context!, androidx.mediarouter.media.MediaRouteSelector!, androidx.mediarouter.media.MediaRouter.RouteInfo!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! addPlaylistItem(int, androidx.media2.MediaItem!);
    method public java.util.concurrent.Future<androidx.media2.SessionPlayer.PlayerResult>! adjustVolume(int);
    method public void close();
    method public androidx.media.AudioAttributesCompat! getAudioAttributes();
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public androidx.media2.MediaItem! getCurrentMediaItem();
    method public int getCurrentMediaItemIndex();
    method public long getCurrentPosition();
    method public long getDuration();
    method public int getMaxVolume();
    method public int getNextMediaItemIndex();
    method public float getPlaybackSpeed();
    method public int getPlayerState();
    method public java.util.List<androidx.media2.MediaItem>! getPlaylist();
    method public androidx.media2.MediaMetadata! getPlaylistMetadata();
    method public int getPreviousMediaItemIndex();
    method public int getRepeatMode();
    method public int getShuffleMode();
    method public int getVolume();
    method public int getVolumeControlType();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! replacePlaylistItem(int, androidx.media2.MediaItem!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setAudioAttributes(androidx.media.AudioAttributesCompat!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setMediaItem(androidx.media2.MediaItem!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setPlaybackSpeed(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setPlaylist(java.util.List<androidx.media2.MediaItem>!, androidx.media2.MediaMetadata!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! setShuffleMode(int);
    method public java.util.concurrent.Future<androidx.media2.SessionPlayer.PlayerResult>! setVolume(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! skipToNextPlaylistItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! skipToPreviousPlaylistItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer.PlayerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata!);
  }

  @IntDef({androidx.media2.widget.VideoView.VIEW_TYPE_TEXTUREVIEW, androidx.media2.widget.VideoView.VIEW_TYPE_SURFACEVIEW}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface VideoView.ViewType {
  }

}

