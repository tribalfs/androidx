// Signature format: 3.0
package androidx.media2.common {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface BaseResult {
    method public long getCompletionTime();
    method public androidx.media2.common.MediaItem? getMediaItem();
    method public int getResultCode();
    field public static final int RESULT_ERROR_BAD_VALUE = -3; // 0xfffffffd
    field public static final int RESULT_ERROR_INVALID_STATE = -2; // 0xfffffffe
    field public static final int RESULT_ERROR_IO = -5; // 0xfffffffb
    field public static final int RESULT_ERROR_NOT_SUPPORTED = -6; // 0xfffffffa
    field public static final int RESULT_ERROR_PERMISSION_DENIED = -4; // 0xfffffffc
    field public static final int RESULT_ERROR_UNKNOWN = -1; // 0xffffffff
    field public static final int RESULT_INFO_SKIPPED = 1; // 0x1
    field public static final int RESULT_SUCCESS = 0; // 0x0
  }

  public class FileMediaItem extends androidx.media2.common.MediaItem {
    method @VisibleForTesting @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void close() throws java.io.IOException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void decreaseRefCount();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public void increaseRefCount();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isClosed();
  }

  public class MediaItem extends androidx.versionedparcelable.CustomVersionedParcelable {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addOnMetadataChangedListener(java.util.concurrent.Executor!, androidx.media2.common.MediaItem.OnMetadataChangedListener!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public String? getMediaId();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void removeOnMetadataChangedListener(androidx.media2.common.MediaItem.OnMetadataChangedListener!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface MediaItem.OnMetadataChangedListener {
    method public void onMetadataChanged(androidx.media2.common.MediaItem!);
  }

  public final class MediaMetadata extends androidx.versionedparcelable.CustomVersionedParcelable {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public Object? getObject(String);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final String METADATA_KEY_RADIO_FREQUENCY = "androidx.media2.metadata.RADIO_FREQUENCY";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final String METADATA_KEY_RADIO_PROGRAM_NAME = "androidx.media2.metadata.RADIO_PROGRAM_NAME";
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_ART, androidx.media2.common.MediaMetadata.METADATA_KEY_ALBUM_ART, androidx.media2.common.MediaMetadata.METADATA_KEY_DISPLAY_ICON}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.BitmapKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_EXTRAS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.BundleKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_RADIO_FREQUENCY}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.FloatKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_DURATION, androidx.media2.common.MediaMetadata.METADATA_KEY_YEAR, androidx.media2.common.MediaMetadata.METADATA_KEY_TRACK_NUMBER, androidx.media2.common.MediaMetadata.METADATA_KEY_NUM_TRACKS, androidx.media2.common.MediaMetadata.METADATA_KEY_DISC_NUMBER, androidx.media2.common.MediaMetadata.METADATA_KEY_BROWSABLE, androidx.media2.common.MediaMetadata.METADATA_KEY_PLAYABLE, androidx.media2.common.MediaMetadata.METADATA_KEY_ADVERTISEMENT, androidx.media2.common.MediaMetadata.METADATA_KEY_DOWNLOAD_STATUS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.LongKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_USER_RATING, androidx.media2.common.MediaMetadata.METADATA_KEY_RATING}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.RatingKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @StringDef({androidx.media2.common.MediaMetadata.METADATA_KEY_TITLE, androidx.media2.common.MediaMetadata.METADATA_KEY_ARTIST, androidx.media2.common.MediaMetadata.METADATA_KEY_ALBUM, androidx.media2.common.MediaMetadata.METADATA_KEY_AUTHOR, androidx.media2.common.MediaMetadata.METADATA_KEY_WRITER, androidx.media2.common.MediaMetadata.METADATA_KEY_COMPOSER, androidx.media2.common.MediaMetadata.METADATA_KEY_COMPILATION, androidx.media2.common.MediaMetadata.METADATA_KEY_DATE, androidx.media2.common.MediaMetadata.METADATA_KEY_GENRE, androidx.media2.common.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, androidx.media2.common.MediaMetadata.METADATA_KEY_ART_URI, androidx.media2.common.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, androidx.media2.common.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, androidx.media2.common.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.common.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.common.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.common.MediaMetadata.METADATA_KEY_MEDIA_ID, androidx.media2.common.MediaMetadata.METADATA_KEY_MEDIA_URI, androidx.media2.common.MediaMetadata.METADATA_KEY_RADIO_PROGRAM_NAME}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata.TextKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class MediaParcelUtils {
    ctor public MediaParcelUtils();
    method public static <T extends androidx.versionedparcelable.VersionedParcelable> T! fromParcelable(androidx.versionedparcelable.ParcelImpl!);
    method public static androidx.versionedparcelable.ParcelImpl! toParcelable(androidx.versionedparcelable.VersionedParcelable!);
    field public static final String TAG = "MediaParcelUtils";
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class ParcelImplListSlice implements android.os.Parcelable {
    ctor public ParcelImplListSlice(java.util.List<androidx.versionedparcelable.ParcelImpl>);
    method public int describeContents();
    method public java.util.List<androidx.versionedparcelable.ParcelImpl> getList();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.media2.common.ParcelImplListSlice>! CREATOR;
  }

  @IntDef({androidx.media2.common.SessionPlayer.BUFFERING_STATE_UNKNOWN, androidx.media2.common.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.common.SessionPlayer.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.common.SessionPlayer.BUFFERING_STATE_COMPLETE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer.BuffState {
  }

  public static class SessionPlayer.PlayerResult implements androidx.media2.common.BaseResult {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static com.google.common.util.concurrent.ListenableFuture<androidx.media2.common.SessionPlayer.PlayerResult>! createFuture(int);
    method public long getCompletionTime();
    method public androidx.media2.common.MediaItem? getMediaItem();
    method @androidx.media2.common.SessionPlayer.PlayerResult.ResultCode public int getResultCode();
  }

  @IntDef(flag=false, value={androidx.media2.common.BaseResult.RESULT_SUCCESS, androidx.media2.common.BaseResult.RESULT_ERROR_UNKNOWN, androidx.media2.common.BaseResult.RESULT_ERROR_INVALID_STATE, androidx.media2.common.BaseResult.RESULT_ERROR_BAD_VALUE, androidx.media2.common.BaseResult.RESULT_ERROR_PERMISSION_DENIED, androidx.media2.common.BaseResult.RESULT_ERROR_IO, androidx.media2.common.BaseResult.RESULT_INFO_SKIPPED}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer.PlayerResult.ResultCode {
  }

  @IntDef({androidx.media2.common.SessionPlayer.PLAYER_STATE_IDLE, androidx.media2.common.SessionPlayer.PLAYER_STATE_PAUSED, androidx.media2.common.SessionPlayer.PLAYER_STATE_PLAYING, androidx.media2.common.SessionPlayer.PLAYER_STATE_ERROR}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer.PlayerState {
  }

  @IntDef({androidx.media2.common.SessionPlayer.REPEAT_MODE_NONE, androidx.media2.common.SessionPlayer.REPEAT_MODE_ONE, androidx.media2.common.SessionPlayer.REPEAT_MODE_ALL, androidx.media2.common.SessionPlayer.REPEAT_MODE_GROUP}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer.RepeatMode {
  }

  @IntDef({androidx.media2.common.SessionPlayer.SHUFFLE_MODE_NONE, androidx.media2.common.SessionPlayer.SHUFFLE_MODE_ALL, androidx.media2.common.SessionPlayer.SHUFFLE_MODE_GROUP}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer.ShuffleMode {
  }

}

