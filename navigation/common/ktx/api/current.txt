package androidx.navigation {

  public final class AnimBuilder {
    ctor public AnimBuilder();
    method public int getEnter();
    method public int getExit();
    method public int getPopEnter();
    method public int getPopExit();
    method public void setEnter(int p);
    method public void setExit(int p);
    method public void setPopEnter(int p);
    method public void setPopExit(int p);
  }

  public final class NavActionBuilder {
    ctor public NavActionBuilder();
    method public int getDestinationId();
    method public void navOptions(kotlin.jvm.functions.Function1<? super androidx.navigation.NavOptionsBuilder,kotlin.Unit> block);
    method public void setDestinationId(int p);
  }

  public class NavDestinationBuilder<D extends androidx.navigation.NavDestination> {
    ctor public NavDestinationBuilder(androidx.navigation.Navigator<? extends D> navigator, @IdRes int id);
    method public final void action(int actionId, kotlin.jvm.functions.Function1<? super androidx.navigation.NavActionBuilder,kotlin.Unit> block);
    method public D build();
    method public final void deepLink(String uriPattern);
    method public final android.os.Bundle? getDefaultArguments();
    method public final int getId();
    method public final CharSequence? getLabel();
    method protected final androidx.navigation.Navigator<? extends D> getNavigator();
    method public final void setDefaultArguments(android.os.Bundle? p);
    method public final void setLabel(CharSequence? p);
  }

  public @interface NavDestinationDsl {
  }

  public final class NavGraphBuilder extends androidx.navigation.NavDestinationBuilder<androidx.navigation.NavGraph> {
    ctor public NavGraphBuilder(androidx.navigation.NavigatorProvider provider, @IdRes int id, @IdRes int startDestination);
    method public void addDestination(androidx.navigation.NavDestination destination);
    method public androidx.navigation.NavGraph build();
    method public <D extends androidx.navigation.NavDestination> void destination(androidx.navigation.NavDestinationBuilder<? extends D> navDestination);
    method public androidx.navigation.NavigatorProvider getProvider();
    method public operator void unaryPlus(androidx.navigation.NavDestination);
  }

  public final class NavGraphBuilderKt {
    ctor public NavGraphBuilderKt();
    method public static androidx.navigation.NavGraph navigation(androidx.navigation.NavigatorProvider, @IdRes int id = "0", @IdRes int startDestination, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> block);
    method public static void navigation(androidx.navigation.NavGraphBuilder, @IdRes int id, @IdRes int startDestination, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> block);
  }

  public final class NavGraphKt {
    ctor public NavGraphKt();
    method public static operator boolean contains(androidx.navigation.NavGraph, @IdRes int id);
    method public static operator androidx.navigation.NavDestination get(androidx.navigation.NavGraph, @IdRes int id);
    method public static operator void minusAssign(androidx.navigation.NavGraph, androidx.navigation.NavDestination node);
    method public static operator void plusAssign(androidx.navigation.NavGraph, androidx.navigation.NavDestination node);
    method public static operator void plusAssign(androidx.navigation.NavGraph, androidx.navigation.NavGraph other);
  }

  public final class NavOptionsBuilder {
    ctor public NavOptionsBuilder();
    method public void anim(kotlin.jvm.functions.Function1<? super androidx.navigation.AnimBuilder,kotlin.Unit> block);
    method deprecated public boolean getClearTask();
    method deprecated public boolean getLaunchDocument();
    method public boolean getLaunchSingleTop();
    method public int getPopUpTo();
    method public void popUpTo(@IdRes int id, kotlin.jvm.functions.Function1<? super androidx.navigation.PopUpToBuilder,kotlin.Unit> block);
    method deprecated public void setClearTask(boolean p);
    method deprecated public void setLaunchDocument(boolean p);
    method public void setLaunchSingleTop(boolean p);
    method public void setPopUpTo(int value);
  }

  public final class NavOptionsBuilderKt {
    ctor public NavOptionsBuilderKt();
    method public static androidx.navigation.NavOptions navOptions(kotlin.jvm.functions.Function1<? super androidx.navigation.NavOptionsBuilder,kotlin.Unit> block);
  }

  public @interface NavOptionsDsl {
  }

  public final class NavigatorProviderKt {
    ctor public NavigatorProviderKt();
    method public static operator <D extends androidx.navigation.NavDestination, T extends androidx.navigation.Navigator<D>> T get(androidx.navigation.NavigatorProvider, String name);
    method public static operator <D extends androidx.navigation.NavDestination, T extends androidx.navigation.Navigator<D>> T get(androidx.navigation.NavigatorProvider, kotlin.reflect.KClass<T> clazz);
    method public static operator <D extends androidx.navigation.NavDestination> void plusAssign(androidx.navigation.NavigatorProvider, androidx.navigation.Navigator<D> navigator);
    method public static operator <D extends androidx.navigation.NavDestination> androidx.navigation.Navigator<? extends androidx.navigation.NavDestination>? set(androidx.navigation.NavigatorProvider, String name, androidx.navigation.Navigator<D> navigator);
  }

  public final class PopUpToBuilder {
    ctor public PopUpToBuilder();
    method public boolean getInclusive();
    method public void setInclusive(boolean p);
  }

}

