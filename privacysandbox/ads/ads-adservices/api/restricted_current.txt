// Signature format: 4.0
package androidx.privacysandbox.ads.adservices.measurement {

  public final class DeletionRequest {
    ctor public DeletionRequest(androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode deletionMode, java.util.List<? extends android.net.Uri> domainUris, java.util.List<? extends android.net.Uri> originUris, java.time.Instant start, java.time.Instant end, androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior matchBehavior);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode getDeletionMode();
    method public java.util.List<android.net.Uri> getDomainUris();
    method public java.time.Instant getEnd();
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior getMatchBehavior();
    method public java.util.List<android.net.Uri> getOriginUris();
    method public java.time.Instant getStart();
    property public final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode deletionMode;
    property public final java.util.List<android.net.Uri> domainUris;
    property public final java.time.Instant end;
    property public final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior matchBehavior;
    property public final java.util.List<android.net.Uri> originUris;
    property public final java.time.Instant start;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.TIRAMISU) public static final class DeletionRequest.Builder {
    ctor public DeletionRequest.Builder(optional androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode deletionMode, optional java.time.Instant start, optional java.time.Instant end, optional androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior matchBehavior);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest build();
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setDomainUris(java.util.List<? extends android.net.Uri> domainUris);
    method public androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.Builder setOriginUris(java.util.List<? extends android.net.Uri> originUris);
  }

  public enum DeletionRequest.DeletionMode {
    method public static androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode[] values();
    enum_constant public static final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode DELETION_MODE_ALL;
    enum_constant public static final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.DeletionMode DELETION_MODE_EXCLUDE_INTERNAL_DATA;
  }

  public enum DeletionRequest.MatchBehavior {
    method public static androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior[] values();
    enum_constant public static final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior MATCH_BEHAVIOR_DELETE;
    enum_constant public static final androidx.privacysandbox.ads.adservices.measurement.DeletionRequest.MatchBehavior MATCH_BEHAVIOR_PRESERVE;
  }

  public abstract class MeasurementManager {
    ctor public MeasurementManager();
    method @DoNotInline public abstract suspend Object? deleteRegistrations(androidx.privacysandbox.ads.adservices.measurement.DeletionRequest deletionRequest, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? getMeasurementApiStatus(kotlin.coroutines.Continuation<? super java.lang.Integer>);
    method public static final androidx.privacysandbox.ads.adservices.measurement.MeasurementManager? obtain(android.content.Context context);
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerSource(android.net.Uri attributionSource, android.view.InputEvent? inputEvent, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerTrigger(android.net.Uri trigger, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerWebSource(androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_ATTRIBUTION) public abstract suspend Object? registerWebTrigger(androidx.privacysandbox.ads.adservices.measurement.WebTriggerRegistrationRequest request, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final androidx.privacysandbox.ads.adservices.measurement.MeasurementManager.Companion Companion;
    field public static final int MEASUREMENT_API_STATE_DISABLED = 0; // 0x0
    field public static final int MEASUREMENT_API_STATE_ENABLED = 1; // 0x1
  }

  public static final class MeasurementManager.Companion {
    method public androidx.privacysandbox.ads.adservices.measurement.MeasurementManager? obtain(android.content.Context context);
  }

  public final class WebSourceParams {
    ctor public WebSourceParams(android.net.Uri registrationUri, boolean debugKeyAllowed);
    method public boolean getDebugKeyAllowed();
    method public android.net.Uri getRegistrationUri();
    property public final boolean debugKeyAllowed;
    property public final android.net.Uri registrationUri;
  }

  public final class WebSourceRegistrationRequest {
    ctor public WebSourceRegistrationRequest(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams, android.net.Uri topOriginUri, optional android.view.InputEvent? inputEvent, optional android.net.Uri? appDestination, optional android.net.Uri? webDestination, optional android.net.Uri? verifiedDestination);
    method public android.net.Uri? getAppDestination();
    method public android.view.InputEvent? getInputEvent();
    method public android.net.Uri getTopOriginUri();
    method public android.net.Uri? getVerifiedDestination();
    method public android.net.Uri? getWebDestination();
    method public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> getWebSourceParams();
    property public final android.net.Uri? appDestination;
    property public final android.view.InputEvent? inputEvent;
    property public final android.net.Uri topOriginUri;
    property public final android.net.Uri? verifiedDestination;
    property public final android.net.Uri? webDestination;
    property public final java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams;
  }

  public static final class WebSourceRegistrationRequest.Builder {
    ctor public WebSourceRegistrationRequest.Builder(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebSourceParams> webSourceParams, android.net.Uri topOriginUri);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest build();
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setAppDestination(android.net.Uri? appDestination);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setInputEvent(android.view.InputEvent inputEvent);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setVerifiedDestination(android.net.Uri? verifiedDestination);
    method public androidx.privacysandbox.ads.adservices.measurement.WebSourceRegistrationRequest.Builder setWebDestination(android.net.Uri? webDestination);
  }

  public final class WebTriggerParams {
    ctor public WebTriggerParams(android.net.Uri registrationUri, boolean debugKeyAllowed);
    method public boolean getDebugKeyAllowed();
    method public android.net.Uri getRegistrationUri();
    property public final boolean debugKeyAllowed;
    property public final android.net.Uri registrationUri;
  }

  public final class WebTriggerRegistrationRequest {
    ctor public WebTriggerRegistrationRequest(java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> webTriggerParams, android.net.Uri destination);
    method public android.net.Uri getDestination();
    method public java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> getWebTriggerParams();
    property public final android.net.Uri destination;
    property public final java.util.List<androidx.privacysandbox.ads.adservices.measurement.WebTriggerParams> webTriggerParams;
  }

}

package androidx.privacysandbox.ads.adservices.topics {

  public final class GetTopicsRequest {
    ctor public GetTopicsRequest(optional String sdkName, optional boolean shouldRecordObservation);
    method public String getSdkName();
    method public boolean getShouldRecordObservation();
    property public final String sdkName;
    property public final boolean shouldRecordObservation;
  }

  public static final class GetTopicsRequest.Builder {
    ctor public GetTopicsRequest.Builder();
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest build();
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest.Builder setSdkName(String sdkName);
    method public androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest.Builder setShouldRecordObservation(boolean shouldRecordObservation);
  }

  public final class GetTopicsResponse {
    ctor public GetTopicsResponse(java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> topics);
    method public java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> getTopics();
    property public final java.util.List<androidx.privacysandbox.ads.adservices.topics.Topic> topics;
  }

  public final class Topic {
    ctor public Topic(long taxonomyVersion, long modelVersion, int topicId);
    method public long getModelVersion();
    method public long getTaxonomyVersion();
    method public int getTopicId();
    property public final long modelVersion;
    property public final long taxonomyVersion;
    property public final int topicId;
  }

  public abstract class TopicsManager {
    method @DoNotInline @RequiresPermission(android.adservices.common.AdServicesPermissions.ACCESS_ADSERVICES_TOPICS) public abstract suspend Object? getTopics(androidx.privacysandbox.ads.adservices.topics.GetTopicsRequest request, kotlin.coroutines.Continuation<? super androidx.privacysandbox.ads.adservices.topics.GetTopicsResponse>);
    method public static final androidx.privacysandbox.ads.adservices.topics.TopicsManager? obtain(android.content.Context context);
    field public static final androidx.privacysandbox.ads.adservices.topics.TopicsManager.Companion Companion;
  }

  public static final class TopicsManager.Companion {
    method public androidx.privacysandbox.ads.adservices.topics.TopicsManager? obtain(android.content.Context context);
  }

}

