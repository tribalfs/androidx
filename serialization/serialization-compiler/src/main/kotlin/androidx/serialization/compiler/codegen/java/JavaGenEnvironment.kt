/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package androidx.serialization.compiler.codegen.java

import androidx.serialization.compiler.codegen.CodeGenEnvironment
import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.TypeSpec

/** Code generation environment with [AnnotationSpec] wrappers. */
internal data class JavaGenEnvironment(
    val generatingClassName: String? = null,
    val generated: AnnotationSpec? = null,
    val nonNull: AnnotationSpec? = null,
    val nullable: AnnotationSpec? = null
) {
    fun applyGenerated(typeSpec: TypeSpec.Builder) {
        when {
            generated != null -> typeSpec.addAnnotation(generated)
            generatingClassName != null -> {
                typeSpec.addJavadoc("\nGenerated by \$L. Do not modify.\n", generatingClassName)
            }
        }
    }

    constructor(codeGenEnv: CodeGenEnvironment) : this(
        generatingClassName = codeGenEnv.generatingClassName,

        generated = codeGenEnv.generated?.let { generated ->
            codeGenEnv.generatingClassName?.let { className ->
                AnnotationSpec.builder(ClassName.get(generated.packageName, generated.simpleName))
                    .addMember("value", "\$S", className)
                    .build()
            }
        },

        nonNull = codeGenEnv.nullability?.let {
            AnnotationSpec.builder(ClassName.get(it.packageName, it.nonNull)).build()
        },

        nullable = codeGenEnv.nullability?.let {
            AnnotationSpec.builder(ClassName.get(it.packageName, it.nullable)).build()
        }
    )
}
