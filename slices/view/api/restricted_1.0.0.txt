// Signature format: 3.0
package androidx.slice {

  @RequiresApi(19) public class SliceMetadata {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static java.util.List<androidx.slice.core.SliceAction>? getSliceActions(androidx.slice.Slice);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static @interface SliceMetadata.SliceLoadingState {
  }

  @RequiresApi(19) public class SliceStructure {
    ctor @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public SliceStructure(androidx.slice.SliceItem!);
  }

  @RequiresApi(19) public class SliceUtils {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static androidx.slice.Slice! convert(android.content.Context!, androidx.slice.Slice!, androidx.slice.SliceUtils.SerializeOptions!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static androidx.core.graphics.drawable.IconCompat! convert(android.content.Context!, androidx.core.graphics.drawable.IconCompat!, androidx.slice.SliceUtils.SerializeOptions!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static int getLoadingState(androidx.slice.Slice);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static java.util.List<androidx.slice.SliceItem>? getSliceActions(androidx.slice.Slice);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static java.util.List<java.lang.String>? getSliceKeywords(androidx.slice.Slice);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static void serializeSlice(androidx.slice.Slice, android.content.Context, java.io.OutputStream, String, androidx.slice.SliceUtils.SerializeOptions);
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final int LOADING_ALL = 0; // 0x0
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final int LOADING_COMPLETE = 2; // 0x2
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final int LOADING_PARTIAL = 1; // 0x1
  }

  public static class SliceUtils.SerializeOptions {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void checkThrow(String!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public int getActionMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public android.graphics.Bitmap.CompressFormat! getFormat();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public int getImageMode();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public int getMaxHeight();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public int getMaxWidth();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public int getQuality();
  }

  public static class SliceUtils.SliceParseException {
    ctor @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public SliceUtils.SliceParseException(String!, Throwable!);
    ctor @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public SliceUtils.SliceParseException(String!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public abstract class SliceViewManagerBase extends androidx.slice.SliceViewManager {
    method public void registerSliceCallback(android.net.Uri, androidx.slice.SliceViewManager.SliceCallback);
    method public void registerSliceCallback(android.net.Uri, java.util.concurrent.Executor, androidx.slice.SliceViewManager.SliceCallback);
    method public void unregisterSliceCallback(android.net.Uri, androidx.slice.SliceViewManager.SliceCallback);
    field protected final android.content.Context! mContext;
  }

}

package androidx.slice.widget {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class ActionRow {
    ctor public ActionRow(android.content.Context!, boolean);
    method public void setActions(java.util.List<androidx.slice.core.SliceAction>, int);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static @interface EventInfo.SliceActionType {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static @interface EventInfo.SliceButtonPosition {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static @interface EventInfo.SliceRowType {
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @RequiresApi(19) public class GridContent {
    ctor public GridContent(android.content.Context!, androidx.slice.SliceItem!);
    method public int getActualHeight();
    method public androidx.slice.SliceItem? getColorItem();
    method public CharSequence? getContentDescription();
    method public androidx.slice.SliceItem? getContentIntent();
    method public java.util.ArrayList<androidx.slice.widget.GridContent.CellContent> getGridContent();
    method public int getLargestImageMode();
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getMaxCellLineCount();
    method public androidx.slice.SliceItem? getSeeMoreItem();
    method public int getSmallHeight();
    method public CharSequence? getTitle();
    method public boolean hasImage();
    method public boolean isAllImages();
    method public boolean isValid();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static class GridContent.CellContent {
    ctor public GridContent.CellContent(androidx.slice.SliceItem!);
    method public java.util.ArrayList<androidx.slice.SliceItem>! getCellItems();
    method public CharSequence? getContentDescription();
    method public androidx.slice.SliceItem! getContentIntent();
    method public int getImageMode();
    method public int getTextCount();
    method public androidx.slice.SliceItem? getTitleItem();
    method public boolean hasImage();
    method public boolean isImageOnly();
    method public boolean isValid();
    method public boolean populate(androidx.slice.SliceItem!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class GridRowView extends androidx.slice.widget.SliceChildView {
    ctor public GridRowView(android.content.Context!);
    ctor public GridRowView(android.content.Context!, android.util.AttributeSet!);
    method public void onClick(android.view.View!);
    method protected void onMeasure(int, int);
    method public boolean onTouch(android.view.View!, android.view.MotionEvent!);
    method public void resetView();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class LargeSliceAdapter {
    ctor public LargeSliceAdapter(android.content.Context!);
    method public int getItemCount();
    method public long getItemId(int);
    method public int getItemViewType(int);
    method public java.util.Set<androidx.slice.SliceItem>! getLoadingActions();
    method public void onBindViewHolder(androidx.slice.widget.LargeSliceAdapter.SliceViewHolder!, int);
    method public androidx.slice.widget.LargeSliceAdapter.SliceViewHolder! onCreateViewHolder(android.view.ViewGroup!, int);
    method public void onSliceActionLoading(androidx.slice.SliceItem!, int);
    method public void setAllowTwoLines(boolean);
    method public void setInsets(int, int, int, int);
    method public void setLastUpdated(long);
    method public void setLoadingActions(java.util.Set<androidx.slice.SliceItem>!);
    method public void setMaxSmallHeight(int);
    method public void setParents(androidx.slice.widget.SliceView!, androidx.slice.widget.LargeTemplateView!);
    method public void setShowLastUpdated(boolean);
    method public void setSliceActions(java.util.List<androidx.slice.core.SliceAction>!);
    method public void setSliceItems(java.util.List<androidx.slice.SliceItem>!, int, int);
    method public void setSliceObserver(androidx.slice.widget.SliceView.OnSliceActionListener!);
    method public void setStyle(androidx.slice.widget.SliceStyle!);
  }

  public class LargeSliceAdapter.SliceViewHolder {
    ctor public LargeSliceAdapter.SliceViewHolder(android.view.View!);
    method public void onClick(android.view.View!);
    method public boolean onTouch(android.view.View!, android.view.MotionEvent!);
    field public final androidx.slice.widget.SliceChildView! mSliceChildView;
  }

  protected static class LargeSliceAdapter.SliceWrapper {
    ctor public LargeSliceAdapter.SliceWrapper(androidx.slice.SliceItem!, androidx.slice.widget.LargeSliceAdapter.IdGenerator!, int);
    method public static int getFormat(androidx.slice.SliceItem!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class LargeTemplateView extends androidx.slice.widget.SliceChildView {
    ctor public LargeTemplateView(android.content.Context!);
    method public void onAttachedToWindow();
    method public void onForegroundActivated(android.view.MotionEvent!);
    method protected void onMeasure(int, int);
    method public void resetView();
    method public void setScrollable(boolean);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @RequiresApi(19) public class ListContent {
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!);
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!, androidx.slice.widget.SliceStyle!);
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!, android.util.AttributeSet!, int, int);
    method public androidx.slice.SliceItem? getColorItem();
    method public androidx.slice.SliceItem? getHeaderItem();
    method public int getHeaderTemplateType();
    method public java.util.ArrayList<androidx.slice.SliceItem> getItemsForNonScrollingList(int);
    method public int getLargeHeight(int, boolean);
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getListHeight(java.util.List<androidx.slice.SliceItem>!);
    method public androidx.slice.SliceItem? getPrimaryAction();
    method public java.util.ArrayList<androidx.slice.SliceItem> getRowItems();
    method public static int getRowType(android.content.Context!, androidx.slice.SliceItem!, boolean, java.util.List<androidx.slice.core.SliceAction>!);
    method public androidx.slice.SliceItem? getSeeMoreItem();
    method public androidx.slice.Slice? getSlice();
    method public java.util.List<androidx.slice.core.SliceAction>? getSliceActions();
    method public int getSmallHeight();
    method public boolean hasHeader();
    method public boolean isValid();
    method public static boolean isValidHeader(androidx.slice.SliceItem!);
    method public void setMaxSmallHeight(int);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class MessageView extends androidx.slice.widget.SliceChildView {
    ctor public MessageView(android.content.Context!);
    method protected void onFinishInflate();
    method public void resetView();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(21) public class RemoteInputView {
    ctor public RemoteInputView(android.content.Context!, android.util.AttributeSet!);
    method public void afterTextChanged(android.text.Editable!);
    method public void beforeTextChanged(CharSequence!, int, int, int);
    method public void dispatchFinishTemporaryDetach();
    method public void dispatchStartTemporaryDetach();
    method public void focusAnimated();
    method public static androidx.slice.widget.RemoteInputView! inflate(android.content.Context!, android.view.ViewGroup!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final boolean isConfirmKey(int);
    method public void onClick(android.view.View!);
    method protected void onFinishInflate();
    method public boolean onRequestSendAccessibilityEvent(android.view.View!, android.view.accessibility.AccessibilityEvent!);
    method public void onTextChanged(CharSequence!, int, int, int);
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setAction(androidx.slice.SliceItem!);
    method public void setRemoteInput(android.app.RemoteInput[]!, android.app.RemoteInput!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void setRevealParameters(int, int, int);
    field public static final Object! VIEW_TAG;
  }

  public static class RemoteInputView.RemoteEditText {
    ctor public RemoteInputView.RemoteEditText(android.content.Context!, android.util.AttributeSet!);
    method public void getFocusedRect(android.graphics.Rect!);
    method public void onCommitCompletion(android.view.inputmethod.CompletionInfo!);
    method public android.view.inputmethod.InputConnection! onCreateInputConnection(android.view.inputmethod.EditorInfo!);
    method protected void onFocusChanged(boolean, int, android.graphics.Rect!);
    method public boolean onKeyDown(int, android.view.KeyEvent!);
    method public boolean onKeyUp(int, android.view.KeyEvent!);
    method protected void onVisibilityChanged(android.view.View!, int);
    method public void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback!);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @RequiresApi(19) public class RowContent {
    ctor public RowContent(android.content.Context!, androidx.slice.SliceItem!, boolean);
    method public boolean endItemsContainAction();
    method public int getActualHeight(int);
    method public CharSequence? getContentDescription();
    method public java.util.ArrayList<androidx.slice.SliceItem>! getEndItems();
    method public androidx.slice.SliceItem? getInputRangeThumb();
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getLineCount();
    method public androidx.slice.SliceItem? getPrimaryAction();
    method public androidx.slice.SliceItem? getRange();
    method public androidx.slice.SliceItem getSlice();
    method public int getSmallHeight(int);
    method public androidx.slice.SliceItem? getStartItem();
    method public androidx.slice.SliceItem? getSubtitleItem();
    method public androidx.slice.SliceItem? getSummaryItem();
    method public androidx.slice.SliceItem? getTitleItem();
    method public java.util.ArrayList<androidx.slice.core.SliceAction>! getToggleItems();
    method public boolean isDefaultSeeMore();
    method public boolean isValid();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class RowView extends androidx.slice.widget.SliceChildView {
    ctor public RowView(android.content.Context!);
    method public void onClick(android.view.View!);
    method protected void onLayout(boolean, int, int, int, int);
    method protected void onMeasure(int, int);
    method public void resetView();
    method public void setSingleItem(boolean);
    field protected java.util.Set<androidx.slice.SliceItem>! mLoadingActions;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) @RequiresApi(19) public class ShortcutContent {
    ctor public ShortcutContent(androidx.slice.widget.ListContent);
    method public androidx.slice.Slice! buildSlice(androidx.slice.Slice.Builder!);
    method public androidx.slice.SliceItem! getActionItem();
    method public androidx.slice.SliceItem! getColorItem();
    method public androidx.slice.SliceItem! getIcon();
    method public androidx.slice.SliceItem! getLabel();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class ShortcutView extends androidx.slice.widget.SliceChildView {
    ctor public ShortcutView(android.content.Context!);
    method public boolean performClick();
    method public void resetView();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class SliceActionView {
    ctor public SliceActionView(android.content.Context!);
    method public androidx.slice.core.SliceActionImpl? getAction();
    method public void onCheckedChanged(android.widget.CompoundButton!, boolean);
    method public void onClick(android.view.View!);
    method public void sendAction();
    method public void setAction(androidx.slice.core.SliceActionImpl, androidx.slice.widget.EventInfo!, androidx.slice.widget.SliceView.OnSliceActionListener!, int, androidx.slice.widget.SliceActionView.SliceActionLoadingListener!);
    method public void setLoading(boolean);
    method public void toggle();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public abstract class SliceChildView {
    ctor public SliceChildView(android.content.Context);
    ctor public SliceChildView(android.content.Context!, android.util.AttributeSet!);
    method public int getActualHeight();
    method public java.util.Set<androidx.slice.SliceItem>! getLoadingActions();
    method public int getMode();
    method public int getSmallHeight();
    method public abstract void resetView();
    method public void setActionLoading(androidx.slice.SliceItem!);
    method public void setAllowTwoLines(boolean);
    method public void setInsets(int, int, int, int);
    method public void setLastUpdated(long);
    method public void setLoadingActions(java.util.Set<androidx.slice.SliceItem>!);
    method public void setMaxSmallHeight(int);
    method public void setMode(int);
    method public void setShowLastUpdated(boolean);
    method public void setSliceActionListener(androidx.slice.widget.SliceView.OnSliceActionListener!);
    method public void setSliceActionLoadingListener(androidx.slice.widget.SliceActionView.SliceActionLoadingListener!);
    method public void setSliceActions(java.util.List<androidx.slice.core.SliceAction>!);
    method public void setSliceContent(androidx.slice.widget.ListContent!);
    method public void setSliceItem(androidx.slice.SliceItem!, boolean, int, int, androidx.slice.widget.SliceView.OnSliceActionListener!);
    method public void setStyle(androidx.slice.widget.SliceStyle!);
    method public void setTint(@ColorInt int);
    field protected int mInsetBottom;
    field protected int mInsetEnd;
    field protected int mInsetStart;
    field protected int mInsetTop;
    field protected long mLastUpdated;
    field protected androidx.slice.widget.SliceActionView.SliceActionLoadingListener! mLoadingListener;
    field protected int mMode;
    field protected androidx.slice.widget.SliceView.OnSliceActionListener! mObserver;
    field protected boolean mShowLastUpdated;
    field protected androidx.slice.widget.SliceStyle! mSliceStyle;
    field protected int mTintColor;
  }

  @RequiresApi(19) public final class SliceLiveData {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public static androidx.lifecycle.LiveData<androidx.slice.Slice> fromStream(android.content.Context, androidx.slice.SliceViewManager!, java.io.InputStream, androidx.slice.widget.SliceLiveData.OnErrorListener!);
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final androidx.slice.SliceSpec! OLD_BASIC;
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final androidx.slice.SliceSpec! OLD_LIST;
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final java.util.Set<androidx.slice.SliceSpec>! SUPPORTED_SPECS;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public class SliceStyle {
    ctor public SliceStyle(android.content.Context!, android.util.AttributeSet!, int, int);
    method public int getGridBottomPadding();
    method public int getGridSubtitleSize();
    method public int getGridTitleSize();
    method public int getGridTopPadding();
    method public int getHeaderSubtitleSize();
    method public int getHeaderTitleSize();
    method public int getSubtitleColor();
    method public int getSubtitleSize();
    method public int getTintColor();
    method public int getTitleColor();
    method public int getTitleSize();
    method public int getVerticalGridTextPadding();
    method public int getVerticalHeaderTextPadding();
    method public int getVerticalTextPadding();
    method public void setTintColor(int);
  }

  @RequiresApi(19) public class SliceView {
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public boolean isShowingActionRow();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public boolean isSliceViewClickable();
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static String! modeToString(int);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void setClickInfo(int[]!);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void setMode(int, boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void setShowActionRow(boolean);
    method @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public void setTint(int);
    field @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static final java.util.Comparator<androidx.slice.core.SliceAction>! SLICE_ACTION_PRIORITY_COMPARATOR;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) public static @interface SliceView.SliceMode {
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY}) @RequiresApi(19) public class SliceViewUtil {
    method @ColorInt public static int applyAlpha(float, int);
    method @ColorInt public static int applyAlphaAttr(android.content.Context, @AttrRes int, int);
    method public static void createCircledIcon(android.content.Context, int, androidx.core.graphics.drawable.IconCompat!, boolean, android.view.ViewGroup!);
    method public static androidx.core.graphics.drawable.IconCompat! createIconFromDrawable(android.graphics.drawable.Drawable!);
    method public static android.graphics.Bitmap getCircularBitmap(android.graphics.Bitmap!);
    method @ColorInt public static int getColorAccent(android.content.Context);
    method @ColorInt public static int getColorAttr(android.content.Context, @AttrRes int);
    method @ColorInt public static int getColorError(android.content.Context);
    method @ColorInt public static int getDefaultColor(android.content.Context, int);
    method @ColorInt public static int getDisabled(android.content.Context, int);
    method public static android.graphics.drawable.Drawable! getDrawable(android.content.Context, @AttrRes int);
    method public static int getThemeAttr(android.content.Context, @AttrRes int);
    method public static CharSequence! getTimestampString(android.content.Context!, long);
    method public static int resolveLayoutDirection(int);
    method public static void tintIndeterminateProgressBar(android.content.Context!, android.widget.ProgressBar!);
  }

}

