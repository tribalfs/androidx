/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package androidx.sqlite.inspection;

option java_package = "androidx.sqlite.inspection";
option java_outer_classname = "SqliteInspectorProtocol";

// --- Commands ---

// Generic Command object grouping all Inspector Command types. Expected in
// Inspector's onReceiveCommand.
message Command {
  // Wrapped specialised Command.
  oneof OneOf {
    TrackDatabasesCommand track_databases = 1;
    GetSchemaCommand get_schema = 2;
    QueryCommand query = 3;
  }
}

// Request for the Inspector to track database connections (existing and new)
// and notify of those via DatabaseOpenedEvent objects.
message TrackDatabasesCommand {}

// Request for the Inspector to return schema information for a given database.
message GetSchemaCommand {
  // Id uniquely identifying a connection to the database.
  int32 database_id = 1;
}

// Request for the Inspector to execute a query and return its results.
// TODO: add support for parameterised queries
message QueryCommand {
  // Id uniquely identifying a connection to the database.
  int32 database_id = 1;
  // Query to execute.
  string query = 2;
  // The query may include ?s, which will be replaced by values from
  // query_parameters, in the order that they appear in the query. Values will
  // be bound as Strings.
  repeated QueryParameterValue query_parameter_values = 3;
}

// Value of a parameter in QueryCommand. Currently only string and null values
// are supported.
message QueryParameterValue {
  oneof OneOf {
    string string_value = 1;
  }
}

// --- Responses ---

// Generic Response object grouping all Inspector Response types to Command
// objects.
message Response {
  // Wrapped specialised Response.
  oneof OneOf {
    TrackDatabasesResponse track_databases = 1;
    GetSchemaResponse get_schema = 2;
    QueryResponse query = 3;
    ErrorOccurredResponse error_occurred = 400;
  }
}

// Object expected as a response to TrackDatabasesCommand.
message TrackDatabasesResponse {}

// Object expected as a response to GetSchemaCommand.
message GetSchemaResponse {
  repeated Table tables = 1;
}

// Schema information for a table.
message Table {
  string name = 1;
  repeated Column columns = 2;
}

// Schema information for a table column.
message Column {
  string name = 1;
  // Column type affinity.
  string type = 2;
  // PRIMARY KEY constraint: zero for columns that are not part of the primary
  // key, or the index of the column in the primary key for columns that are
  // part of the primary key.
  int32 primary_key = 3;
  // NOT NULL constraint.
  bool is_not_null = 4;
  // UNIQUE constraint on its own (i.e. not as a part of
  // compound-unique-constraint-index).
  bool is_unique = 5;
}

// Object expected as a response to QueryCommand.
message QueryResponse {
  repeated Row rows = 1;
  // Names of columns in the result set
  repeated string column_names = 2;
}

// Query result row.
message Row {
  repeated CellValue values = 1;
}

// Query result cell.
message CellValue {
  // Resulting cell value depending on type affinity rules.
  oneof OneOf {
    float float_value = 1;
    int32 int_value = 2;
    string string_value = 3;
    bytes blob_value = 4;
  }
}

// General Error message.
// TODO: decide on a more fine-grained approach
message ErrorOccurredResponse {
  ErrorContent content = 1;
}

message ErrorContent {
  // Main error message.
  string message = 1;
  // Optional stack trace.
  string stack_trace = 2;
  // True for e.g. a query syntax error; False for e.g. corrupt internal inspector state.
  bool is_recoverable = 3;
}

// --- Events ---

// Generic Event object grouping all Inspector Event types. Expected in
// Connection's sendEvent method.
message Event {
  // Wrapped specialised Event.
  oneof OneOf {
    DatabaseOpenedEvent database_opened = 1;
    ErrorOccurredEvent error_occurred = 400;
  }
}

// Notification of a database connection established (new) / discovered
// (existing).
message DatabaseOpenedEvent {
  // Id uniquely identifying a connection to a database. Required to perform
  // requests on the database.
  int32 database_id = 1;
  // Display name of the database: depending on a database type, e.g. in case of
  // a vanilla SQLite database a path to the database. Note: it is not
  // necessarily unique between databases.
  string name = 2;
}

// General Error message.
// TODO: decide on a more fine-grained approach
message ErrorOccurredEvent {
  ErrorContent content = 1;
}
