// Signature format: 3.0
package androidx.text {



  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class LayoutCompat {
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int ALIGN_CENTER = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int ALIGN_LEFT = 3; // 0x3
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int ALIGN_NORMAL = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int ALIGN_OPPOSITE = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int ALIGN_RIGHT = 4; // 0x4
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int BREAK_STRATEGY_BALANCED = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int BREAK_STRATEGY_HIGH_QUALITY = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int BREAK_STRATEGY_SIMPLE = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final boolean DEFAULT_ADD_LAST_LINE_LINE_SPCAING = false;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_ALIGNMENT = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_BREAK_STRATEGY = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final boolean DEFAULT_FALLBACK_LINE_SPACING = true;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_HYPHENATION_FREQUENCY = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final boolean DEFAULT_INCLUDE_PADDING = true;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_JUSTIFICATION_MODE = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final float DEFAULT_LINESPACING_EXTRA = 0.0f;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final float DEFAULT_LINESPACING_MULTIPLIER = 1.0f;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_MAX_LINES = 2147483647; // 0x7fffffff
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int DEFAULT_TEXT_DIRECTION = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int HYPHENATION_FREQUENCY_FULL = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int HYPHENATION_FREQUENCY_NONE = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int HYPHENATION_FREQUENCY_NORMAL = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int JUSTIFICATION_MODE_INTER_WORD = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int JUSTIFICATION_MODE_NONE = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_ANY_RTL_LTR = 4; // 0x4
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_FIRST_STRONG_LTR = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_FIRST_STRONG_RTL = 3; // 0x3
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_LOCALE = 5; // 0x5
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_LTR = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int TEXT_DIRECTION_RTL = 1; // 0x1
  }

  @IntDef({androidx.text.LayoutCompat.BREAK_STRATEGY_SIMPLE, androidx.text.LayoutCompat.BREAK_STRATEGY_HIGH_QUALITY, androidx.text.LayoutCompat.BREAK_STRATEGY_BALANCED}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LayoutCompat.BreakStrategy {
  }

  @IntDef({androidx.text.LayoutCompat.HYPHENATION_FREQUENCY_NORMAL, androidx.text.LayoutCompat.HYPHENATION_FREQUENCY_FULL, androidx.text.LayoutCompat.HYPHENATION_FREQUENCY_NONE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LayoutCompat.HyphenationFrequency {
  }

  @IntDef({androidx.text.LayoutCompat.JUSTIFICATION_MODE_NONE, androidx.text.LayoutCompat.JUSTIFICATION_MODE_INTER_WORD}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LayoutCompat.JustificationMode {
  }

  @IntDef({androidx.text.LayoutCompat.TEXT_DIRECTION_LTR, androidx.text.LayoutCompat.TEXT_DIRECTION_RTL, androidx.text.LayoutCompat.TEXT_DIRECTION_FIRST_STRONG_LTR, androidx.text.LayoutCompat.TEXT_DIRECTION_FIRST_STRONG_RTL, androidx.text.LayoutCompat.TEXT_DIRECTION_ANY_RTL_LTR, androidx.text.LayoutCompat.TEXT_DIRECTION_LOCALE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LayoutCompat.TextDirection {
  }

  @IntDef({androidx.text.LayoutCompat.ALIGN_NORMAL, androidx.text.LayoutCompat.ALIGN_CENTER, androidx.text.LayoutCompat.ALIGN_OPPOSITE, androidx.text.LayoutCompat.ALIGN_LEFT, androidx.text.LayoutCompat.ALIGN_RIGHT}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LayoutCompat.TextLayoutAlignment {
  }




  @RestrictTo({RestrictTo.Scope.LIBRARY}) public final class TextLayout {
    ctor public TextLayout(CharSequence charSequence, float width, android.text.TextPaint textPaint, @androidx.text.LayoutCompat.TextLayoutAlignment int alignment, android.text.TextUtils.TruncateAt? ellipsize, @androidx.text.LayoutCompat.TextDirection int textDirectionHeuristic, float lineSpacingMultiplier, float lineSpacingExtra, boolean includePadding, int maxLines, @androidx.text.LayoutCompat.BreakStrategy int breakStrategy, @androidx.text.LayoutCompat.HyphenationFrequency int hyphenationFrequency, @androidx.text.LayoutCompat.JustificationMode int justificationMode, int[]? leftIndents, int[]? rightIndents);
    method public boolean getDidExceedMaxLines();
    method public android.text.Layout getLayout();
    method public float getLineBottom(int line);
    method public int getLineCount();
    method public int getLineForOffset(int offset);
    method public int getLineForVertical(int vertical);
    method public float getLineHeight(int lineIndex);
    method public float getLineLeft(int lineIndex);
    method public float getLineRight(int lineIndex);
    method public float getLineTop(int line);
    method public float getLineWidth(int lineIndex);
    method public float getMaxIntrinsicWidth();
    method public int getOffsetForHorizontal(int line, float horizontal);
    method public float getPrimaryHorizontal(int offset);
    method public void getSelectionPath(int start, int end, android.graphics.Path dest);
    method public CharSequence getText();
    method public boolean isEllipsisApplied(int lineIndex);
    method public void paint(android.graphics.Canvas canvas);
    property public final boolean didExceedMaxLines;
    property public final android.text.Layout layout;
    property public final int lineCount;
    property public final float maxIntrinsicWidth;
    property public final CharSequence text;
  }

}

package androidx.text.selection {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WordBoundary {
    ctor public WordBoundary(java.util.Locale!, CharSequence!);
    method public int getWordEnd(int);
    method public int getWordStart(int);
  }


}

package androidx.text.style {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class BaselineShiftSpan extends android.text.style.MetricAffectingSpan {
    ctor public BaselineShiftSpan(float);
    method public void updateDrawState(android.text.TextPaint!);
    method public void updateMeasureState(android.text.TextPaint);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class FontFeatureSpan extends android.text.style.MetricAffectingSpan {
    ctor public FontFeatureSpan(String);
    method public String! getFontFeatureSettings();
    method public void updateDrawState(android.text.TextPaint!);
    method public void updateMeasureState(android.text.TextPaint);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class LetterSpacingSpan extends android.text.style.MetricAffectingSpan {
    ctor public LetterSpacingSpan(float);
    method public void updateDrawState(android.text.TextPaint);
    method public void updateMeasureState(android.text.TextPaint);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ShadowSpan extends android.text.style.CharacterStyle {
    ctor public ShadowSpan(@ColorInt int, float, float, float);
    method public int getColor();
    method public float getOffsetX();
    method public float getOffsetY();
    method public float getRadius();
    method public void updateDrawState(android.text.TextPaint!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SkewXSpan extends android.text.style.MetricAffectingSpan {
    ctor public SkewXSpan(float);
    method public float getSkewX();
    method public void updateDrawState(android.text.TextPaint!);
    method public void updateMeasureState(android.text.TextPaint!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TypefaceSpan extends android.text.style.MetricAffectingSpan {
    ctor public TypefaceSpan(android.graphics.Typeface);
    method public android.graphics.Typeface getTypeface();
    method public void updateDrawState(android.text.TextPaint);
    method public void updateMeasureState(android.text.TextPaint);
  }

  @RequiresApi(26) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WordSpacingSpan extends android.text.style.MetricAffectingSpan {
    ctor public WordSpacingSpan(float);
    method public float getWordSpacing();
    method public void updateDrawState(android.text.TextPaint!);
    method public void updateMeasureState(android.text.TextPaint!);
  }

}

