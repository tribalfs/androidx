// Signature format: 3.0
package androidx.ui.core {

  public final class AndroidCraneView extends android.view.ViewGroup implements androidx.ui.core.Owner androidx.ui.core.SemanticsTreeProvider {
    ctor public AndroidCraneView(android.content.Context context);
    method public java.util.List<androidx.ui.core.SemanticsTreeNode> getAllSemanticNodes();
    method public androidx.ui.core.Constraints getConstraints();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getOnMeasureRecompose();
    method public androidx.ui.core.AndroidCraneView[]? getRef();
    method public androidx.ui.core.LayoutNode getRoot();
    method public void onAttach(androidx.ui.core.ComponentNode node);
    method public void onDetach(androidx.ui.core.ComponentNode node);
    method public void onInvalidate(androidx.ui.core.DrawNode drawNode);
    method public void onPositionChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onSizeChange(androidx.ui.core.LayoutNode layoutNode);
    method public void sendEvent(android.view.MotionEvent event);
    method public void setConstraints(androidx.ui.core.Constraints p);
    method public void setOnMeasureRecompose(kotlin.jvm.functions.Function0<kotlin.Unit> p);
    method public void setRef(androidx.ui.core.AndroidCraneView[]? value);
    property public final androidx.ui.core.Constraints constraints;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> onMeasureRecompose;
    property public final androidx.ui.core.AndroidCraneView[]? ref;
    property public final androidx.ui.core.LayoutNode root;
  }

  public abstract sealed class ComponentNode implements com.google.r4a.Emittable {
    method public void attach(androidx.ui.core.Owner owner);
    method public void detach();
    method public void emitInsertAt(int index, com.google.r4a.Emittable instance);
    method public void emitRemoveAt(int index, int count);
    method public abstract operator androidx.ui.core.ComponentNode get(int index);
    method public abstract int getCount();
    method public final int getDepth();
    method public abstract androidx.ui.core.LayoutNode? getLayoutNode();
    method public final androidx.ui.core.Owner? getOwner();
    method public final Object? getOwnerData();
    method public final androidx.ui.core.ComponentNode? getParent();
    method public androidx.ui.core.LayoutNode? getParentLayoutNode();
    method public final void setDepth(int p);
    method public final void setOwnerData(Object? p);
    method public void setParentLayoutNode(androidx.ui.core.LayoutNode? p);
    method public abstract void visitChildren(boolean reverse = false, kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    property public abstract int count;
    property public final int depth;
    property public abstract androidx.ui.core.LayoutNode? layoutNode;
    property public final androidx.ui.core.Owner? owner;
    property public final Object? ownerData;
    property public final androidx.ui.core.ComponentNode? parent;
    property public androidx.ui.core.LayoutNode? parentLayoutNode;
  }

  public final class ComponentNodesKt {
    ctor public ComponentNodesKt();
    method public static void add(androidx.ui.core.ComponentNode, androidx.ui.core.ComponentNode child);
    method public static androidx.ui.core.PxPosition childToLocal(androidx.ui.core.LayoutNode, androidx.ui.core.LayoutNode child, androidx.ui.core.PxPosition childLocal);
    method public static java.util.List<java.lang.Object> childrenMeasureBoxes(androidx.ui.core.LayoutNode);
    method public static androidx.ui.core.PxPosition globalToLocal(androidx.ui.core.LayoutNode, androidx.ui.core.PxPosition global);
    method public static boolean isAttached(androidx.ui.core.ComponentNode);
    method public static androidx.ui.core.PxPosition localToGlobal(androidx.ui.core.LayoutNode, androidx.ui.core.PxPosition local);
  }

  public final class DrawNode extends androidx.ui.core.ComponentNode {
    ctor public DrawNode();
    method public void emitMove(int from, int to, int count);
    method public androidx.ui.core.ComponentNode get(int index);
    method public int getCount();
    method public androidx.ui.core.LayoutNode? getLayoutNode();
    method public boolean getNeedsPaint();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit> getOnPaint();
    method public void invalidate();
    method public void setNeedsPaint(boolean p);
    method public void setOnPaint(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super androidx.ui.painting.Canvas,? super androidx.ui.core.PxSize,kotlin.Unit> value);
    method public void visitChildren(boolean reverse, kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    property public int count;
    property public androidx.ui.core.LayoutNode? layoutNode;
    property public final boolean needsPaint;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit> onPaint;
  }

  public final class LayoutNode extends androidx.ui.core.ComponentNode {
    ctor public LayoutNode();
    method public void emitMove(int from, int to, int count);
    method public androidx.ui.core.ComponentNode get(int index);
    method public java.util.List<androidx.ui.core.ComponentNode> getChildren();
    method public androidx.ui.core.Constraints getConstraints();
    method public int getCount();
    method public androidx.ui.core.IntPx getHeight();
    method public androidx.ui.core.LayoutNode getLayoutNode();
    method public Object? getMeasureBox();
    method public androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? getRef();
    method public boolean getVisible();
    method public androidx.ui.core.IntPx getWidth();
    method public androidx.ui.core.IntPx getX();
    method public androidx.ui.core.IntPx getY();
    method public void moveTo(androidx.ui.core.IntPx x, androidx.ui.core.IntPx y);
    method public void resize(androidx.ui.core.IntPx width, androidx.ui.core.IntPx height);
    method public void setConstraints(androidx.ui.core.Constraints p);
    method public void setMeasureBox(Object? p);
    method public void setRef(androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? value);
    method public void setVisible(boolean p);
    method public void visitChildren(boolean reverse, kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    property public final java.util.List<androidx.ui.core.ComponentNode> children;
    property public final androidx.ui.core.Constraints constraints;
    property public int count;
    property public final androidx.ui.core.IntPx height;
    property public androidx.ui.core.LayoutNode layoutNode;
    property public final Object? measureBox;
    property public final androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? ref;
    property public final boolean visible;
    property public final androidx.ui.core.IntPx width;
    property public final androidx.ui.core.IntPx x;
    property public final androidx.ui.core.IntPx y;
  }

  public interface Owner {
    method public void onAttach(androidx.ui.core.ComponentNode node);
    method public void onDetach(androidx.ui.core.ComponentNode node);
    method public void onInvalidate(androidx.ui.core.DrawNode drawNode);
    method public void onPositionChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onSizeChange(androidx.ui.core.LayoutNode layoutNode);
  }

  public final class PointerInputNode extends androidx.ui.core.SingleChildComponentNode {
    ctor public PointerInputNode();
    method public kotlin.jvm.functions.Function2<androidx.ui.core.PointerInputChange,androidx.ui.core.PointerEventPass,androidx.ui.core.PointerInputChange> getPointerInputHandler();
    method public void setPointerInputHandler(kotlin.jvm.functions.Function2<? super androidx.ui.core.PointerInputChange,? super androidx.ui.core.PointerEventPass,androidx.ui.core.PointerInputChange> p);
    property public final kotlin.jvm.functions.Function2<androidx.ui.core.PointerInputChange,androidx.ui.core.PointerEventPass,androidx.ui.core.PointerInputChange> pointerInputHandler;
  }

  public final class Ref<T> {
    ctor public Ref();
    method public T? getValue();
    method public void setValue(T? p);
    property public final T? value;
  }

  public final class SemanticsR4ANode extends androidx.ui.core.SingleChildComponentNode {
    ctor public SemanticsR4ANode(boolean container, boolean explicitChildNodes, androidx.ui.core.semantics.SemanticsProperties properties);
    method public boolean getContainer();
    method public boolean getExplicitChildNodes();
    method public androidx.ui.core.semantics.SemanticsProperties getProperties();
  }

  public final class SemanticsTreeNodeImpl implements androidx.ui.core.SemanticsTreeNode {
    ctor public SemanticsTreeNodeImpl(androidx.ui.core.SemanticsTreeNode? parent, androidx.ui.core.semantics.SemanticsProperties data);
    method public void addChild(androidx.ui.core.SemanticsTreeNode child);
    method public java.util.Set<androidx.ui.core.SemanticsTreeNode> getChildren();
    method public androidx.ui.core.semantics.SemanticsProperties getData();
    method public androidx.ui.core.SemanticsTreeNode? getParent();
    property public java.util.Set<androidx.ui.core.SemanticsTreeNode> children;
  }

  public final class SemanticsTreeNodeImplKt {
    ctor public SemanticsTreeNodeImplKt();
  }

  public abstract sealed class SingleChildComponentNode extends androidx.ui.core.ComponentNode {
    method public void emitMove(int from, int to, int count);
    method public androidx.ui.core.ComponentNode get(int index);
    method public final androidx.ui.core.ComponentNode? getChild();
    method public int getCount();
    method public androidx.ui.core.LayoutNode? getLayoutNode();
    method public final void setChild(androidx.ui.core.ComponentNode? p);
    method public void setLayoutNode(androidx.ui.core.LayoutNode? p);
    method public void visitChildren(boolean reverse, kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    property public final androidx.ui.core.ComponentNode? child;
    property public int count;
    property public androidx.ui.core.LayoutNode? layoutNode;
    property public androidx.ui.core.LayoutNode? parentLayoutNode;
  }

}

package androidx.ui.core.pointerinput {

  public final class MotionEventAdapterKt {
    ctor public MotionEventAdapterKt();
  }

  public final class PointerInputEventData {
    ctor public PointerInputEventData(int id, androidx.ui.core.PointerInputData pointerInputData);
    method public int component1();
    method public androidx.ui.core.PointerInputData component2();
    method public androidx.ui.core.pointerinput.PointerInputEventData copy(int id, androidx.ui.core.PointerInputData pointerInputData);
    method public int getId();
    method public androidx.ui.core.PointerInputData getPointerInputData();
  }

}

