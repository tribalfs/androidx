// Signature format: 3.0
package androidx.ui.test {

  public final class ActionsKt {
    ctor public ActionsKt();
    method public static androidx.ui.test.SemanticsTreeQuery doClick(androidx.ui.test.SemanticsTreeQuery);
  }

  public final class AssertionsKt {
    ctor public AssertionsKt();
    method public static androidx.ui.test.SemanticsTreeQuery assertDoesNotExist(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsChecked(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsHidden(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsInMutuallyExclusiveGroup(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsNotChecked(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsSelected(androidx.ui.test.SemanticsTreeQuery, boolean excepted);
    method public static androidx.ui.test.SemanticsTreeQuery assertIsVisible(androidx.ui.test.SemanticsTreeQuery);
    method public static androidx.ui.test.SemanticsTreeQuery assertSemanticsIsEqualTo(androidx.ui.test.SemanticsTreeQuery, androidx.ui.core.semantics.SemanticsProperties expectedProperties);
  }

  public final class FindersKt {
    ctor public FindersKt();
    method public static androidx.ui.test.SemanticsTreeQuery findByCondition(androidx.ui.test.UiTestRunner, kotlin.jvm.functions.Function1<? super androidx.ui.core.SemanticsTreeNode,java.lang.Boolean> selector);
    method public static androidx.ui.test.SemanticsTreeQuery findByTag(androidx.ui.test.UiTestRunner, String testTag);
  }

  public final class GoldenSemanticsKt {
    ctor public GoldenSemanticsKt();
    method public static void assertEquals(androidx.ui.core.semantics.SemanticsProperties, androidx.ui.core.semantics.SemanticsProperties expected);
    method public static androidx.ui.core.semantics.SemanticsProperties copyWith(androidx.ui.core.semantics.SemanticsProperties, kotlin.jvm.functions.Function1<? super androidx.ui.test.SemanticsPropertiesBuilder,kotlin.Unit> diff);
    method public static androidx.ui.core.semantics.SemanticsProperties createFullSemantics(Boolean? enabled = false, Boolean? checked = false, Boolean? selected = false, Boolean? inMutuallyExclusiveGroup = false);
    method public static androidx.ui.test.SemanticsPropertiesBuilder toBuilder(androidx.ui.core.semantics.SemanticsProperties);
  }

  public final class OutputKt {
    ctor public OutputKt();
    method public static void dumpSemantics(androidx.ui.test.SemanticsTreeQuery, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> consumer);
  }

  public final class SemanticsPropertiesBuilder {
    ctor public SemanticsPropertiesBuilder(Boolean? enabled, Boolean? checked, Boolean? inMutuallyExclusiveGroup, Boolean? selected);
    method public androidx.ui.core.semantics.SemanticsProperties build();
    method public Boolean? getChecked();
    method public Boolean? getEnabled();
    method public Boolean? getInMutuallyExclusiveGroup();
    method public Boolean? getSelected();
    method public void setChecked(Boolean? p);
    method public void setEnabled(Boolean? p);
    method public void setInMutuallyExclusiveGroup(Boolean? p);
    method public void setSelected(Boolean? p);
  }

  public final class SemanticsTreeQuery {
  }

  public interface UiTestRunner {
    method public java.util.List<androidx.ui.core.SemanticsTreeNode> findSemantics(kotlin.jvm.functions.Function1<? super androidx.ui.core.SemanticsTreeNode,java.lang.Boolean> selector);
    method public void sendEvent(android.view.MotionEvent event);
  }

}

package androidx.ui.test.android {

  public class AndroidUiTestRunner implements androidx.ui.test.UiTestRunner {
    ctor public AndroidUiTestRunner();
    method public java.util.List<androidx.ui.core.SemanticsTreeNode> findSemantics(kotlin.jvm.functions.Function1<? super androidx.ui.core.SemanticsTreeNode,java.lang.Boolean> selector);
    method public final androidx.test.rule.ActivityTestRule<androidx.ui.test.android.DefaultTestActivity> getActivityTestRule();
    method public final androidx.ui.core.Density getDensity();
    method public void sendEvent(android.view.MotionEvent event);
    method public final void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    method public final void setup();
    property public final androidx.test.rule.ActivityTestRule<androidx.ui.test.android.DefaultTestActivity> activityTestRule;
    property public final androidx.ui.core.Density density;
  }

  public final class AndroidUiTestRunnerKt {
    ctor public AndroidUiTestRunnerKt();
    method public static void doPollingCheck(kotlin.jvm.functions.Function0<java.lang.Boolean> canProceed, long timeoutPeriod = 3000);
  }

  public final class DefaultTestActivity extends android.app.Activity {
    ctor public DefaultTestActivity();
    method public java.util.concurrent.CountDownLatch getHasFocusLatch();
    method public void setHasFocusLatch(java.util.concurrent.CountDownLatch p);
    property public final java.util.concurrent.CountDownLatch hasFocusLatch;
  }

}

