// Signature format: 3.0
package androidx.ui.test {

  public final class ActionsKt {
    ctor public ActionsKt();
    method public static androidx.ui.test.SemanticsTreeInteraction doClick(androidx.ui.test.SemanticsTreeInteraction);
  }

  public final class AssertionsKt {
    ctor public AssertionsKt();
    method public static androidx.ui.test.SemanticsTreeInteraction assertDoesNotExist(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsChecked(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsHidden(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsInMutuallyExclusiveGroup(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsNotChecked(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsSelected(androidx.ui.test.SemanticsTreeInteraction, boolean expected);
    method public static androidx.ui.test.SemanticsTreeInteraction assertIsVisible(androidx.ui.test.SemanticsTreeInteraction);
    method public static androidx.ui.test.SemanticsTreeInteraction assertSemanticsIsEqualTo(androidx.ui.test.SemanticsTreeInteraction, androidx.ui.core.semantics.SemanticsConfiguration expectedProperties);
    method public static androidx.ui.test.SemanticsTreeInteraction assertValueEquals(androidx.ui.test.SemanticsTreeInteraction, String value);
  }

  public interface ComposeTestRule extends org.junit.rules.TestRule {
    method public androidx.ui.core.Density getDensity();
    method public android.util.DisplayMetrics getDisplayMetrics();
    method public void runOnUiThread(kotlin.jvm.functions.Function0<kotlin.Unit> action);
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    property public abstract androidx.ui.core.Density density;
    property public abstract android.util.DisplayMetrics displayMetrics;
  }

  public final class ComposeTestRuleKt {
    ctor public ComposeTestRuleKt();
    method public static androidx.ui.test.ComposeTestRule createComposeRule(boolean disableTransitions = false);
  }

  public final class DisableTransitions implements org.junit.rules.TestRule {
    ctor public DisableTransitions();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description? description);
  }

  public final class DisableTransitions.DisableTransitionsStatement extends org.junit.runners.model.Statement {
    ctor public DisableTransitions.DisableTransitionsStatement(org.junit.runners.model.Statement base);
    method public void evaluate();
  }

  public final class FindersKt {
    ctor public FindersKt();
    method public static androidx.ui.test.SemanticsTreeInteraction findByCondition(kotlin.jvm.functions.Function1<? super androidx.ui.core.SemanticsTreeNode,java.lang.Boolean> selector);
    method public static androidx.ui.test.SemanticsTreeInteraction findByTag(String testTag);
    method public static androidx.ui.test.SemanticsTreeInteraction findByText(String text, boolean ignoreCase = false);
  }

  public final class GoldenSemanticsKt {
    ctor public GoldenSemanticsKt();
    method public static void assertEquals(androidx.ui.core.semantics.SemanticsConfiguration, androidx.ui.core.semantics.SemanticsConfiguration expected);
    method public static androidx.ui.core.semantics.SemanticsConfiguration copyWith(androidx.ui.core.semantics.SemanticsConfiguration, kotlin.jvm.functions.Function1<? super androidx.ui.core.semantics.SemanticsConfiguration,kotlin.Unit> diff);
    method public static androidx.ui.core.semantics.SemanticsConfiguration createFullSemantics(Boolean? isEnabled = null, Boolean? isChecked = null, boolean isSelected = false, boolean isButton = false, boolean inMutuallyExclusiveGroup = false);
  }

  public final class OutputKt {
    ctor public OutputKt();
    method public static void dumpSemantics(androidx.ui.test.SemanticsTreeInteraction, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> consumer);
  }

  public abstract class SemanticsTreeInteraction {
    ctor public SemanticsTreeInteraction();
  }

  public final class SemanticsTreeInteractionKt {
    ctor public SemanticsTreeInteractionKt();
  }

}

package androidx.ui.test.android {

  public final class AndroidComposeTestRule implements androidx.ui.test.ComposeTestRule {
    ctor public AndroidComposeTestRule(boolean disableTransitions, boolean shouldThrowOnRecomposeTimeout);
    ctor public AndroidComposeTestRule();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description? description);
    method public androidx.test.rule.ActivityTestRule<androidx.ui.test.android.DefaultTestActivity> getActivityTestRule();
    method public androidx.ui.core.Density getDensity();
    method public android.util.DisplayMetrics getDisplayMetrics();
    method public void runOnUiThread(kotlin.jvm.functions.Function0<kotlin.Unit> action);
    method public void setContent(kotlin.jvm.functions.Function0<kotlin.Unit> composable);
    property public final androidx.test.rule.ActivityTestRule<androidx.ui.test.android.DefaultTestActivity> activityTestRule;
    property public androidx.ui.core.Density density;
    property public android.util.DisplayMetrics displayMetrics;
  }

  public final class AndroidComposeTestRule.AndroidComposeStatement extends org.junit.runners.model.Statement {
    ctor public AndroidComposeTestRule.AndroidComposeStatement(org.junit.runners.model.Statement base);
    method public void evaluate();
  }

  public final class DefaultTestActivity extends android.app.Activity {
    ctor public DefaultTestActivity();
    method public java.util.concurrent.CountDownLatch getHasFocusLatch();
    method public void setHasFocusLatch(java.util.concurrent.CountDownLatch p);
    property public final java.util.concurrent.CountDownLatch hasFocusLatch;
  }

}

