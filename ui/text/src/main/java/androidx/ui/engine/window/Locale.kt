/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package androidx.ui.engine.window

/**
 * An identifier used to select a user's language and formatting preferences,
 * consisting of a language and a country. This is a subset of locale
 * identifiers as defined by BCP 47.
 *
 * Locales are canonicalized according to the "preferred value" entries in the
 * [IANA Language Subtag
 * Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
 * For example, `const Locale('he')` and `const Locale('iw')` are equal and
 * both have the [languageCode] `he`, because `iw` is a deprecated language
 * subtag that was replaced by the subtag `he`.
 *
 * See also:
 *
 *  * [Window.locale], which specifies the system's currently selected
 *    [Locale].
 *
 * The default constructor creates a new Locale object. The first argument is the
 * primary language subtag, the second is the region subtag.
 *
 * For example:
 *
 * ```dart
 * const Locale swissFrench = const Locale('fr', 'CH');
 * const Locale canadianFrench = const Locale('fr', 'CA');
 * ```
 *
 * The primary language subtag must not be null. The region subtag is
 * optional.
 *
 * The values are _case sensitive_, and should match the case of the relevant
 * subtags in the [IANA Language Subtag
 * Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
 * Typically this means the primary language subtag should be lowercase and
 * the region subtag should be uppercase.
 */
data class Locale(
    val _languageCode: String,
    val _countryCode: String? = null
) {

    // TODO(Migration/siyamed): this class is far far far too much very limited.
    // we might want to wrap system locale, or use system locale.
    // The package is also not good, Locale should be somewhere else not under window.
    // nona@ we need at least
    // * ISO 15924 script tag. This is required for sr-Latn/sr-Cyrl support.
    // * Variant. This is required for hyphenation for German, de-1996/de-1901
    // * Unicode extensions: This is required Arabic/Latin digits selection.
    // Also, this needs to be a list of locale, otherwise
    // * locale list based font fallback doesn't work.
    // * resource fallback may not work well.

    /**
     * The primary language subtag for the locale.
     *
     * This must not be null.
     *
     * This is expected to be string registered in the [IANA Language Subtag
     * Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
     * with the type "language". The string specified must match the case of the
     * string in the registry.
     *
     * Language subtags that are deprecated in the registry and have a preferred
     * code are changed to their preferred code. For example, `const
     * Locale('he')` and `const Locale('iw')` are equal, and both have the
     * [languageCode] `he`, because `iw` is a deprecated language subtag that was
     * replaced by the subtag `he`.
     */
    val languageCode: String
        get() = _canonicalizeLanguageCode(_languageCode)

    /**
     * The region subtag for the locale.
     *
     * This can be null.
     *
     * This is expected to be string registered in the [IANA Language Subtag
     * Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
     * with the type "region". The string specified must match the case of the
     * string in the registry.
     *
     * Region subtags that are deprecated in the registry and have a preferred
     * code are changed to their preferred code. For example, `const Locale('de',
     * 'DE')` and `const Locale('de', 'DD')` are equal, and both have the
     * [countryCode] `DE`, because `DD` is a deprecated language subtag that was
     * replaced by the subtag `DE`.
     */
    val countryCode
        get() = if (_countryCode != null) _canonicalizeRegionCode(
            _countryCode
        ) else null

    companion object {
        fun _canonicalizeLanguageCode(languageCode: String): String {
            // This switch statement is generated by //flutter/tools/gen_locale.dart
            // TODO(popam): look into that tool
            // Mappings generated for language subtag registry as of 2017-08-15.
            return when (languageCode) {
                "in" -> "id"; // Indonesian; deprecated 1989-01-01
                "iw" -> "he"; // Hebrew; deprecated 1989-01-01
                "ji" -> "yi"; // Yiddish; deprecated 1989-01-01
                "jw" -> "jv"; // Javanese; deprecated 2001-08-13
                "mo" -> "ro"; // Moldavian, Moldovan; deprecated 2008-11-22
                "aam" -> "aas"; // Aramanik; deprecated 2015-02-12
                "adp" -> "dz"; // Adap; deprecated 2015-02-12
                "aue" -> "ktz"; // =/Kx"au//"ein; deprecated 2015-02-12
                "ayx" -> "nun"; // Ayi (China); deprecated 2011-08-16
                "bgm" -> "bcg"; // Baga Mboteni; deprecated 2016-05-30
                "bjd" -> "drl"; // Bandjigali; deprecated 2012-08-12
                "ccq" -> "rki"; // Chaungtha; deprecated 2012-08-12
                "cjr" -> "mom"; // Chorotega; deprecated 2010-03-11
                "cka" -> "cmr"; // Khumi Awa Chin; deprecated 2012-08-12
                "cmk" -> "xch"; // Chimakum; deprecated 2010-03-11
                "coy" -> "pij"; // Coyaima; deprecated 2016-05-30
                "cqu" -> "quh"; // Chilean Quechua; deprecated 2016-05-30
                "drh" -> "khk"; // Darkhat; deprecated 2010-03-11
                "drw" -> "prs"; // Darwazi; deprecated 2010-03-11
                "gav" -> "dev"; // Gabutamon; deprecated 2010-03-11
                "gfx" -> "vaj"; // Mangetti Dune !Xung; deprecated 2015-02-12
                "ggn" -> "gvr"; // Eastern Gurung; deprecated 2016-05-30
                "gti" -> "nyc"; // Gbati-ri; deprecated 2015-02-12
                "guv" -> "duz"; // Gey; deprecated 2016-05-30
                "hrr" -> "jal"; // Horuru; deprecated 2012-08-12
                "ibi" -> "opa"; // Ibilo; deprecated 2012-08-12
                "ilw" -> "gal"; // Talur; deprecated 2013-09-10
                "jeg" -> "oyb"; // Jeng; deprecated 2017-02-23
                "kgc" -> "tdf"; // Kasseng; deprecated 2016-05-30
                "kgh" -> "kml"; // Upper Tanudan Kalinga; deprecated 2012-08-12
                "koj" -> "kwv"; // Sara Dunjo; deprecated 2015-02-12
                "krm" -> "bmf"; // Krim; deprecated 2017-02-23
                "ktr" -> "dtp"; // Kota Marudu Tinagas; deprecated 2016-05-30
                "kvs" -> "gdj"; // Kunggara; deprecated 2016-05-30
                "kwq" -> "yam"; // Kwak; deprecated 2015-02-12
                "kxe" -> "tvd"; // Kakihum; deprecated 2015-02-12
                "kzj" -> "dtp"; // Coastal Kadazan; deprecated 2016-05-30
                "kzt" -> "dtp"; // Tambunan Dusun; deprecated 2016-05-30
                "lii" -> "raq"; // Lingkhim; deprecated 2015-02-12
                "lmm" -> "rmx"; // Lamam; deprecated 2014-02-28
                "meg" -> "cir"; // Mea; deprecated 2013-09-10
                "mst" -> "mry"; // Cataelano Mandaya; deprecated 2010-03-11
                "mwj" -> "vaj"; // Maligo; deprecated 2015-02-12
                "myt" -> "mry"; // Sangab Mandaya; deprecated 2010-03-11
                "nad" -> "xny"; // Nijadali; deprecated 2016-05-30
                "nnx" -> "ngv"; // Ngong; deprecated 2015-02-12
                "nts" -> "pij"; // Natagaimas; deprecated 2016-05-30
                "oun" -> "vaj"; // !O!ung; deprecated 2015-02-12
                "pcr" -> "adx"; // Panang; deprecated 2013-09-10
                "pmc" -> "huw"; // Palumata; deprecated 2016-05-30
                "pmu" -> "phr"; // Mirpur Panjabi; deprecated 2015-02-12
                "ppa" -> "bfy"; // Pao; deprecated 2016-05-30
                "ppr" -> "lcq"; // Piru; deprecated 2013-09-10
                "pry" -> "prt"; // Pray 3; deprecated 2016-05-30
                "puz" -> "pub"; // Purum Naga; deprecated 2014-02-28
                "sca" -> "hle"; // Sansu; deprecated 2012-08-12
                "skk" -> "oyb"; // Sok; deprecated 2017-02-23
                "tdu" -> "dtp"; // Tempasuk Dusun; deprecated 2016-05-30
                "thc" -> "tpo"; // Tai Hang Tong; deprecated 2016-05-30
                "thx" -> "oyb"; // The; deprecated 2015-02-12
                "tie" -> "ras"; // Tingal; deprecated 2011-08-16
                "tkk" -> "twm"; // Takpa; deprecated 2011-08-16
                "tlw" -> "weo"; // South Wemale; deprecated 2012-08-12
                "tmp" -> "tyj"; // Tai MÃ¨ne; deprecated 2016-05-30
                "tne" -> "kak"; // Tinoc Kallahan; deprecated 2016-05-30
                "tnf" -> "prs"; // Tangshewi; deprecated 2010-03-11
                "tsf" -> "taj"; // Southwestern Tamang; deprecated 2015-02-12
                "uok" -> "ema"; // Uokha; deprecated 2015-02-12
                "xba" -> "cax"; // Kamba (Brazil); deprecated 2016-05-30
                "xia" -> "acn"; // Xiandao; deprecated 2013-09-10
                "xkh" -> "waw"; // Karahawyana; deprecated 2016-05-30
                "xsj" -> "suj"; // Subi; deprecated 2015-02-12
                "ybd" -> "rki"; // Yangbye; deprecated 2012-08-12
                "yma" -> "lrr"; // Yamphe; deprecated 2012-08-12
                "ymt" -> "mtm"; // Mator-Taygi-Karagas; deprecated 2015-02-12
                "yos" -> "zom"; // Yos; deprecated 2013-09-10
                "yuu" -> "yug"; // Yugh; deprecated 2014-02-28
                else -> languageCode
            }
        }

        fun _canonicalizeRegionCode(regionCode: String): String {
            // This switch statement is generated by //flutter/tools/gen_locale.dart
            // TODO(popam): look into that tool
            // Mappings generated for language subtag registry as of 2017-08-15.
            return when (regionCode) {
                "BU" -> "MM"; // Burma; deprecated 1989-12-05
                "DD" -> "DE"; // German Democratic Republic; deprecated 1990-10-30
                "FX" -> "FR"; // Metropolitan France; deprecated 1997-07-14
                "TP" -> "TL"; // East Timor; deprecated 2002-05-20
                "YD" -> "YE"; // Democratic Yemen; deprecated 1990-08-14
                "ZR" -> "CD"; // Zaire; deprecated 1997-07-14
                else -> regionCode
            }
        }
    }

    // Made this a data class, so the following are probably no longer required.
    // Leaving them commented out though.
//    override fun equals(other: Any?): Boolean {
//        if (this === other) {
//            return true
//        }
//        if (other !is Locale) {
//            return false
//        }
//        return languageCode == other.languageCode && countryCode == other.countryCode
//    }
//
//    override fun hashCode(): Int {
//        var result = 373
//        result = 37 * result + languageCode.hashCode()
//        if (_countryCode != null) {
//            result = 37 * result + countryCode!!.hashCode()
//        }
//        return result
//    }
//
//    override fun toString(): String {
//        if (_countryCode == null) {
//            return languageCode
//        }
//        return "${languageCode}_$countryCode"
//    }
}