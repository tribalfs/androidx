// Signature format: 3.0
package androidx.compose.material {

  public enum AlertDialogButtonLayout {
    method public static androidx.compose.material.AlertDialogButtonLayout valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.AlertDialogButtonLayout[] values();
    enum_constant public static final androidx.compose.material.AlertDialogButtonLayout SideBySide;
    enum_constant public static final androidx.compose.material.AlertDialogButtonLayout Stacked;
  }

  public final class AlertDialogKt {
    method @androidx.compose.runtime.Composable public static void AlertDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onCloseRequest, kotlin.jvm.functions.Function0<kotlin.Unit>? title = null, kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function0<kotlin.Unit> confirmButton, kotlin.jvm.functions.Function0<kotlin.Unit>? dismissButton = null, androidx.compose.material.AlertDialogButtonLayout buttonLayout = androidx.compose.material.AlertDialogButtonLayout.SideBySide, androidx.compose.ui.graphics.Shape shape = medium);
    method @androidx.compose.runtime.Composable public static void AlertDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onCloseRequest, kotlin.jvm.functions.Function0<kotlin.Unit>? title = null, kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function0<kotlin.Unit> buttons, androidx.compose.ui.graphics.Shape shape = medium);
  }

  public final class AppBarKt {
    method @androidx.compose.runtime.Composable public static void BottomAppBar-2vnWOj4(androidx.compose.ui.Modifier modifier = Modifier, long backgroundColor = MaterialTheme.colors.primarySurface, long contentColor = contentColorFor(backgroundColor), androidx.compose.ui.graphics.Shape? cutoutShape = null, float elevation = androidx.compose.material.AppBarKt.BottomAppBarElevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void TopAppBar-_azMXew(kotlin.jvm.functions.Function0<kotlin.Unit> title, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit>? navigationIcon = null, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> actions = {}, long backgroundColor = MaterialTheme.colors.primarySurface, long contentColor = contentColorFor(backgroundColor), float elevation = androidx.compose.material.AppBarKt.TopAppBarElevation);
    method @androidx.compose.runtime.Composable public static void TopAppBar-ye6PvEY(androidx.compose.ui.Modifier modifier = Modifier, long backgroundColor = MaterialTheme.colors.primarySurface, long contentColor = contentColorFor(backgroundColor), float elevation = androidx.compose.material.AppBarKt.TopAppBarElevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
  }

  public final class BottomDrawerState extends androidx.compose.material.SwipeableState<androidx.compose.material.BottomDrawerValue> {
    ctor public BottomDrawerState(androidx.compose.material.BottomDrawerValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomDrawerValue,java.lang.Boolean> confirmStateChange);
    method public void close(kotlin.jvm.functions.Function0<kotlin.Unit>? onClosed = null);
    method public void expand(kotlin.jvm.functions.Function0<kotlin.Unit>? onExpanded = null);
    method public boolean isClosed();
    method public boolean isExpanded();
    method public boolean isOpen();
    method public void open(kotlin.jvm.functions.Function0<kotlin.Unit>? onOpened = null);
    property public final boolean isClosed;
    property public final boolean isExpanded;
    property public final boolean isOpen;
  }

  public enum BottomDrawerValue {
    method public static androidx.compose.material.BottomDrawerValue valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.BottomDrawerValue[] values();
    enum_constant public static final androidx.compose.material.BottomDrawerValue Closed;
    enum_constant public static final androidx.compose.material.BottomDrawerValue Expanded;
    enum_constant public static final androidx.compose.material.BottomDrawerValue Open;
  }

  public final class BottomNavigationKt {
    method @androidx.compose.runtime.Composable public static void BottomNavigation-ye6PvEY(androidx.compose.ui.Modifier modifier = Modifier, long backgroundColor = MaterialTheme.colors.primarySurface, long contentColor = contentColorFor(backgroundColor), float elevation = androidx.compose.material.BottomNavigationKt.BottomNavigationElevation, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void BottomNavigationItem-MkgEqK0(kotlin.jvm.functions.Function0<kotlin.Unit> icon, boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelect, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> label = emptyContent(), boolean alwaysShowLabels = true, long selectedContentColor = contentColor(), long unselectedContentColor = EmphasisAmbient.current.medium.applyEmphasis(selectedContentColor));
  }

  public final class ButtonConstants {
    method public androidx.compose.foundation.layout.InnerPadding getDefaultContentPadding();
    method public long getDefaultDisabledBackgroundColor();
    method public long getDefaultDisabledContentColor();
    method public float getDefaultIconSize();
    method public float getDefaultIconSpacing();
    method public float getDefaultMinHeight();
    method public float getDefaultMinWidth();
    method public androidx.compose.foundation.Border getDefaultOutlinedBorder();
    method public androidx.compose.foundation.layout.InnerPadding getDefaultTextContentPadding();
    method public float getOutlinedBorderSize();
    property public final androidx.compose.foundation.layout.InnerPadding DefaultContentPadding;
    property public final float DefaultIconSize;
    property public final float DefaultIconSpacing;
    property public final float DefaultMinHeight;
    property public final float DefaultMinWidth;
    property public final androidx.compose.foundation.layout.InnerPadding DefaultTextContentPadding;
    property public final float OutlinedBorderSize;
    property public final long defaultDisabledBackgroundColor;
    property public final long defaultDisabledContentColor;
    property public final androidx.compose.foundation.Border defaultOutlinedBorder;
    field public static final androidx.compose.material.ButtonConstants INSTANCE;
    field public static final float OutlinedBorderOpacity = 0.12f;
  }

  public final class ButtonKt {
    method @androidx.compose.runtime.Composable public static void Button-dTRFcho(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, float elevation = 2.dp, float disabledElevation = 0.dp, androidx.compose.ui.graphics.Shape shape = small, androidx.compose.foundation.Border? border = null, long backgroundColor = MaterialTheme.colors.primary, long disabledBackgroundColor = ButtonConstants.defaultDisabledBackgroundColor, long contentColor = contentColorFor(backgroundColor), long disabledContentColor = ButtonConstants.defaultDisabledContentColor, androidx.compose.foundation.layout.InnerPadding contentPadding = ButtonConstants.DefaultContentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static inline void OutlinedButton-bfhkJnE(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, float elevation = 0.dp, androidx.compose.ui.graphics.Shape shape = small, androidx.compose.foundation.Border? border = ButtonConstants.defaultOutlinedBorder, long backgroundColor = MaterialTheme.colors.surface, long contentColor = MaterialTheme.colors.primary, long disabledContentColor = ButtonConstants.defaultDisabledContentColor, androidx.compose.foundation.layout.InnerPadding contentPadding = ButtonConstants.DefaultContentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static inline void TextButton-bfhkJnE(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, float elevation = 0.dp, androidx.compose.ui.graphics.Shape shape = small, androidx.compose.foundation.Border? border = null, long backgroundColor = Color.Transparent, long contentColor = MaterialTheme.colors.primary, long disabledContentColor = ButtonConstants.defaultDisabledContentColor, androidx.compose.foundation.layout.InnerPadding contentPadding = ButtonConstants.DefaultTextContentPadding, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
  }

  public final class CardKt {
    method @androidx.compose.runtime.Composable public static void Card-bO96-ZE(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.graphics.Shape shape = medium, long color = MaterialTheme.colors.surface, long contentColor = contentColorFor(color), androidx.compose.foundation.Border? border = null, float elevation = 1.dp, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class CheckboxKt {
    method @androidx.compose.runtime.Composable public static void Checkbox-s5ZZtCg(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, boolean enabled = true, androidx.compose.ui.Modifier modifier = Modifier, long checkedColor = MaterialTheme.colors.secondary, long uncheckedColor = MaterialTheme.colors.onSurface, long disabledColor = MaterialTheme.colors.onSurface, long checkMarkColor = MaterialTheme.colors.surface);
    method @androidx.compose.runtime.Composable public static void TriStateCheckbox-6H4mBLc(androidx.compose.foundation.selection.ToggleableState state, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, boolean enabled = true, androidx.compose.ui.Modifier modifier = Modifier, long checkedColor = MaterialTheme.colors.secondary, long uncheckedColor = MaterialTheme.colors.onSurface, long disabledColor = MaterialTheme.colors.onSurface, long checkMarkColor = MaterialTheme.colors.surface);
  }

  @androidx.compose.runtime.Stable public final class Colors {
    method public androidx.compose.material.Colors copy-7EMdAJ8(long primary = this.primary, long primaryVariant = this.primaryVariant, long secondary = this.secondary, long secondaryVariant = this.secondaryVariant, long background = this.background, long surface = this.surface, long error = this.error, long onPrimary = this.onPrimary, long onSecondary = this.onSecondary, long onBackground = this.onBackground, long onSurface = this.onSurface, long onError = this.onError, boolean isLight = this.isLight);
    method public long getBackground();
    method public long getError();
    method public long getOnBackground();
    method public long getOnError();
    method public long getOnPrimary();
    method public long getOnSecondary();
    method public long getOnSurface();
    method public long getPrimary();
    method public long getPrimaryVariant();
    method public long getSecondary();
    method public long getSecondaryVariant();
    method public long getSurface();
    method public boolean isLight();
    property public final long background;
    property public final long error;
    property public final boolean isLight;
    property public final long onBackground;
    property public final long onError;
    property public final long onPrimary;
    property public final long onSecondary;
    property public final long onSurface;
    property public final long primary;
    property public final long primaryVariant;
    property public final long secondary;
    property public final long secondaryVariant;
    property public final long surface;
  }

  public final class ColorsKt {
    method @androidx.compose.runtime.Composable public static long contentColorFor-8_81llA(long color);
    method public static long contentColorFor-pz-ABmo(androidx.compose.material.Colors, long color);
    method public static androidx.compose.material.Colors darkColors-T8B3sC8(long primary = Color(4290479868), long primaryVariant = Color(4281794739), long secondary = Color(4278442694), long background = Color(4279374354), long surface = Color(4279374354), long error = Color(4291782265), long onPrimary = Color.Black, long onSecondary = Color.Black, long onBackground = Color.White, long onSurface = Color.White, long onError = Color.Black);
    method public static androidx.compose.material.Colors lightColors-hW7iGhc(long primary = Color(4284612846), long primaryVariant = Color(4281794739), long secondary = Color(4278442694), long secondaryVariant = Color(4278290310), long background = Color.White, long surface = Color.White, long error = Color(4289724448), long onPrimary = Color.White, long onSecondary = Color.Black, long onBackground = Color.Black, long onSurface = Color.Black, long onError = Color.White);
  }

  public enum DismissDirection {
    method public static androidx.compose.material.DismissDirection valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.DismissDirection[] values();
    enum_constant public static final androidx.compose.material.DismissDirection EndToStart;
    enum_constant public static final androidx.compose.material.DismissDirection StartToEnd;
  }

  @androidx.compose.material.ExperimentalMaterialApi public final class DismissState extends androidx.compose.material.SwipeableState<androidx.compose.material.DismissValue> {
    ctor public DismissState(androidx.compose.material.DismissValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissValue,java.lang.Boolean> confirmStateChange);
    method public void dismiss(androidx.compose.material.DismissDirection direction, kotlin.jvm.functions.Function0<kotlin.Unit>? onDismissed = null);
    method public androidx.compose.material.DismissDirection? getDismissDirection();
    method public boolean isDismissed(androidx.compose.material.DismissDirection direction);
    method public void reset(kotlin.jvm.functions.Function0<kotlin.Unit>? onReset = null);
    property public final androidx.compose.material.DismissDirection? dismissDirection;
  }

  public enum DismissValue {
    method public static androidx.compose.material.DismissValue valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.DismissValue[] values();
    enum_constant public static final androidx.compose.material.DismissValue Default;
    enum_constant public static final androidx.compose.material.DismissValue DismissedToEnd;
    enum_constant public static final androidx.compose.material.DismissValue DismissedToStart;
  }

  public final class DividerKt {
    method @androidx.compose.runtime.Composable public static void Divider-JRSVyrs(androidx.compose.ui.Modifier modifier = Modifier, long color = MaterialTheme.colors.onSurface.copy(DividerAlpha), float thickness = 1.dp, float startIndent = 0.dp);
  }

  public final class DrawerConstants {
    method public float getDefaultElevation();
    property public final float DefaultElevation;
    field public static final androidx.compose.material.DrawerConstants INSTANCE;
  }

  public final class DrawerKt {
    method @androidx.compose.runtime.Composable public static void BottomDrawerLayout-frgukrE(androidx.compose.material.BottomDrawerState drawerState = rememberBottomDrawerState(BottomDrawerValue.Closed), boolean gesturesEnabled = true, androidx.compose.ui.graphics.Shape drawerShape = large, float drawerElevation = DrawerConstants.DefaultElevation, kotlin.jvm.functions.Function0<kotlin.Unit> drawerContent, kotlin.jvm.functions.Function0<kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static void ModalDrawerLayout-_Tz54Oo(androidx.compose.material.DrawerState drawerState = rememberDrawerState(DrawerValue.Closed), boolean gesturesEnabled = true, androidx.compose.ui.graphics.Shape drawerShape = large, float drawerElevation = DrawerConstants.DefaultElevation, kotlin.jvm.functions.Function0<kotlin.Unit> drawerContent, kotlin.jvm.functions.Function0<kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static androidx.compose.material.BottomDrawerState rememberBottomDrawerState(androidx.compose.material.BottomDrawerValue initialValue, kotlin.jvm.functions.Function1<? super androidx.compose.material.BottomDrawerValue,java.lang.Boolean> confirmStateChange = { return true });
    method @androidx.compose.runtime.Composable public static androidx.compose.material.DrawerState rememberDrawerState(androidx.compose.material.DrawerValue initialValue, kotlin.jvm.functions.Function1<? super androidx.compose.material.DrawerValue,java.lang.Boolean> confirmStateChange = { return true });
  }

  public final class DrawerState extends androidx.compose.material.SwipeableState<androidx.compose.material.DrawerValue> {
    ctor public DrawerState(androidx.compose.material.DrawerValue initialValue, androidx.compose.animation.core.AnimationClockObservable clock, kotlin.jvm.functions.Function1<? super androidx.compose.material.DrawerValue,java.lang.Boolean> confirmStateChange);
    method public void close(kotlin.jvm.functions.Function0<kotlin.Unit>? onClosed = null);
    method public boolean isClosed();
    method public boolean isOpen();
    method public void open(kotlin.jvm.functions.Function0<kotlin.Unit>? onOpened = null);
    property public final boolean isClosed;
    property public final boolean isOpen;
  }

  public enum DrawerValue {
    method public static androidx.compose.material.DrawerValue valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.DrawerValue[] values();
    enum_constant public static final androidx.compose.material.DrawerValue Closed;
    enum_constant public static final androidx.compose.material.DrawerValue Open;
  }

  @androidx.compose.runtime.Immutable public interface Emphasis {
    method public long applyEmphasis-8_81llA(long color);
  }

  public final class EmphasisKt {
    method @androidx.compose.runtime.Composable public static void ProvideEmphasis(androidx.compose.material.Emphasis emphasis, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static androidx.compose.runtime.Ambient<androidx.compose.material.EmphasisLevels> getEmphasisAmbient();
  }

  public interface EmphasisLevels {
    method public androidx.compose.material.Emphasis getDisabled();
    method public androidx.compose.material.Emphasis getHigh();
    method public androidx.compose.material.Emphasis getMedium();
    property public abstract androidx.compose.material.Emphasis disabled;
    property public abstract androidx.compose.material.Emphasis high;
    property public abstract androidx.compose.material.Emphasis medium;
  }

  @kotlin.RequiresOptIn(message="This material API is experimental and is likely to change or to be removed in" + " the future.") public @interface ExperimentalMaterialApi {
  }

  public final class FloatingActionButtonKt {
    method @androidx.compose.runtime.Composable public static void ExtendedFloatingActionButton-NLuz2VQ(kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit>? icon = null, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(CornerSize(50)), long backgroundColor = MaterialTheme.colors.secondary, long contentColor = contentColorFor(backgroundColor), float elevation = 6.dp);
    method @androidx.compose.runtime.Composable public static void FloatingActionButton-NGcTDU4(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(CornerSize(50)), long backgroundColor = MaterialTheme.colors.secondary, long contentColor = contentColorFor(backgroundColor), float elevation = 6.dp, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
  }

  public final class IconButtonKt {
    method @androidx.compose.runtime.Composable public static void IconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
    method @androidx.compose.runtime.Composable public static void IconToggleButton(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, boolean enabled = true, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> icon);
  }

  public final class ListItemKt {
    method @androidx.compose.runtime.Composable public static void ListItem(String text, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit>? onClick = null, androidx.compose.ui.graphics.ImageAsset? icon = null, String? secondaryText = null, boolean singleLineSecondaryText = true, String? overlineText = null, String? metaText = null);
    method @androidx.compose.runtime.Composable public static void ListItem(androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit>? onClick = null, kotlin.jvm.functions.Function0<kotlin.Unit>? icon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? secondaryText = null, boolean singleLineSecondaryText = true, kotlin.jvm.functions.Function0<kotlin.Unit>? overlineText = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailing = null, kotlin.jvm.functions.Function0<kotlin.Unit> text);
  }

  public final class MaterialTheme {
    method public androidx.compose.material.Colors getColors();
    method public androidx.compose.material.Shapes getShapes();
    method public androidx.compose.material.Typography getTypography();
    property public final androidx.compose.material.Colors colors;
    property public final androidx.compose.material.Shapes shapes;
    property public final androidx.compose.material.Typography typography;
    field public static final androidx.compose.material.MaterialTheme INSTANCE;
  }

  public final class MaterialThemeKt {
    method @androidx.compose.runtime.Composable public static void MaterialTheme(androidx.compose.material.Colors colors = MaterialTheme.colors, androidx.compose.material.Typography typography = MaterialTheme.typography, androidx.compose.material.Shapes shapes = MaterialTheme.shapes, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class MenuKt {
    method @androidx.compose.runtime.Composable public static void DropdownMenu-iBtHMRc(kotlin.jvm.functions.Function0<kotlin.Unit> toggle, boolean expanded, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, androidx.compose.ui.Modifier toggleModifier = Modifier, long dropdownOffset = Position(0.dp, 0.dp), androidx.compose.ui.Modifier dropdownModifier = Modifier, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> dropdownContent);
    method @androidx.compose.runtime.Composable public static void DropdownMenuItem(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  public final class OutlinedTextFieldKt {
    method @androidx.compose.runtime.Composable public static void OutlinedTextField-UKtAkB8(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error);
    method @androidx.compose.runtime.Composable public static void OutlinedTextField-eW5ZqjU(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error);
  }

  public final class ProgressIndicatorConstants {
    method public float getDefaultStrokeWidth();
    property public final float DefaultStrokeWidth;
    field public static final androidx.compose.material.ProgressIndicatorConstants INSTANCE;
  }

  public final class ProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator-vFL-O2w(@FloatRange(from=0.0, to=1.0) float progress, androidx.compose.ui.Modifier modifier = Modifier, long color = MaterialTheme.colors.primary, float strokeWidth = ProgressIndicatorConstants.DefaultStrokeWidth);
    method @androidx.compose.runtime.Composable public static void CircularProgressIndicator-y0SQU_c(androidx.compose.ui.Modifier modifier = Modifier, long color = MaterialTheme.colors.primary, float strokeWidth = ProgressIndicatorConstants.DefaultStrokeWidth);
    method @androidx.compose.runtime.Composable public static void LinearProgressIndicator-PRBT5yc(@FloatRange(from=0.0, to=1.0) float progress, androidx.compose.ui.Modifier modifier = Modifier, long color = MaterialTheme.colors.primary);
    method @androidx.compose.runtime.Composable public static void LinearProgressIndicator-xNd_lko(androidx.compose.ui.Modifier modifier = Modifier, long color = MaterialTheme.colors.primary);
  }

  public final class RadioButtonConstants {
    method public long getDefaultDisabledColor();
    method public long getDefaultUnselectedColor();
    property public final long defaultDisabledColor;
    property public final long defaultUnselectedColor;
    field public static final androidx.compose.material.RadioButtonConstants INSTANCE;
  }

  public final class RadioButtonKt {
    method @androidx.compose.runtime.Composable public static void RadioButton-PKiHyag(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, long selectedColor = MaterialTheme.colors.secondary, long unselectedColor = RadioButtonConstants.defaultUnselectedColor, long disabledColor = RadioButtonConstants.defaultDisabledColor);
    method @Deprecated @androidx.compose.runtime.Composable public static void RadioGroup(kotlin.jvm.functions.Function1<? super androidx.compose.material.RadioGroupScope,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static void RadioGroup-ahtgBeg(java.util.List<java.lang.String> options, String? selectedOption, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onSelectedChange, androidx.compose.ui.Modifier modifier = Modifier, long radioColor = MaterialTheme.colors.secondary, androidx.compose.ui.text.TextStyle? textStyle = null);
  }

  @Deprecated @androidx.compose.runtime.Stable public final class RadioGroupScope {
    method @Deprecated @androidx.compose.runtime.Composable public void RadioGroupItem(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelect, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public void RadioGroupTextItem-5JR1Ee4(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelect, String text, androidx.compose.ui.Modifier modifier = Modifier, long radioColor = MaterialTheme.colors.secondary, androidx.compose.ui.text.TextStyle? textStyle = null);
  }

  public final class Scaffold {
    field public static final androidx.compose.material.Scaffold INSTANCE;
  }

  public enum Scaffold.FabPosition {
    method public static androidx.compose.material.Scaffold.FabPosition valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static androidx.compose.material.Scaffold.FabPosition[] values();
    enum_constant public static final androidx.compose.material.Scaffold.FabPosition Center;
    enum_constant public static final androidx.compose.material.Scaffold.FabPosition End;
  }

  public final class ScaffoldKt {
    method @androidx.compose.runtime.Composable public static void Scaffold-_B-Z858(androidx.compose.material.ScaffoldState scaffoldState = rememberScaffoldState(), kotlin.jvm.functions.Function0<kotlin.Unit>? topBar = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomBar = null, kotlin.jvm.functions.Function0<kotlin.Unit>? floatingActionButton = null, androidx.compose.material.Scaffold.FabPosition floatingActionButtonPosition = androidx.compose.material.Scaffold.FabPosition.End, boolean isFloatingActionButtonDocked = false, kotlin.jvm.functions.Function0<kotlin.Unit>? drawerContent = null, androidx.compose.ui.graphics.Shape drawerShape = large, float drawerElevation = DrawerConstants.DefaultElevation, long backgroundColor = MaterialTheme.colors.background, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.InnerPadding,kotlin.Unit> bodyContent);
    method @androidx.compose.runtime.Composable public static androidx.compose.material.ScaffoldState rememberScaffoldState(androidx.compose.material.DrawerState drawerState = rememberDrawerState(DrawerValue.Closed), boolean isDrawerGesturesEnabled = true);
  }

  @androidx.compose.runtime.Stable public final class ScaffoldState {
    ctor public ScaffoldState(androidx.compose.material.DrawerState drawerState, boolean isDrawerGesturesEnabled);
    method public androidx.compose.ui.geometry.Size? getBottomBarSize();
    method public androidx.compose.material.DrawerState getDrawerState();
    method public androidx.compose.ui.geometry.Size? getFloatingActionButtonSize();
    method public androidx.compose.ui.geometry.Size? getTopBarSize();
    method public boolean isDrawerGesturesEnabled();
    method public void setDrawerGesturesEnabled(boolean p);
    property public final androidx.compose.ui.geometry.Size? bottomBarSize;
    property public final androidx.compose.ui.geometry.Size? floatingActionButtonSize;
    property public final boolean isDrawerGesturesEnabled;
    property public final androidx.compose.ui.geometry.Size? topBarSize;
  }

  public final class Shapes {
    ctor public Shapes(androidx.compose.foundation.shape.CornerBasedShape small, androidx.compose.foundation.shape.CornerBasedShape medium, androidx.compose.foundation.shape.CornerBasedShape large);
    ctor public Shapes();
    method public androidx.compose.foundation.shape.CornerBasedShape component1();
    method public androidx.compose.foundation.shape.CornerBasedShape component2();
    method public androidx.compose.foundation.shape.CornerBasedShape component3();
    method public androidx.compose.material.Shapes copy(androidx.compose.foundation.shape.CornerBasedShape small, androidx.compose.foundation.shape.CornerBasedShape medium, androidx.compose.foundation.shape.CornerBasedShape large);
    method public androidx.compose.foundation.shape.CornerBasedShape getLarge();
    method public androidx.compose.foundation.shape.CornerBasedShape getMedium();
    method public androidx.compose.foundation.shape.CornerBasedShape getSmall();
  }

  public final class ShapesKt {
  }

  public final class SliderKt {
    method @androidx.compose.runtime.Composable public static void Slider-HFaW-Xw(float value, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange, androidx.compose.ui.Modifier modifier = Modifier, kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange = 0.0 .. 1.0, @IntRange(from=0) int steps = 0, kotlin.jvm.functions.Function0<kotlin.Unit> onValueChangeEnd = {}, long color = MaterialTheme.colors.primary);
  }

  public final class SnackbarConstants {
    method public long getDefaultActionPrimaryColor();
    method public long getDefaultBackgroundColor();
    property public final long defaultActionPrimaryColor;
    property public final long defaultBackgroundColor;
    field public static final androidx.compose.material.SnackbarConstants INSTANCE;
  }

  public final class SnackbarKt {
    method @androidx.compose.runtime.Composable public static void Snackbar-GiTsVJ0(androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit>? action = null, boolean actionOnNewLine = false, androidx.compose.ui.graphics.Shape shape = small, long backgroundColor = SnackbarConstants.defaultBackgroundColor, long contentColor = MaterialTheme.colors.surface, float elevation = 6.dp, kotlin.jvm.functions.Function0<kotlin.Unit> text);
  }

  public final class SurfaceKt {
    method @androidx.compose.runtime.Composable public static void Surface-bO96-ZE(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.graphics.Shape shape = androidx.compose.ui.graphics.RectangleShapeKt.RectangleShape, long color = MaterialTheme.colors.surface, long contentColor = contentColorFor(color), androidx.compose.foundation.Border? border = null, float elevation = 0.dp, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public static long getPrimarySurface(androidx.compose.material.Colors);
  }

  @androidx.compose.runtime.Immutable public final class SwipeProgress<T> {
    ctor public SwipeProgress(T! from, T! to, @FloatRange(from=null, to=null) float progress);
    method public T! component1();
    method public T! component2();
    method public float component3();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.SwipeProgress<T> copy(T! from, T! to, float progress);
    method public T! getFrom();
    method public float getProgress();
    method public T! getTo();
  }

  public final class SwipeToDismissKt {
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static void SwipeToDismiss(androidx.compose.material.DismissState state, androidx.compose.ui.Modifier modifier = Modifier, java.util.Set<? extends androidx.compose.material.DismissDirection> directions = setOf(EndToStart, StartToEnd), kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> background, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> dismissContent);
    method @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Composable public static androidx.compose.material.DismissState rememberDismissState(androidx.compose.material.DismissValue initialValue = androidx.compose.material.DismissValue.Default, kotlin.jvm.functions.Function1<? super androidx.compose.material.DismissValue,java.lang.Boolean> confirmStateChange = { return true });
  }

  public final class SwipeableKt {
    method @androidx.compose.material.ExperimentalMaterialApi public static kotlin.jvm.functions.Function3<androidx.compose.ui.unit.Density,java.lang.Float,java.lang.Float,java.lang.Float> fixedThresholds-0680j_4(float offset);
    method @androidx.compose.material.ExperimentalMaterialApi public static kotlin.jvm.functions.Function3<androidx.compose.ui.unit.Density,java.lang.Float,java.lang.Float,java.lang.Float> fractionalThresholds(@FloatRange(from=0.0, to=1.0) float fraction);
    method @androidx.compose.material.ExperimentalMaterialApi public static <T> androidx.compose.ui.Modifier swipeable(androidx.compose.ui.Modifier, androidx.compose.material.SwipeableState<T> state, java.util.Map<java.lang.Float,? extends T> anchors, kotlin.jvm.functions.Function3<? super androidx.compose.ui.unit.Density,? super java.lang.Float,? super java.lang.Float,java.lang.Float> thresholds, androidx.compose.ui.gesture.scrollorientationlocking.Orientation orientation, boolean enabled = true, boolean reverseDirection = false, float minValue = elvis {
    var varf5a37bc5: <ErrorType> = anchors.keys.<anonymous class>()
    if (varf5a37bc5 != null) varf5a37bc5 else Float.NEGATIVE_INFINITY
}, float maxValue = elvis {
    var var1e0454da: <ErrorType> = anchors.keys.<anonymous class>()
    if (var1e0454da != null) var1e0454da else Float.POSITIVE_INFINITY
}, androidx.compose.foundation.InteractionState? interactionState = null);
  }

  @androidx.compose.material.ExperimentalMaterialApi @androidx.compose.runtime.Stable public class SwipeableState<T> {
    ctor public SwipeableState(T! initialValue, androidx.compose.animation.core.AnimationClockObservable clock, internal kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> confirmStateChange, internal androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec);
    method @androidx.compose.material.ExperimentalMaterialApi public final void animateTo(T? targetValue, androidx.compose.animation.core.AnimationSpec<java.lang.Float> anim = animationSpec, kotlin.jvm.functions.Function2<? super androidx.compose.animation.core.AnimationEndReason,? super T,kotlin.Unit>? onEnd = null);
    method public final androidx.compose.runtime.State<java.lang.Float> getOffset();
    method public final float getSwipeDirection();
    method public final androidx.compose.material.SwipeProgress<T> getSwipeProgress();
    method public final T! getSwipeTarget();
    method public final T! getValue();
    method public final boolean isAnimationRunning();
    method @androidx.compose.material.ExperimentalMaterialApi public final void snapTo(T? targetValue);
    property public final boolean isAnimationRunning;
    property public final androidx.compose.runtime.State<java.lang.Float> offset;
    property public final float swipeDirection;
    property public final androidx.compose.material.SwipeProgress<T> swipeProgress;
    property public final T! swipeTarget;
    property public final T! value;
  }

  public final class SwitchKt {
    method @androidx.compose.runtime.Composable public static void Switch-y3bT5vQ(boolean checked, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, androidx.compose.ui.Modifier modifier = Modifier, boolean enabled = true, long color = MaterialTheme.colors.secondaryVariant);
  }

  public final class TabKt {
    method @androidx.compose.runtime.Composable public static void Tab(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelected, androidx.compose.ui.Modifier modifier = Modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void Tab-fk33sX0(kotlin.jvm.functions.Function0<kotlin.Unit> text = emptyContent(), kotlin.jvm.functions.Function0<kotlin.Unit> icon = emptyContent(), boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onSelected, androidx.compose.ui.Modifier modifier = Modifier, long activeColor = contentColor(), long inactiveColor = EmphasisAmbient.current.medium.applyEmphasis(activeColor));
    method @androidx.compose.runtime.Composable public static <T> void TabRow-7iP9hSk(java.util.List<? extends T> items, int selectedIndex, androidx.compose.ui.Modifier modifier = Modifier, long backgroundColor = MaterialTheme.colors.primarySurface, long contentColor = contentColorFor(backgroundColor), boolean scrollable = false, kotlin.jvm.functions.Function1<? super java.util.List<androidx.compose.material.TabRow.TabPosition>,kotlin.Unit> indicatorContainer = { tabPositions -> TabRow.IndicatorContainer(tabPositions, selectedIndex, { 
    TabRow.Indicator()
}) }, kotlin.jvm.functions.Function0<kotlin.Unit> divider = { Divider(1.dp, contentColor().copy(DividerOpacity)) }, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,kotlin.Unit> tab);
  }

  public final class TabRow {
    method @androidx.compose.runtime.Composable public void Indicator-xNd_lko(androidx.compose.ui.Modifier modifier = Modifier, long color = contentColor());
    method @androidx.compose.runtime.Composable public void IndicatorContainer(java.util.List<androidx.compose.material.TabRow.TabPosition> tabPositions, int selectedIndex, kotlin.jvm.functions.Function0<kotlin.Unit> indicator);
    field public static final androidx.compose.material.TabRow INSTANCE;
  }

  @androidx.compose.runtime.Immutable public static final class TabRow.TabPosition {
    method public float component1();
    method public float component2();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.TabRow.TabPosition copy-ioHfwGI(float left, float width);
    method public float getLeft();
    method public float getRight();
    method public float getWidth();
    property public final float right;
  }

  public final class TextFieldImplKt {
  }

  public final class TextFieldKt {
    method @Deprecated @androidx.compose.runtime.Composable public static void FilledTextField-DzzVQB0(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error, long backgroundColor = MaterialTheme.colors.onSurface, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(ZeroCornerSize, ZeroCornerSize));
    method @Deprecated @androidx.compose.runtime.Composable public static void FilledTextField-pcAQjko(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error, long backgroundColor = MaterialTheme.colors.onSurface, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(ZeroCornerSize, ZeroCornerSize));
    method @androidx.compose.runtime.Composable public static void TextField-DzzVQB0(androidx.compose.ui.text.input.TextFieldValue value, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.input.TextFieldValue,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error, long backgroundColor = MaterialTheme.colors.onSurface, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(ZeroCornerSize, ZeroCornerSize));
    method @androidx.compose.runtime.Composable public static void TextField-pcAQjko(String value, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, kotlin.jvm.functions.Function0<kotlin.Unit> label, androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.text.TextStyle textStyle = currentTextStyle(), kotlin.jvm.functions.Function0<kotlin.Unit>? placeholder = null, kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon = null, kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon = null, boolean isErrorValue = false, androidx.compose.ui.text.input.VisualTransformation visualTransformation = VisualTransformation.None, androidx.compose.ui.text.input.KeyboardType keyboardType = KeyboardType.Text, androidx.compose.ui.text.input.ImeAction imeAction = ImeAction.Unspecified, kotlin.jvm.functions.Function2<? super androidx.compose.ui.text.input.ImeAction,? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onImeActionPerformed = { _, _ ->  }, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onFocusChanged = {}, kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.SoftwareKeyboardController,kotlin.Unit> onTextInputStarted = {}, long activeColor = MaterialTheme.colors.primary, long inactiveColor = MaterialTheme.colors.onSurface, long errorColor = MaterialTheme.colors.error, long backgroundColor = MaterialTheme.colors.onSurface, androidx.compose.ui.graphics.Shape shape = MaterialTheme.shapes.small.copy(ZeroCornerSize, ZeroCornerSize));
  }

  @androidx.compose.runtime.Immutable public final class Typography {
    ctor public Typography(androidx.compose.ui.text.font.FontFamily defaultFontFamily, androidx.compose.ui.text.TextStyle h1, androidx.compose.ui.text.TextStyle h2, androidx.compose.ui.text.TextStyle h3, androidx.compose.ui.text.TextStyle h4, androidx.compose.ui.text.TextStyle h5, androidx.compose.ui.text.TextStyle h6, androidx.compose.ui.text.TextStyle subtitle1, androidx.compose.ui.text.TextStyle subtitle2, androidx.compose.ui.text.TextStyle body1, androidx.compose.ui.text.TextStyle body2, androidx.compose.ui.text.TextStyle button, androidx.compose.ui.text.TextStyle caption, androidx.compose.ui.text.TextStyle overline);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component10();
    method public androidx.compose.ui.text.TextStyle component11();
    method public androidx.compose.ui.text.TextStyle component12();
    method public androidx.compose.ui.text.TextStyle component13();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public androidx.compose.ui.text.TextStyle component4();
    method public androidx.compose.ui.text.TextStyle component5();
    method public androidx.compose.ui.text.TextStyle component6();
    method public androidx.compose.ui.text.TextStyle component7();
    method public androidx.compose.ui.text.TextStyle component8();
    method public androidx.compose.ui.text.TextStyle component9();
    method @androidx.compose.runtime.Immutable public androidx.compose.material.Typography copy(androidx.compose.ui.text.TextStyle h1, androidx.compose.ui.text.TextStyle h2, androidx.compose.ui.text.TextStyle h3, androidx.compose.ui.text.TextStyle h4, androidx.compose.ui.text.TextStyle h5, androidx.compose.ui.text.TextStyle h6, androidx.compose.ui.text.TextStyle subtitle1, androidx.compose.ui.text.TextStyle subtitle2, androidx.compose.ui.text.TextStyle body1, androidx.compose.ui.text.TextStyle body2, androidx.compose.ui.text.TextStyle button, androidx.compose.ui.text.TextStyle caption, androidx.compose.ui.text.TextStyle overline);
    method public androidx.compose.ui.text.TextStyle getBody1();
    method public androidx.compose.ui.text.TextStyle getBody2();
    method public androidx.compose.ui.text.TextStyle getButton();
    method public androidx.compose.ui.text.TextStyle getCaption();
    method public androidx.compose.ui.text.TextStyle getH1();
    method public androidx.compose.ui.text.TextStyle getH2();
    method public androidx.compose.ui.text.TextStyle getH3();
    method public androidx.compose.ui.text.TextStyle getH4();
    method public androidx.compose.ui.text.TextStyle getH5();
    method public androidx.compose.ui.text.TextStyle getH6();
    method public androidx.compose.ui.text.TextStyle getOverline();
    method public androidx.compose.ui.text.TextStyle getSubtitle1();
    method public androidx.compose.ui.text.TextStyle getSubtitle2();
  }

  public final class TypographyKt {
  }

}

package androidx.compose.material.ripple {

  public final class RippleAnimationKt {
  }

  @androidx.compose.runtime.Stable public final class RippleIndication implements androidx.compose.foundation.Indication {
    method public androidx.compose.foundation.IndicationInstance createInstance();
  }

  public final class RippleIndicationKt {
    method @androidx.compose.runtime.Composable public static androidx.compose.material.ripple.RippleIndication RippleIndication-DudYJDg(boolean bounded = true, androidx.compose.ui.unit.Dp? radius = null, long color = Color.Unset);
  }

  @androidx.compose.material.ExperimentalMaterialApi public interface RippleOpacity {
    method public float opacityForInteraction(androidx.compose.foundation.Interaction interaction);
  }

  @androidx.compose.material.ExperimentalMaterialApi public interface RippleTheme {
    method @androidx.compose.runtime.Composable public long defaultColor();
    method @androidx.compose.runtime.Composable public androidx.compose.material.ripple.RippleOpacity rippleOpacity();
  }

  public final class RippleThemeKt {
    method public static androidx.compose.runtime.ProvidableAmbient<androidx.compose.material.ripple.RippleTheme> getRippleThemeAmbient();
  }

}

