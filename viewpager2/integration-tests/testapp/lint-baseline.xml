<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 4.2.0-alpha15" client="gradle" variant="debug" version="4.2.0-alpha15">

    <issue
        id="UnsafeNewApiCall"
        message="This call is to a method from API 17, the call containing class null is not annotated with @RequiresApi(x) where x is at least 17. Either annotate the containing class with at least @RequiresApi(17) or move the call to a static method in a wrapper class annotated with at least @RequiresApi(17)."
        errorLine1="                        textDirection = View.TEXT_DIRECTION_LOCALE"
        errorLine2="                        ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/viewpager2/integration/testapp/MutableCollectionBaseActivity.kt"
            line="65"
            column="25"/>
    </issue>

    <issue
        id="UnsafeNewApiCall"
        message="This call is to a method from API 17, the call containing class null is not annotated with @RequiresApi(x) where x is at least 17. Either annotate the containing class with at least @RequiresApi(17) or move the call to a static method in a wrapper class annotated with at least @RequiresApi(17)."
        errorLine1="                        textDirection = View.TEXT_DIRECTION_LOCALE"
        errorLine2="                        ~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/viewpager2/integration/testapp/MutableCollectionBaseActivity.kt"
            line="65"
            column="25"/>
    </issue>

    <issue
        id="AllowBackup"
        message="On SDK version 23 and up, your app data will be automatically backed up and restored on app install. Consider adding the attribute `android:fullBackupContent` to specify an `@xml` resource which configures which files to backup. More info: https://developer.android.com/training/backup/autosyncapi.html"
        errorLine1="    &lt;application"
        errorLine2="     ~~~~~~~~~~~">
        <location
            file="src/main/AndroidManifest.xml"
            line="21"
            column="6"/>
    </issue>

    <issue
        id="AllowBackup"
        message="Should explicitly set `android:allowBackup` to `true` or `false` (it&apos;s `true` by default, and that can have some security implications for the application&apos;s data)"
        errorLine1="    &lt;application"
        errorLine2="     ~~~~~~~~~~~">
        <location
            file="src/main/AndroidManifest.xml"
            line="21"
            column="6"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        errorLine1="&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2=" ~~~~~~~~~~~~">
        <location
            file="src/main/res/layout-land/activity_tablayout.xml"
            line="17"
            column="2"/>
    </issue>

    <issue
        id="NestedWeights"
        message="Nested weights are bad for performance"
        errorLine1="            android:layout_weight=&quot;1&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/res/layout-land/activity_tablayout.xml"
            line="43"
            column="13"/>
    </issue>

    <issue
        id="Overdraw"
        message="Possible overdraw: Root element paints background `#AA0C2962` with a theme that also paints a background (inferred theme is `@style/Theme.AppCompat.Light`)"
        errorLine1="    android:background=&quot;#AA0C2962&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/res/layout/activity_viewpager2.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        message="Possible overdraw: Root element paints background `#0C2962` with a theme that also paints a background (inferred theme is `@style/Theme.AppCompat.Light`)"
        errorLine1="    android:background=&quot;#0C2962&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/res/layout/item_preview_pages.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="ButtonStyle"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        errorLine1="            &lt;Button"
        errorLine2="             ~~~~~~">
        <location
            file="src/main/res/layout/activity_mutable_collection.xml"
            line="104"
            column="14"/>
    </issue>

    <issue
        id="ButtonStyle"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        errorLine1="            &lt;Button"
        errorLine2="             ~~~~~~">
        <location
            file="src/main/res/layout/activity_mutable_collection.xml"
            line="112"
            column="14"/>
    </issue>

    <issue
        id="ButtonStyle"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        errorLine1="            &lt;Button"
        errorLine2="             ~~~~~~">
        <location
            file="src/main/res/layout/activity_mutable_collection.xml"
            line="120"
            column="14"/>
    </issue>

    <issue
        id="ButtonStyle"
        message="Buttons in button bars should be borderless; use `style=&quot;?android:attr/buttonBarButtonStyle&quot;` (and `?android:attr/buttonBarStyle` on the parent)"
        errorLine1="            &lt;Button"
        errorLine2="             ~~~~~~">
        <location
            file="src/main/res/layout/activity_mutable_collection.xml"
            line="128"
            column="14"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="`onTouch` lambda should call `View#performClick` when a click is detected"
        errorLine1="        findViewById&lt;View>(R.id.touchpad).setOnTouchListener { _, event ->"
        errorLine2="                                                             ^">
        <location
            file="src/main/java/androidx/viewpager2/integration/testapp/FakeDragActivity.kt"
            line="55"
            column="62"/>
    </issue>

</issues>
