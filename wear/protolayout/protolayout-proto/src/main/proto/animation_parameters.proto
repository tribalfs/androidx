// Parameters that can be used to customize an animation.
syntax = "proto3";

package androidx.wear.protolayout.expression.proto;

option java_package = "androidx.wear.protolayout.expression.proto";
option java_outer_classname = "AnimationParameterProto";

// Animation parameters that can be added to any animatable node.
message AnimationSpec {
  // The duration of the animation in milliseconds. If not set, defaults to
  // 300ms.
  // @deprecated Use animation_parameters instead.
  uint32 duration_millis = 1;

  // The delay to start the animation in milliseconds. If not set, defaults to
  // 0.
  // @deprecated Use animation_parameters instead.
  uint32 start_delay_millis = 2;

  // The easing to be used for adjusting an animation's fraction. If not set,
  // defaults to Linear Interpolator.
  // @deprecated Use animation_parameters instead.
  Easing easing = 3;

  // Animation parameters including duration, easing and repeat delay.
  AnimationParameters animation_parameters = 4;

  // The repeatable mode to be used for specifying repetition parameters for the
  // animation. If not set, animation won't be repeated.
  Repeatable repeatable = 5;
}

// Animation specs of duration, easing and repeat delay.
message AnimationParameters {
  // The duration of the animation in milliseconds. If not set, defaults to
  // 300ms.
  uint64 duration_millis = 1;

  // The easing to be used for adjusting an animation's fraction. If not set,
  // defaults to Linear Interpolator.
  Easing easing = 2;

  // Animation delay in millis.
  oneof optional_delay_millis {
    // Animation delay in millis. When used outside repeatable, this is the
    // delay to start the animation in milliseconds. When set inside repeatable,
    // this is the delay before repeating animation in milliseconds. If not set,
    // no delay will be applied.
    uint64 delay_millis = 3;
  }
}

// The easing to be used for adjusting an animation's fraction. This allows
// animation to speed up and slow down, rather than moving at a constant rate.
// If not set, defaults to Linear Interpolator.
message Easing {
  oneof inner {
    // The cubic polynomial easing that implements third-order Bezier curves.
    CubicBezierEasing cubic_bezier = 1;
  }
}

// The cubic polynomial easing that implements third-order Bezier curves. This
// is equivalent to the Android PathInterpolator.
message CubicBezierEasing {
  // The x coordinate of the first control point. The line through the point (0,
  // 0) and the first control point is tangent to the easing at the point (0, 0)
  float x1 = 1;

  // The y coordinate of the first control point. The line through the point (0,
  // 0) and the first control point is tangent to the easing at the point (0,
  // 0).
  float y1 = 2;

  // The x coordinate of the second control point. The line through the point
  // (1, 1) and the second control point is tangent to the easing at the point
  // (1, 1).
  float x2 = 3;

  // The y coordinate of the second control point. The line through the point
  // (1, 1) and the second control point is tangent to the easing at the point
  // (1, 1).
  float y2 = 4;
}

// The repeatable mode to be used for specifying how many times animation will
// be repeated.
message Repeatable {
  // The number specifying how many times animation will be repeated. If
  // not set, defaults to 0, i.e. repeat infinitely.
  uint32 iterations = 1;

  // The repeat mode to specify how animation will behave when repeated. If not
  // set, defaults to restart.
  RepeatMode repeat_mode = 2;

  reserved 3, 4, 5;

  // Optional custom parameters for the forward passes of animation. If not set,
  // use the main animation parameters set outside of Repeatable.
  AnimationParameters forward_repeat_override = 6;

  // Optional custom parameters for the reverse passes of animation. If not set,
  // use the main animation parameters set outside of Repeatable.
  AnimationParameters reverse_repeat_override = 7;
}

// The repeat mode to specify how animation will behave when repeated.
enum RepeatMode {
  // The unknown repeat mode.
  REPEAT_MODE_UNKNOWN = 0;

  // The repeat mode where animation restarts from the beginning when repeated.
  REPEAT_MODE_RESTART = 1;

  // The repeat mode where animation is played in reverse when repeated.
  REPEAT_MODE_REVERSE = 2;
}
