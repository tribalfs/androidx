// Composable layout elements that can be combined together to create renderable
// UI layouts.
syntax = "proto3";

package androidx.wear.tiles.proto;

import "action.proto";
import "color.proto";
import "dimension.proto";

import "types.proto";


option java_package = "androidx.wear.tiles.proto";
option java_outer_classname = "LayoutElementProto";

// The horizontal alignment of an element within its container.
enum HorizontalAlignment {
  // Horizontal alignment is undefined.
  HALIGN_UNDEFINED = 0;

  // Horizontally align to the left.
  HALIGN_LEFT = 1;

  // Horizontally align to center.
  HALIGN_CENTER = 2;

  // Horizontally align to the right.
  HALIGN_RIGHT = 3;

  // Horizontally align to the content start (left in LTR layouts, right in RTL
  // layouts).
  HALIGN_START = 4;

  // Horizontally align to the content end (right in LTR layouts, left in RTL
  // layouts).
  HALIGN_END = 5;
}

// An extensible HorizontalAlignment property.
message HorizontalAlignmentProp {
  // The value
  HorizontalAlignment value = 1;
}

// The vertical alignment of an element within its container.
enum VerticalAlignment {
  // Vertical alignment is undefined.
  VALIGN_UNDEFINED = 0;

  // Vertically align to the top.
  VALIGN_TOP = 1;

  // Vertically align to center.
  VALIGN_CENTER = 2;

  // Vertically align to the bottom.
  VALIGN_BOTTOM = 3;
}

// An extensible VerticalAlignment property.
message VerticalAlignmentProp {
  // The value.
  VerticalAlignment value = 1;
}

// The weight to be applied to the font.
enum FontWeight {
  // Font weight is undefined.
  FONT_WEIGHT_UNDEFINED = 0;

  // Normal font weight.
  FONT_WEIGHT_NORMAL = 400;

  // Bold font weight.
  FONT_WEIGHT_BOLD = 700;
}

// An extensible FontWeight property.
message FontWeightProp {
  // The value.
  FontWeight value = 1;
}

// The styling of a font (e.g. font size, and metrics).
message FontStyle {
  // The size of the font, in scaled pixels (sp). If not specified, defaults to
  // the size of the system's "body" font.
  SpProp size = 1;

  // Whether the text should be rendered in a bold typeface. If not specified,
  // defaults to "false".
  //
  // DEPRECATED: Use weight instead.
  BoolProp bold = 2 [deprecated = true];

  // Whether the text should be rendered in a italic typeface. If not specified,
  // defaults to "false".
  BoolProp italic = 3;

  // Whether the text should be rendered with an underline. If not specified,
  // defaults to "false".
  BoolProp underline = 4;

  // The text color. If not defined, defaults to white.
  ColorProp color = 5;

  // The weight of the font. If the provided value is not supported on a
  // platform, the nearest supported value will be used. If not defined, or
  // when set to an invalid value, defaults to "normal".
  FontWeightProp weight = 6;
}

// Alignment of a text element.
enum TextAlignment {
  // Alignment is undefined.
  TEXT_ALIGN_UNDEFINED = 0;

  // Align to the "start" of the Text element (left in LTR layouts, right in
  // RTL layouts).
  TEXT_ALIGN_START = 1;

  // Align to the center of the Text element.
  TEXT_ALIGN_CENTER = 2;

  // Align to the "end" of the Text element (right in LTR layouts, left in RTL
  // layouts).
  TEXT_ALIGN_END = 3;
}

// An extensible TextAlignment property.
message TextAlignmentProp {
  // The value.
  TextAlignment value = 1;
}

// How text that will not fit inside the bounds of a Text element will be
// handled.
//
// TODO(b/175536688): Rename this to align with Spannable
enum TextOverflow {
  // Overflow behavior is undefined.
  TEXT_OVERFLOW_UNDEFINED = 0;

  // Truncate the text to fit inside of the Text element's bounds. If text is
  // truncated, it will be truncated on a word boundary.
  TEXT_OVERFLOW_TRUNCATE = 1;

  // Truncate the text to fit in the Text element's bounds, but add an ellipsis
  // (i.e. ...) to the end of the text if it has been truncated.
  TEXT_OVERFLOW_ELLIPSIZE_END = 2;
}

// An extensible TextOverflow property.
message TextOverflowProp {
  // The value.
  TextOverflow value = 1;
}

// The anchor position of an Arc's elements. This is used to specify how
// elements added to an Arc should be laid out with respect to anchor_angle.
//
// As an example, assume that the following diagrams are wrapped to an arc, and
// each represents an Arc element containing a single Text element. The Text
// element's anchor_angle is "0" for all cases.
//
// ```
// ARC_ANCHOR_START:
// -180                                0                                    180
//                                     Hello World!
//
//
// ARC_ANCHOR_CENTER:
// -180                                0                                    180
//                                Hello World!
//
// ARC_ANCHOR_END:
// -180                                0                                    180
//                          Hello World!
// ```
enum ArcAnchorType {
  // Anchor position is undefined.
  ARC_ANCHOR_UNDEFINED = 0;

  // Anchor at the start of the elements. This will cause elements added to an
  // arc to begin at the given anchor_angle, and sweep around to the right.
  ARC_ANCHOR_START = 1;

  // Anchor at the center of the elements. This will cause the center of the
  // whole set of elements added to an arc to be pinned at the given
  // anchor_angle.
  ARC_ANCHOR_CENTER = 2;

  // Anchor at the end of the elements. This will cause the set of elements
  // inside the arc to end at the specified anchor_angle, i.e. all elements
  // should be to the left of anchor_angle.
  ARC_ANCHOR_END = 3;
}

// An extensible ArcAnchorType property.
message ArcAnchorTypeProp {
  // The value.
  ArcAnchorType value = 1;
}

// The padding around a Box element.
message Padding {
  // The padding on the end of the content, depending on the layout direction,
  // in DP and the value of "rtl_aware".
  DpProp end = 1;

  // The padding on the start of the content, depending on the layout direction,
  // in DP and the value of "rtl_aware".
  DpProp start = 2;

  // The padding at the top, in DP.
  DpProp top = 3;

  // The padding at the bottom, in DP.
  DpProp bottom = 4;

  // Whether the start/end padding is aware of RTL support. If true, the values
  // for start/end will follow the layout direction (i.e. start will refer to
  // the right hand side of the container if the device is using an RTL locale).
  // If false, start/end will always map to left/right, accordingly.
  BoolProp rtl_aware = 5;
}

// The border around a Box element.
message Border {
  // The width of the border, in DP.
  DpProp width = 1;

  // The color of the border.
  ColorProp color = 2;
}

// The corner of a Box element.
message Corner {
  // The radius of the corner in DP.
  DpProp radius = 1;
}

// The style of a Text element.
message TextStyle {
  // The text color. If not defined, defaults to white.
  //
  // DEPRECATED: Use color property of FontStyle instead.
  ColorProp color = 1 [deprecated = true];

  // The maximum number of lines that can be represented by the Text element.
  // If not defined, the Text element will be treated as a single-line element.
  Int32Prop max_lines = 2;

  // Alignment of the text within its bounds. Note that a Text element will size
  // itself to wrap its contents, so this option is meaningless for single-line
  // text (for that, use alignment of the outer container). For multi-line text,
  // however, this will set the alignment of lines relative to the Text element
  // bounds. If not defined, defaults to TEXT_ALIGN_CENTER.
  TextAlignmentProp multiline_alignment = 3;

  // Specifies how to handle text which overflows the bound of the Text element.
  // A Text element will grow as large as possible inside its parent container
  // (while still respecting max_lines); if it cannot grow large  enough to
  // render all of its text, the text which cannot fit inside its container will
  // be truncated. If not defined, defaults to TEXT_OVERFLOW_TRUNCATE.
  TextOverflowProp overflow = 4;
}

// The style of a Spannable element.
message SpannableStyle {
  // The maximum number of lines that can be represented by the Spannable
  // element. If not defined, the Text element will be treated as a single-line
  // element.
  Int32Prop max_lines = 1;

  // Alignment of the Spannable content within its bounds. Note that a Spannable
  // element will size itself to wrap its contents, so this option is
  // meaningless for single-line content (for that, use alignment of the outer
  // container). For multi-line content, however, this will set the alignment of
  // lines relative to the Spannable element bounds. If not defined, defaults to
  // TEXT_ALIGN_CENTER.
  HorizontalAlignmentProp multiline_alignment = 2;

  // Specifies how to handle content which overflows the bound of the Spannable
  // element. A Spannable element will grow as large as possible inside its
  // parent container (while still respecting max_lines); if it cannot grow
  // large enough to render all of its content, the content which cannot fit
  // inside its container will  be truncated. If not defined, defaults to
  // TEXT_OVERFLOW_TRUNCATE.
  TextOverflowProp overflow = 3;
}

// The style of a Box.
message BoxStyle {
  // The background color for this Box. If not defined, defaults to being
  // transparent.
  ColorProp background_color = 1;

  // An optional padding inside of this Box. If not defined, Box will not have
  // any padding.
  Padding padding = 2;

  // An optional border for this Box. If not defined, Box will not have a
  // border.
  Border border = 3;

  // The corner properties of this Box. This only affects the drawing of this
  // Box if either "color" or "border" are also set. If not defined, defaults to
  // having a square corner.
  Corner corner = 4;
}

// The style of a line.
message LineStyle {
  // Color of this line. If not defined, defaults to white.
  ColorProp color = 1;
}

// A text string.
message Text {
  // The text to render.
  StringProp text = 1;

  // An optional style for this text string.
  //
  // DEPRECATED: Use Spannable with SpannableStyle instead.
  TextStyle style = 2 [deprecated = true];

  // The style of font to use (size, bold etc). If not specified, defaults to
  // the platform's default body font.
  FontStyle font_style = 3;
}

// A holder for an element which can have associated Action items for click
// events. When an element wrapped in a Clickable is clicked, it will fire the
// associated action.
message Clickable {
  // The ID associated with this action.
  string id = 1;

  // The layout element to attach the action to.
  LayoutElement content = 2;

  // The action to perform when "content" is clicked.
  Action on_click = 3;
}

// How content which does not match the dimensions of its bounds (e.g. an image
// resource being drawn inside an Image) will be resized to fit its bounds.
enum ContentScaleMode {
  // Content scaling is undefined.
  CONTENT_SCALE_MODE_UNDEFINED = 0;

  // Content will be scaled to fit inside its bounds, proportionally. As an
  // example, If a 10x5 image was going to be drawn inside a 50x50 Image
  // element, the actual image resource would be drawn as a 50x25 image,
  // centered within the 50x50 bounds.
  CONTENT_SCALE_MODE_FIT = 1;

  // Content will be resized proportionally so it completely fills its bounds,
  // and anything outside of the bounds will be cropped. As an example, if a
  // 10x5 image was going to be drawn inside a 50x50 Image element, the image
  // resource would be drawn as a 100x50 image, centered within its bounds (and
  // with 25px cropped from both the left and right sides).
  CONTENT_SCALE_MODE_CROP = 2;

  // Content will be resized to fill its bounds, without taking into account the
  // aspect ratio. If a 10x5 image was going to be drawn inside a 50x50 Image
  // element, the image would be drawn as a 50x50 image, stretched vertically.
  CONTENT_SCALE_MODE_FILL_BOUNDS = 3;
}

// An extensible ContentScaleMode property.
message ContentScaleModeProp {
  ContentScaleMode value = 1;
}

// An image.
//
// Images used in this element must exist in the resource bundle that
// corresponds to this layout. Images must have their dimension specified, and
// will be rendered at this width and height, regardless of their native
// dimension.
message Image {
  // The resource_id of the image to render. This must exist in the supplied
  // resource bundle.
  StringProp resource_id = 1;

  // The width of this image. If not defined, the image will not be rendered.
  ImageDimension width = 2;

  // The height of this image. If not defined, the image will not be rendered.
  ImageDimension height = 3;

  // How to scale the image resource inside the bounds specified by width/height
  // if its size does not match those bounds. Defaults to
  // CONTENT_SCALE_MODE_FIT.
  ContentScaleModeProp content_scale_mode = 4;
}

// A simple spacer, typically used to provide padding between adjacent elements.
message Spacer {
  // The width of this Spacer. When this is added as the direct child of an Arc,
  // this must be specified as an angular dimension, otherwise a linear
  // dimension must be used. If not defined, defaults to 0.
  LinearOrAngularDimension width = 1;

  // The height of this spacer. If not defined, defaults to 0.
  DpProp height = 2;
}

// A container which stacks all of its children on top of one another. This also
// allows to add a background color, or to have a border around them with some
// padding.
message Box {
  // The child element(s) to wrap.
  repeated LayoutElement contents = 1;

  // The style of the Box (padding, background color, border etc).
  BoxStyle style = 2;

  // The height of this Box. If not defined, this will size itself to fit all of
  // its children (i.e. a WrappedDimension).
  ContainerDimension height = 3;

  // The width of this Box. If not defined, this will size itself to fit all of
  // its children (i.e. a WrappedDimension).
  ContainerDimension width = 4;

  // The horizontal alignment of the element inside this Box. If not defined,
  // defaults to HALIGN_CENTER.
  HorizontalAlignmentProp horizontal_alignment = 5;

  // The vertical alignment of the element inside this Box. If not defined,
  // defaults to VALIGN_CENTER.
  VerticalAlignmentProp vertical_alignment = 6;
}

// A single Span. Each Span forms part of a larger Spannable widget. At the
// moment, the only widgets which can be added to Spannable containers are
// Text elements.
message Span {
  oneof inner {
    Text text = 1;
  }
}

// A container of Span elements. Currently, this only supports Text elements,
// where each individual Span can have different styling applied to it but the
// resulting text will flow naturally. This allows sections of a paragraph of
// text to have different styling applied to it, for example, making one or two
// words bold or italic.
message Spannable {
  // The Span elements that form this Spannable.
  repeated Span spans = 1;

  // The style of this Spannable
  SpannableStyle style = 2;
}

// A column of elements. Each child element will be laid out vertically, one
// after another (i.e. stacking down). This element will size itself to the
// smallest size required to hold all of its children (e.g. if it contains three
// elements sized 10x10, 20x20 and 30x30, the resulting column will be 30x60).
//
// If specified, horizontal_alignment can be used to control the gravity inside
// the container, affecting the horizontal placement of children whose width are
// smaller than the resulting column width.
message Column {
  // The list of child elements to place inside this Column.
  repeated LayoutElement contents = 1;

  // The horizontal alignment of elements inside this column, if they are
  // narrower than the resulting width of the column. If not defined, defaults
  // to HALIGN_CENTER.
  HorizontalAlignmentProp horizontal_alignment = 2;

  // The width of this column. If not defined, this will size itself to fit
  // all of its children (i.e. a WrappedDimension).
  ContainerDimension width = 3;

  // The height of this column. If not defined, this will size itself to fit
  // all of its children (i.e. a WrappedDimension).
  ContainerDimension height = 4;
}

// A row of elements. Each child will be laid out horizontally, one after
// another (i.e. stacking to the right). This element will size itself to the
// smallest size required to hold all of its children (e.g. if it contains three
// elements sized 10x10, 20x20 and 30x30, the resulting row will be 60x30).
//
// If specified, vertical_alignment can be used to control the gravity inside
// the container, affecting the vertical placement of children whose width are
// smaller than the resulting row height.
message Row {
  // The list of child elements to place inside this Row.
  repeated LayoutElement contents = 1;

  // The vertical alignment of elements inside this row, if they are narrower
  // than the resulting height of the row. If not defined, defaults to
  // VALIGN_CENTER.
  VerticalAlignmentProp vertical_alignment = 2;

  // The width of this row. If not defined, this will size itself to fit
  // all of its children (i.e. a WrappedDimension).
  ContainerDimension width = 3;

  // The height of this row. If not defined, this will size itself to fit
  // all of its children (i.e. a WrappedDimension).
  ContainerDimension height = 4;
}

// A wrapper for an element which has a screen reader description associated
// with it. This should generally be used sparingly, and in most cases should
// only be applied to the top-level layout element or to Clickables.
message Audible {
  // The element to wrap with the screen reader description.
  LayoutElement content = 1;

  // The accessibility label associated with this element. This will be dictated
  // when the element is focused by the screen reader.
  string accessibility_label = 2;
}

// A line. When added to a normal container, this renders as a horizontal line
// which can be used to provide a visual break between elements. When added to
// an arc, it will render as a round progress bar.
message Line {
  // The length of this Line. When this is added as the direct child of an Arc,
  // this must be specified as an AngularDimension, otherwise a LinearDimension
  // must be used. If not defined, defaults to 0.
  LinearOrAngularDimension length = 1;

  // The thickness of this line. If not defined, defaults to 0.
  DpProp thickness = 2;

  // The style of this line.
  LineStyle style = 3;
}

// An arc container. This container will fill itself to a circle, which fits
// inside its parent container, and all of its children will be placed on that
// circle. The fields anchor_angle and anchor_type can be used to specify where
// to draw children within this circle.
//
// Note that there are two special cases. Text and Line elements which are added
// as direct descendants to an arc will be drawn as a curved widget around the
// arc, rather than just placed on the arc and drawn normally.
message Arc {
  // Contents of this container.
  repeated LayoutElement contents = 1;

  // The length of this Arc as an angle. If not defined, this will size itself
  // to fit all of its children. If defined, this should be a value > 0 degrees.
  DegreesProp length = 2;

  // The thickness of this Arc. If not defined, this will size itself to fit all
  // of its children.
  DpProp thickness = 3;

  // Whether this Arc's children should be rotated, according to its position
  // in the arc or not. As an example, assume that an Image has been added to
  // the arc, and ends up at the 3 o clock position. If rotate_contents = true,
  // the image will be placed at the 3 o clock position, and will be rotated
  // clockwise through 90 degrees. If rotate_contents = false, the image will be
  // placed at the 3 o clock position, but itself will not be rotated. If not
  // defined, defaults to true.
  BoolProp rotate_contents = 4;

  // The angle for the anchor, used with anchor_type to determine where to draw
  // children. Note that 0 degrees is the 12 o clock position on a device, and
  // the angle sweeps clockwise. If not defined, defaults to 0 degrees.
  //
  // Values do not have to be clamped to the range 0-360; values less than 0
  // degrees will sweep anti-clockwise (i.e. -90 degrees is equivalent to 270
  // degrees), and values >360 will be be placed at X mod 360 degrees.
  DegreesProp anchor_angle = 5;

  // How to align the contents of this container relative to anchor_angle. See
  // the descriptions of options in ArcAnchorType for more information. If not
  // defined, defaults to ARC_ANCHOR_CENTER.
  ArcAnchorTypeProp anchor_type = 6;

  // Vertical alignment of elements within the arc. If the Arc's thickness is
  // larger than the thickness of the element being drawn, this controls whether
  // the element should be drawn towards the inner or outer edge of the arc, or
  // drawn in the center.
  // If not defined, defaults to VALIGN_CENTER
  VerticalAlignmentProp vertical_align = 7;
}

// The root of all layout elements. This exists to act as a holder for all of
// the actual layout elements above.
message LayoutElement {
  oneof inner {
    Column column = 1;
    Row row = 2;
    Box box = 3;
    Spacer spacer = 4;
    Text text = 5;
    Image image = 6;
    Clickable clickable = 7;
    Audible audible = 8;
    Line line = 9;
    Arc arc = 10;
    Spannable spannable = 11;
  }
}
