// Signature format: 4.0
package androidx.wear.watchface.editor {

  public final class EditorRequest {
    ctor public EditorRequest(android.content.ComponentName watchFaceComponentName, String editorPackageName, String? watchFaceInstanceId, java.util.Map<java.lang.String,java.lang.String>? initialUserStyle);
    method public static androidx.wear.watchface.editor.EditorRequest? createFromIntent(android.content.Intent intent);
    method public String getEditorPackageName();
    method public java.util.Map<java.lang.String,java.lang.String>? getInitialUserStyle();
    method public android.content.ComponentName getWatchFaceComponentName();
    method public String? getWatchFaceInstanceId();
    property public final String editorPackageName;
    property public final java.util.Map<java.lang.String,java.lang.String>? initialUserStyle;
    property public final android.content.ComponentName watchFaceComponentName;
    property public final String? watchFaceInstanceId;
    field public static final androidx.wear.watchface.editor.EditorRequest.Companion Companion;
  }

  public static final class EditorRequest.Companion {
    method public androidx.wear.watchface.editor.EditorRequest? createFromIntent(android.content.Intent intent);
  }

  public abstract class EditorSession implements java.lang.AutoCloseable {
    ctor public EditorSession();
    method @RequiresApi(27) @UiThread public static final androidx.wear.watchface.editor.EditorSession? createHeadlessEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, androidx.wear.watchface.client.HeadlessWatchFaceClient headlessWatchFaceClient);
    method @UiThread public static final kotlinx.coroutines.Deferred<androidx.wear.watchface.editor.EditorSession> createOnWatchEditingSessionAsync(androidx.activity.ComponentActivity activity, android.content.Intent editIntent);
    method public abstract Integer? getBackgroundComplicationId();
    method @UiThread public abstract Integer? getComplicationIdAt(@Px int x, @Px int y);
    method public abstract suspend Object? getComplicationPreviewData(kotlin.coroutines.Continuation<? super java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>> p);
    method public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationState> getComplicationState();
    method public abstract String? getInstanceId();
    method public abstract long getPreviewReferenceTimeMillis();
    method public abstract androidx.wear.watchface.style.UserStyle getUserStyle();
    method public abstract androidx.wear.watchface.style.UserStyleSchema getUserStyleSchema();
    method public abstract android.content.ComponentName getWatchFaceComponentName();
    method public final boolean isCommitChangesOnClose();
    method @UiThread public abstract suspend Object? launchComplicationProviderChooser(int complicationId, kotlin.coroutines.Continuation<? super java.lang.Boolean> p);
    method public final void setCommitChangesOnClose(boolean p);
    method public abstract void setUserStyle(androidx.wear.watchface.style.UserStyle p);
    method @UiThread public abstract android.graphics.Bitmap takeWatchFaceScreenshot(androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis, java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>? idToComplicationData);
    property public abstract Integer? backgroundComplicationId;
    property public final boolean commitChangesOnClose;
    property public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationState> complicationState;
    property public abstract String? instanceId;
    property public abstract long previewReferenceTimeMillis;
    property public abstract androidx.wear.watchface.style.UserStyle userStyle;
    property public abstract androidx.wear.watchface.style.UserStyleSchema userStyleSchema;
    property public abstract android.content.ComponentName watchFaceComponentName;
    field public static final androidx.wear.watchface.editor.EditorSession.Companion Companion;
  }

  public static final class EditorSession.Companion {
    method @RequiresApi(27) @UiThread public androidx.wear.watchface.editor.EditorSession? createHeadlessEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, androidx.wear.watchface.client.HeadlessWatchFaceClient headlessWatchFaceClient);
    method @UiThread public kotlinx.coroutines.Deferred<androidx.wear.watchface.editor.EditorSession> createOnWatchEditingSessionAsync(androidx.activity.ComponentActivity activity, android.content.Intent editIntent);
  }

  public class WatchFaceEditorContract extends androidx.activity.result.contract.ActivityResultContract<androidx.wear.watchface.editor.EditorRequest,kotlin.Unit> {
    ctor public WatchFaceEditorContract();
    method public android.content.Intent createIntent(android.content.Context context, androidx.wear.watchface.editor.EditorRequest input);
    method public void parseResult(int resultCode, android.content.Intent? intent);
    field public static final String ACTION_WATCH_FACE_EDITOR = "androidx.wear.watchface.editor.action.WATCH_FACE_EDITOR";
    field public static final androidx.wear.watchface.editor.WatchFaceEditorContract.Companion Companion;
  }

  public static final class WatchFaceEditorContract.Companion {
  }

  public final class WatchFaceEditorContractKt {
  }

}

