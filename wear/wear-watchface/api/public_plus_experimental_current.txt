// Signature format: 4.0
package androidx.wear.watchface {

  public final class BackgroundComplicationTapFilter implements androidx.wear.watchface.ComplicationTapFilter {
    ctor public BackgroundComplicationTapFilter();
    method public boolean hitTest(androidx.wear.watchface.Complication complication, android.graphics.Rect screenBounds, @Px int x, @Px int y);
  }

  public interface CanvasComplication {
    method public void drawHighlight(android.graphics.Canvas canvas, android.graphics.Rect bounds, @androidx.wear.watchface.data.ComplicationBoundsType int boundsType, android.icu.util.Calendar calendar, @ColorInt int color);
    method public androidx.wear.complications.data.ComplicationData? getData();
    method public boolean isHighlighted();
    method public void loadData(androidx.wear.complications.data.ComplicationData? complicationData, boolean loadDrawablesAsynchronous);
    method @UiThread public void onAttach(androidx.wear.watchface.Complication complication);
    method @UiThread public void render(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar, androidx.wear.watchface.RenderParameters renderParameters);
    method public void setIsHighlighted(boolean p);
    property public abstract boolean isHighlighted;
  }

  public final class Complication {
    method public android.graphics.Rect computeBounds(android.graphics.Rect screen);
    method public static androidx.wear.watchface.Complication.Builder createBackgroundComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy);
    method public static androidx.wear.watchface.Complication.Builder createEdgeComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy, androidx.wear.complications.ComplicationBounds bounds, androidx.wear.watchface.ComplicationTapFilter complicationTapFilter);
    method public static androidx.wear.watchface.Complication.Builder createRoundRectComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy, androidx.wear.complications.ComplicationBounds bounds);
    method public int getBoundsType();
    method @UiThread public androidx.wear.complications.ComplicationBounds getComplicationBounds();
    method public androidx.wear.watchface.ObservableWatchData<androidx.wear.complications.data.ComplicationData> getComplicationData();
    method public android.os.Bundle getConfigExtras();
    method @UiThread public androidx.wear.complications.DefaultComplicationProviderPolicy getDefaultProviderPolicy();
    method @UiThread public androidx.wear.complications.data.ComplicationType getDefaultProviderType();
    method public androidx.wear.watchface.CanvasComplication getRenderer();
    method @UiThread public java.util.List<androidx.wear.complications.data.ComplicationType> getSupportedTypes();
    method public androidx.wear.watchface.ComplicationTapFilter getTapFilter();
    method public void invalidate();
    method public boolean isActiveAt(long dateTimeMillis);
    method @UiThread public boolean isEnabled();
    method public boolean isFixedComplicationProvider();
    method public boolean isInitiallyEnabled();
    method @UiThread public void render(android.graphics.Canvas canvas, android.icu.util.Calendar calendar, androidx.wear.watchface.RenderParameters renderParameters);
    method @UiThread public void renderHighlightLayer(android.graphics.Canvas canvas, android.icu.util.Calendar calendar, androidx.wear.watchface.RenderParameters renderParameters);
    property public final int boundsType;
    property @UiThread public final androidx.wear.complications.ComplicationBounds complicationBounds;
    property public final androidx.wear.watchface.ObservableWatchData<androidx.wear.complications.data.ComplicationData> complicationData;
    property public final android.os.Bundle configExtras;
    property @UiThread public final androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy;
    property @UiThread public final androidx.wear.complications.data.ComplicationType defaultProviderType;
    property @UiThread public final boolean enabled;
    property public final boolean fixedComplicationProvider;
    property public final boolean initiallyEnabled;
    property public final androidx.wear.watchface.CanvasComplication renderer;
    property @UiThread public final java.util.List<androidx.wear.complications.data.ComplicationType> supportedTypes;
    property public final androidx.wear.watchface.ComplicationTapFilter tapFilter;
    field public static final androidx.wear.watchface.Complication.Companion Companion;
  }

  public static final class Complication.Builder {
    method public androidx.wear.watchface.Complication build();
    method public androidx.wear.watchface.Complication.Builder setConfigExtras(android.os.Bundle extras);
    method public androidx.wear.watchface.Complication.Builder setDefaultProviderType(androidx.wear.complications.data.ComplicationType defaultProviderType);
    method public androidx.wear.watchface.Complication.Builder setEnabled(boolean enabled);
    method public androidx.wear.watchface.Complication.Builder setFixedComplicationProvider(boolean fixedComplicationProvider);
  }

  public static final class Complication.Companion {
    method public androidx.wear.watchface.Complication.Builder createBackgroundComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy);
    method public androidx.wear.watchface.Complication.Builder createEdgeComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy, androidx.wear.complications.ComplicationBounds bounds, androidx.wear.watchface.ComplicationTapFilter complicationTapFilter);
    method public androidx.wear.watchface.Complication.Builder createRoundRectComplicationBuilder(int id, androidx.wear.watchface.CanvasComplication renderer, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationProviderPolicy defaultProviderPolicy, androidx.wear.complications.ComplicationBounds bounds);
  }

  public interface ComplicationTapFilter {
    method public boolean hitTest(androidx.wear.watchface.Complication complication, android.graphics.Rect screenBounds, @Px int x, @Px int y);
  }

  public final class ComplicationsManager {
    ctor public ComplicationsManager(java.util.Collection<androidx.wear.watchface.Complication> complicationCollection, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository);
    method @UiThread public void addTapListener(androidx.wear.watchface.ComplicationsManager.TapCallback tapCallback);
    method @UiThread public void displayPressedAnimation(int complicationId);
    method public operator androidx.wear.watchface.Complication? get(int id);
    method public androidx.wear.watchface.Complication? getBackgroundComplication();
    method public androidx.wear.watchface.Complication? getComplicationAt(@Px int x, @Px int y);
    method public java.util.Map<java.lang.Integer,androidx.wear.watchface.Complication> getComplications();
    method @UiThread public void removeTapListener(androidx.wear.watchface.ComplicationsManager.TapCallback tapCallback);
    property public final java.util.Map<java.lang.Integer,androidx.wear.watchface.Complication> complications;
  }

  public static interface ComplicationsManager.TapCallback {
    method public default void onComplicationTapped(int complicationId);
  }

  public final class ComplicationsManagerKt {
  }

  public enum DrawMode {
    enum_constant public static final androidx.wear.watchface.DrawMode AMBIENT;
    enum_constant public static final androidx.wear.watchface.DrawMode INTERACTIVE;
    enum_constant public static final androidx.wear.watchface.DrawMode LOW_BATTERY_INTERACTIVE;
    enum_constant public static final androidx.wear.watchface.DrawMode MUTE;
  }

  public final class MutableObservableWatchData<T> extends androidx.wear.watchface.ObservableWatchData<T> {
    ctor public MutableObservableWatchData(T? initialValue);
    ctor public MutableObservableWatchData();
    method @UiThread public void setValue(T v);
    property @UiThread public T value;
  }

  public class ObservableWatchData<T> {
    method @UiThread public final void addObserver(androidx.wear.watchface.Observer<T> observer);
    method @UiThread public T getValue();
    method @UiThread public final T getValueOr(T p);
    method @UiThread public final boolean hasValue();
    method @UiThread public final void removeObserver(androidx.wear.watchface.Observer<T> observer);
    method @UiThread protected void setValue(T v);
    property @UiThread public T value;
  }

  public interface Observer<T> {
    method public void onChanged(T);
  }

  public final class RenderBufferTextureKt {
  }

  public final class RenderParameters {
    ctor public RenderParameters(androidx.wear.watchface.DrawMode drawMode, java.util.Set<? extends androidx.wear.watchface.style.WatchFaceLayer> watchFaceLayers, optional androidx.wear.watchface.RenderParameters.HighlightLayer? highlightLayer);
    ctor public RenderParameters(androidx.wear.watchface.DrawMode drawMode, java.util.Set<? extends androidx.wear.watchface.style.WatchFaceLayer> watchFaceLayers);
    method public androidx.wear.watchface.DrawMode getDrawMode();
    method public androidx.wear.watchface.RenderParameters.HighlightLayer? getHighlightLayer();
    method public java.util.Set<androidx.wear.watchface.style.WatchFaceLayer> getWatchFaceLayers();
    property public final androidx.wear.watchface.DrawMode drawMode;
    property public final androidx.wear.watchface.RenderParameters.HighlightLayer? highlightLayer;
    property public final java.util.Set<androidx.wear.watchface.style.WatchFaceLayer> watchFaceLayers;
    field public static final androidx.wear.watchface.RenderParameters.Companion Companion;
    field public static final androidx.wear.watchface.RenderParameters DEFAULT_INTERACTIVE;
  }

  public static final class RenderParameters.Companion {
  }

  public static final class RenderParameters.HighlightLayer {
    ctor public RenderParameters.HighlightLayer(androidx.wear.watchface.RenderParameters.HighlightedElement highlightedElement, @ColorInt int highlightTint, @ColorInt int backgroundTint);
    method @ColorInt public int getBackgroundTint();
    method @ColorInt public int getHighlightTint();
    method public androidx.wear.watchface.RenderParameters.HighlightedElement getHighlightedElement();
    property @ColorInt public final int backgroundTint;
    property @ColorInt public final int highlightTint;
    property public final androidx.wear.watchface.RenderParameters.HighlightedElement highlightedElement;
  }

  public abstract static sealed class RenderParameters.HighlightedElement {
  }

  public static final class RenderParameters.HighlightedElement.AllComplications extends androidx.wear.watchface.RenderParameters.HighlightedElement {
    field public static final androidx.wear.watchface.RenderParameters.HighlightedElement.AllComplications INSTANCE;
  }

  public static final class RenderParameters.HighlightedElement.Complication extends androidx.wear.watchface.RenderParameters.HighlightedElement {
    ctor public RenderParameters.HighlightedElement.Complication(int id);
    method public int getId();
    property public final int id;
  }

  public static final class RenderParameters.HighlightedElement.UserStyle extends androidx.wear.watchface.RenderParameters.HighlightedElement {
    ctor public RenderParameters.HighlightedElement.UserStyle(androidx.wear.watchface.style.UserStyleSetting.Id id);
    method public androidx.wear.watchface.style.UserStyleSetting.Id getId();
    property public final androidx.wear.watchface.style.UserStyleSetting.Id id;
  }

  public abstract sealed class Renderer {
    method public final float getCenterX();
    method public final float getCenterY();
    method public final long getInteractiveDrawModeUpdateDelayMillis();
    method @UiThread public android.graphics.Rect getMainClockElementBounds();
    method public final androidx.wear.watchface.RenderParameters getRenderParameters();
    method public final android.graphics.Rect getScreenBounds();
    method public final android.view.SurfaceHolder getSurfaceHolder();
    method @UiThread public final void invalidate();
    method @UiThread public void onDestroy();
    method @UiThread protected void onRenderParametersChanged(androidx.wear.watchface.RenderParameters renderParameters);
    method public final void postInvalidate();
    method public final void setInteractiveDrawModeUpdateDelayMillis(long p);
    method @UiThread public boolean shouldAnimate();
    property public final float centerX;
    property public final float centerY;
    property public final long interactiveDrawModeUpdateDelayMillis;
    property public final androidx.wear.watchface.RenderParameters renderParameters;
    property public final android.graphics.Rect screenBounds;
    property public final android.view.SurfaceHolder surfaceHolder;
  }

  public abstract static class Renderer.CanvasRenderer extends androidx.wear.watchface.Renderer {
    ctor public Renderer.CanvasRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.WatchState watchState, int canvasType, @IntRange(from=0, to=60000) long interactiveDrawModeUpdateDelayMillis);
    method @UiThread public abstract void render(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar);
    method @UiThread public abstract void renderHighlightLayer(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar);
  }

  public abstract static class Renderer.GlesRenderer extends androidx.wear.watchface.Renderer {
    ctor public Renderer.GlesRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.WatchState watchState, @IntRange(from=0, to=60000) long interactiveDrawModeUpdateDelayMillis, optional int[] eglConfigAttribList, optional int[] eglSurfaceAttribList);
    ctor public Renderer.GlesRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.WatchState watchState, @IntRange(from=0, to=60000) long interactiveDrawModeUpdateDelayMillis, optional int[] eglConfigAttribList);
    ctor public Renderer.GlesRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.WatchState watchState, @IntRange(from=0, to=60000) long interactiveDrawModeUpdateDelayMillis);
    method public final android.opengl.EGLConfig getEglConfig();
    method public final android.opengl.EGLContext? getEglContext();
    method public final android.opengl.EGLDisplay? getEglDisplay();
    method @UiThread public final void initOpenGlContext();
    method @UiThread public void onGlContextCreated();
    method @UiThread public void onGlSurfaceCreated(@Px int width, @Px int height);
    method @UiThread public abstract void render(android.icu.util.Calendar calendar);
    method @UiThread public abstract void renderHighlightLayer(android.icu.util.Calendar calendar);
    method public final void setEglConfig(android.opengl.EGLConfig p);
    method public final void setEglContext(android.opengl.EGLContext? p);
    method public final void setEglDisplay(android.opengl.EGLDisplay? p);
    property public final android.opengl.EGLConfig eglConfig;
    property public final android.opengl.EGLContext? eglContext;
    property public final android.opengl.EGLDisplay? eglDisplay;
  }

  public final class RendererKt {
  }

  public final class RoundRectComplicationTapFilter implements androidx.wear.watchface.ComplicationTapFilter {
    ctor public RoundRectComplicationTapFilter();
    method public boolean hitTest(androidx.wear.watchface.Complication complication, android.graphics.Rect screenBounds, @Px int x, @Px int y);
  }

  public final class WatchFace {
    ctor public WatchFace(int watchFaceType, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.Renderer renderer, optional androidx.wear.watchface.ComplicationsManager complicationsManager);
    ctor public WatchFace(int watchFaceType, androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository, androidx.wear.watchface.Renderer renderer);
    method public androidx.wear.watchface.style.CurrentUserStyleRepository getCurrentUserStyleRepository();
    method public androidx.wear.watchface.WatchFace.LegacyWatchFaceOverlayStyle getLegacyWatchFaceStyle();
    method public Long? getOverridePreviewReferenceTimeMillis();
    method public static boolean isLegacyWatchFaceOverlayStyleSupported();
    method public androidx.wear.watchface.WatchFace setLegacyWatchFaceStyle(androidx.wear.watchface.WatchFace.LegacyWatchFaceOverlayStyle legacyWatchFaceStyle);
    method public androidx.wear.watchface.WatchFace setOverridePreviewReferenceTimeMillis(@IntRange(from=0) long previewReferenceTimeMillis);
    method public androidx.wear.watchface.WatchFace setTapListener(androidx.wear.watchface.WatchFace.TapListener? tapListener);
    property public final androidx.wear.watchface.style.CurrentUserStyleRepository currentUserStyleRepository;
    property public final androidx.wear.watchface.WatchFace.LegacyWatchFaceOverlayStyle legacyWatchFaceStyle;
    property public final Long? overridePreviewReferenceTimeMillis;
    field public static final androidx.wear.watchface.WatchFace.Companion Companion;
  }

  public static final class WatchFace.Companion {
    method public boolean isLegacyWatchFaceOverlayStyleSupported();
  }

  public static final class WatchFace.LegacyWatchFaceOverlayStyle {
    ctor public WatchFace.LegacyWatchFaceOverlayStyle(int viewProtectionMode, int statusBarGravity, boolean tapEventsAccepted, optional @ColorInt int accentColor);
    ctor public WatchFace.LegacyWatchFaceOverlayStyle(int viewProtectionMode, int statusBarGravity, boolean tapEventsAccepted);
    method public int getAccentColor();
    method public int getStatusBarGravity();
    method public int getViewProtectionMode();
    method public boolean isTapEventsAccepted();
    property public final int accentColor;
    property public final int statusBarGravity;
    property public final boolean tapEventsAccepted;
    property public final int viewProtectionMode;
  }

  public static interface WatchFace.TapListener {
    method @UiThread public void onTap(int tapType, @Px int xPos, @Px int yPos);
  }

  public final class WatchFaceKt {
  }

  public abstract class WatchFaceService extends android.service.wallpaper.WallpaperService {
    ctor public WatchFaceService();
    method @UiThread protected abstract suspend Object? createWatchFace(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.WatchState watchState, kotlin.coroutines.Continuation<? super androidx.wear.watchface.WatchFace> p);
    method public final android.service.wallpaper.WallpaperService.Engine onCreateEngine();
  }

  public final class WatchFaceServiceKt {
  }

  public final class WatchState {
    ctor public WatchState(androidx.wear.watchface.ObservableWatchData<java.lang.Integer> interruptionFilter, androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isAmbient, androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isBatteryLowAndNotCharging, androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isVisible, boolean hasLowBitAmbient, boolean hasBurnInProtection, long analogPreviewReferenceTimeMillis, long digitalPreviewReferenceTimeMillis, @Px int chinHeight, boolean isHeadless);
    method public long getAnalogPreviewReferenceTimeMillis();
    method @Px public int getChinHeight();
    method public long getDigitalPreviewReferenceTimeMillis();
    method public androidx.wear.watchface.ObservableWatchData<java.lang.Integer> getInterruptionFilter();
    method public boolean hasBurnInProtection();
    method public boolean hasLowBitAmbient();
    method public androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isAmbient();
    method public boolean isHeadless();
    method public androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isVisible();
    property public final long analogPreviewReferenceTimeMillis;
    property @Px public final int chinHeight;
    property public final long digitalPreviewReferenceTimeMillis;
    property public final boolean hasBurnInProtection;
    property public final boolean hasLowBitAmbient;
    property public final androidx.wear.watchface.ObservableWatchData<java.lang.Integer> interruptionFilter;
    property public final androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isAmbient;
    property public final boolean isHeadless;
    property public final androidx.wear.watchface.ObservableWatchData<java.lang.Boolean> isVisible;
  }

}

