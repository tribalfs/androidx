// Signature format: 3.0
package androidx.wear.watchface {

  public abstract class CanvasRenderer extends androidx.wear.watchface.Renderer {
    ctor public CanvasRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.UserStyleRepository userStyleRepository, androidx.wear.watchface.WatchState watchState, int canvasType);
    method @UiThread public abstract void render(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar);
  }

  public final class Complication {
    method @UiThread public void draw(android.graphics.Canvas canvas, android.icu.util.Calendar calendar, int drawMode);
    method @UiThread public androidx.wear.watchface.ComplicationRenderer getRenderer();
    method @UiThread public android.graphics.RectF getUnitSquareBounds();
    method @UiThread public boolean isEnabled();
    method @UiThread public void setEnabled(boolean value);
    method @UiThread public void setRenderer(androidx.wear.watchface.ComplicationRenderer value);
    method @UiThread public void setUnitSquareBounds(android.graphics.RectF value);
    property @UiThread public final boolean enabled;
    property @UiThread public final androidx.wear.watchface.ComplicationRenderer renderer;
    property @UiThread public final android.graphics.RectF unitSquareBounds;
  }

  public static final class Complication.Builder {
    ctor public Complication.Builder(int id, androidx.wear.watchface.ComplicationRenderer renderer, int[] supportedTypes, androidx.wear.watchface.Complication.DefaultComplicationProviderPolicy defaultProviderPolicy);
    method public androidx.wear.watchface.Complication build();
    method public androidx.wear.watchface.Complication.Builder setBackgroundComplication();
    method public androidx.wear.watchface.Complication.Builder setDefaultProviderType(int defaultProviderType);
    method public androidx.wear.watchface.Complication.Builder setUnitSquareBounds(android.graphics.RectF unitSquareBounds);
  }

  public static final class Complication.DefaultComplicationProviderPolicy {
    ctor public Complication.DefaultComplicationProviderPolicy(java.util.List<android.content.ComponentName> providers, @androidx.wear.complications.SystemProviders.ProviderId int systemProviderFallback);
    ctor public Complication.DefaultComplicationProviderPolicy();
    ctor public Complication.DefaultComplicationProviderPolicy(int systemProviderFallback);
    method public java.util.List<android.content.ComponentName> getProviders();
    method public int getSystemProviderFallback();
    method public boolean isEmpty();
  }

  @IntDef({androidx.wear.watchface.ComplicationBoundsType.ROUND_RECT, androidx.wear.watchface.ComplicationBoundsType.BACKGROUND, androidx.wear.watchface.ComplicationBoundsType.EDGE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public @interface ComplicationBoundsType {
    field public static final int BACKGROUND = 1; // 0x1
    field public static final androidx.wear.watchface.ComplicationBoundsType.Companion Companion;
    field public static final int EDGE = 2; // 0x2
    field public static final int ROUND_RECT = 0; // 0x0
  }

  public static final class ComplicationBoundsType.Companion {
    field public static final int BACKGROUND = 1; // 0x1
    field public static final int EDGE = 2; // 0x2
    field public static final int ROUND_RECT = 0; // 0x0
  }

  public class ComplicationDrawableRenderer implements androidx.wear.watchface.ComplicationRenderer {
    ctor public ComplicationDrawableRenderer(androidx.wear.complications.rendering.ComplicationDrawable drawable, androidx.wear.watchface.WatchState watchState);
    method public android.support.wearable.complications.ComplicationData? getData();
    method public final androidx.wear.complications.rendering.ComplicationDrawable getDrawable();
    method public void onAttach(androidx.wear.watchface.Complication complication);
    method public void onDetach();
    method public void onDraw(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar, int drawMode);
    method public void setData(android.support.wearable.complications.ComplicationData? data);
    method public final void setDrawable(androidx.wear.complications.rendering.ComplicationDrawable value);
    method public void setInvalidateCallback(androidx.wear.watchface.ComplicationRenderer.InvalidateCallback callback);
    method public void setIsHighlighted(boolean highlight);
    property public final androidx.wear.complications.rendering.ComplicationDrawable drawable;
  }

  public interface ComplicationRenderer {
    method @UiThread public android.support.wearable.complications.ComplicationData? getData();
    method @UiThread public void onAttach(androidx.wear.watchface.Complication complication);
    method @UiThread public void onDetach();
    method @UiThread public void onDraw(android.graphics.Canvas canvas, android.graphics.Rect bounds, android.icu.util.Calendar calendar, int drawMode);
    method @UiThread public void setData(android.support.wearable.complications.ComplicationData? data);
    method @UiThread public void setInvalidateCallback(androidx.wear.watchface.ComplicationRenderer.InvalidateCallback callback);
    method @UiThread public void setIsHighlighted(boolean highlight);
  }

  public static interface ComplicationRenderer.InvalidateCallback {
    method @UiThread public void onInvalidate();
  }

  public final class ComplicationsManager {
    ctor public ComplicationsManager(java.util.Collection<androidx.wear.watchface.Complication> complicationCollection);
    ctor @VisibleForTesting public ComplicationsManager(java.util.Collection<androidx.wear.watchface.Complication> complicationCollection, androidx.wear.watchface.Renderer renderer);
    method @UiThread public void addTapListener(androidx.wear.watchface.ComplicationsManager.TapListener tapListener);
    method @UiThread public void brieflyHighlightComplication(int complicationId);
    method public operator androidx.wear.watchface.Complication? get(int id);
    method public androidx.wear.watchface.Complication? getBackgroundComplication();
    method public androidx.wear.watchface.Complication? getComplicationAt(int x, int y);
    method public java.util.Map<java.lang.Integer,androidx.wear.watchface.Complication> getComplications();
    method @UiThread public void removeTapListener(androidx.wear.watchface.ComplicationsManager.TapListener tapListener);
    property public final java.util.Map<java.lang.Integer,androidx.wear.watchface.Complication> complications;
  }

  public static interface ComplicationsManager.TapListener {
    method public default void onComplicationDoubleTapped(int complicationId);
    method public default void onComplicationSingleTapped(int complicationId);
  }

  public final class ComplicationsManagerKt {
  }

  public abstract class GlesRenderer extends androidx.wear.watchface.Renderer {
    ctor public GlesRenderer(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.style.UserStyleRepository userStyleRepository, androidx.wear.watchface.WatchState watchState);
    method protected android.opengl.EGLConfig chooseEglConfig(android.opengl.EGLDisplay eglDisplay);
    method protected int[] getConfigAttribList();
    method protected int[] getSurfaceAttribList();
    method @UiThread public void onGlContextCreated();
    method @UiThread public void onGlSurfaceCreated(int width, int height);
    method @UiThread public abstract void render(android.icu.util.Calendar calendar);
  }

  public final class GlesRendererKt {
  }

  public final class MutableWatchData<T> extends androidx.wear.watchface.WatchData<T> {
    ctor public MutableWatchData(T? initialValue);
    ctor public MutableWatchData();
    method @UiThread public void setValue(T? v);
    property @UiThread public T! value;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class MutableWatchState {
    method public androidx.wear.watchface.WatchState asWatchState();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> getHasBurnInProtection();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> getHasLowBitAmbient();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> getInAirplaneMode();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Integer> getInterruptionFilter();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Integer> getNotificationCount();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Integer> getUnreadNotificationCount();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isAmbient();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isBatteryLowAndNotCharging();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isCharging();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isConnectedToCompanion();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isGpsActive();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isInTheaterMode();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isKeyguardLocked();
    method public androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isVisible();
    method public void setInterruptionFilter(androidx.wear.watchface.MutableWatchData<java.lang.Integer> p);
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> hasBurnInProtection;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> hasLowBitAmbient;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> inAirplaneMode;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Integer> interruptionFilter;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isAmbient;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isBatteryLowAndNotCharging;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isCharging;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isConnectedToCompanion;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isGpsActive;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isInTheaterMode;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isKeyguardLocked;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Boolean> isVisible;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Integer> notificationCount;
    property public final androidx.wear.watchface.MutableWatchData<java.lang.Integer> unreadNotificationCount;
  }

  public abstract class Renderer {
    ctor public Renderer(android.view.SurfaceHolder _surfaceHolder, internal androidx.wear.watchface.style.UserStyleRepository userStyleRepository, internal androidx.wear.watchface.WatchState watchState);
    method public final float getCenterX();
    method public final float getCenterY();
    method public final int getDrawMode();
    method @UiThread public android.graphics.Rect getMainClockElementBounds();
    method public final android.graphics.Rect getScreenBounds();
    method protected final android.view.SurfaceHolder getSurfaceHolder();
    method @UiThread public void onDestroy();
    method @UiThread protected void onDrawModeChanged(int drawMode);
    method @CallSuper @UiThread public void onSurfaceChanged(android.view.SurfaceHolder holder, int format, int width, int height);
    method @UiThread public void onSurfaceDestroyed(android.view.SurfaceHolder holder);
    method public final void setDrawMode$metalava_module(int value);
    method @UiThread public boolean shouldAnimate();
    property public final float centerX;
    property public final float centerY;
    property public final int drawMode;
    property public final android.graphics.Rect screenBounds;
    property protected final android.view.SurfaceHolder surfaceHolder;
  }

  public class WatchData<T> {
    ctor protected WatchData(T? _value);
    method @UiThread public T! getValue();
    method public final T! getValueOr(T? p);
    method protected final T? get_value();
    method public final boolean hasValue();
    method @UiThread public final void observe(androidx.lifecycle.Observer<T> observer);
    method @UiThread public final void removeObserver(androidx.lifecycle.Observer<T> observer);
    method @UiThread protected void setValue(T? v);
    method protected final void set_value(T? p);
    property @UiThread public T! value;
  }

  public final class WatchFace {
    method @UiThread public void invalidate();
    method public void postInvalidate();
  }

  public static final class WatchFace.Builder {
    ctor public WatchFace.Builder(int watchFaceType, long interactiveUpdateRateMillis, internal androidx.wear.watchface.style.UserStyleRepository userStyleRepository, internal androidx.wear.watchface.ComplicationsManager complicationsManager, internal androidx.wear.watchface.Renderer renderer, androidx.wear.watchface.WatchFaceHost watchFaceHost, androidx.wear.watchface.WatchState watchState);
    method public androidx.wear.watchface.WatchFace build();
    method public androidx.wear.watchface.WatchFace.Builder setAccentColor(@ColorInt int accentColor);
    method public androidx.wear.watchface.WatchFace.Builder setAcceptsTapEvents(boolean acceptsTapEvents);
    method public androidx.wear.watchface.WatchFace.Builder setHideNotificationIndicator(boolean hideNotificationIndicator);
    method public androidx.wear.watchface.WatchFace.Builder setShowUnreadCountIndicator(boolean showUnreadCountIndicator);
    method public androidx.wear.watchface.WatchFace.Builder setStatusBarGravity(int statusBarGravity);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.wear.watchface.WatchFace.Builder setSystemTimeProvider(androidx.wear.watchface.WatchFace.SystemTimeProvider systemTimeProvider);
    method public androidx.wear.watchface.WatchFace.Builder setViewProtectionMode(int viewProtectionMode);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface WatchFace.SystemTimeProvider {
    method public long getSystemTimeMillis();
  }

  public final class WatchFaceHost {
    ctor public WatchFaceHost();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface WatchFaceHostApi {
    method public android.content.Context getContext();
    method public android.os.Handler getHandler();
    method public androidx.wear.watchface.style.data.UserStyleWireFormat? getStoredUserStyle();
    method @UiThread public void invalidate();
    method public void registerUserStyleSchema(androidx.wear.watchface.style.data.UserStyleSchemaWireFormat userStyleSchema);
    method public void registerWatchFaceType(int watchFaceType);
    method public void setActiveComplications(int[] watchFaceComplicationIds);
    method public void setComplicationDetails(int complicationId, android.graphics.Rect bounds, @androidx.wear.watchface.ComplicationBoundsType int type);
    method public void setComplicationSupportedTypes(int complicationId, int[] types);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setContentDescriptionLabels(android.support.wearable.watchface.accessibility.ContentDescriptionLabel![] labels);
    method public void setCurrentUserStyle(androidx.wear.watchface.style.data.UserStyleWireFormat userStyle);
    method public void setDefaultComplicationProviderWithFallbacks(int watchFaceComplicationId, java.util.List<android.content.ComponentName>? providers, @androidx.wear.complications.SystemProviders.ProviderId int fallbackSystemProvider, int type);
  }

  public final class WatchFaceKt {
  }

  public abstract class WatchFaceService extends android.service.wallpaper.WallpaperService {
    ctor public WatchFaceService();
    method protected abstract androidx.wear.watchface.WatchFace createWatchFace(android.view.SurfaceHolder surfaceHolder, androidx.wear.watchface.WatchFaceHost watchFaceHost, androidx.wear.watchface.WatchState watchState);
    method public final android.service.wallpaper.WallpaperService.Engine onCreateEngine();
  }

  public final class WatchFaceServiceKt {
  }

  public final class WatchState {
    ctor public WatchState(androidx.wear.watchface.WatchData<java.lang.Integer> interruptionFilter, androidx.wear.watchface.WatchData<java.lang.Boolean> isAmbient, androidx.wear.watchface.WatchData<java.lang.Boolean> inAirplaneMode, androidx.wear.watchface.WatchData<java.lang.Boolean> isBatteryLowAndNotCharging, androidx.wear.watchface.WatchData<java.lang.Boolean> isCharging, androidx.wear.watchface.WatchData<java.lang.Boolean> isConnectedToCompanion, androidx.wear.watchface.WatchData<java.lang.Boolean> isGpsActive, androidx.wear.watchface.WatchData<java.lang.Boolean> isKeyguardLocked, androidx.wear.watchface.WatchData<java.lang.Boolean> isInTheaterMode, androidx.wear.watchface.WatchData<java.lang.Boolean> isVisible, androidx.wear.watchface.WatchData<java.lang.Integer> notificationCount, androidx.wear.watchface.WatchData<java.lang.Integer> unreadNotificationCount, androidx.wear.watchface.WatchData<java.lang.Boolean> hasLowBitAmbient, androidx.wear.watchface.WatchData<java.lang.Boolean> hasBurnInProtection);
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> getHasBurnInProtection();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> getHasLowBitAmbient();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> getInAirplaneMode();
    method public androidx.wear.watchface.WatchData<java.lang.Integer> getInterruptionFilter();
    method public androidx.wear.watchface.WatchData<java.lang.Integer> getNotificationCount();
    method public androidx.wear.watchface.WatchData<java.lang.Integer> getUnreadNotificationCount();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isAmbient();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isBatteryLowAndNotCharging();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isCharging();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isConnectedToCompanion();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isGpsActive();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isInTheaterMode();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isKeyguardLocked();
    method public androidx.wear.watchface.WatchData<java.lang.Boolean> isVisible();
  }

}

package androidx.wear.watchface.ui {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) internal final class ComplicationConfigFragment extends androidx.fragment.app.Fragment {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) internal final class ConfigView extends androidx.wear.widget.SwipeDismissFrameLayout {
    ctor public ConfigView(android.content.Context context, androidx.wear.watchface.ui.WatchFaceConfigActivity watchFaceConfigActivity);
    method public androidx.wear.watchface.ui.WatchFaceConfigActivity getWatchFaceConfigActivity();
  }

  public static final class ConfigView.EventInfo {
    ctor public ConfigView.EventInfo(int eventPositionX, int eventPositionY, int eventType);
    method public int component1();
    method public int component2();
    method public int component3();
    method public androidx.wear.watchface.ui.ConfigView.EventInfo copy(int eventPositionX, int eventPositionY, int eventType);
    method public int getEventPositionX();
    method public int getEventPositionY();
    method public int getEventType();
    method public void setEventPositionX(int p);
    method public void setEventPositionY(int p);
    method public void setEventType(int p);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class WatchFaceConfigActivity extends androidx.fragment.app.FragmentActivity {
  }

}

