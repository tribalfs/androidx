// Signature format: 4.0
package androidx.window {

  public final class WindowProperties {
    field public static final androidx.window.WindowProperties INSTANCE;
    field public static final String PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE = "android.window.PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE";
  }

}

package androidx.window.area {

  @androidx.window.core.ExperimentalWindowApi public interface WindowAreaController {
    method public default static androidx.window.area.WindowAreaController getOrCreate();
    field public static final androidx.window.area.WindowAreaController.Companion Companion;
  }

  public static final class WindowAreaController.Companion {
    method public androidx.window.area.WindowAreaController getOrCreate();
  }

  @androidx.window.core.ExperimentalWindowApi public interface WindowAreaSession {
    method public void close();
  }

  @androidx.window.core.ExperimentalWindowApi public interface WindowAreaSessionCallback {
    method public void onSessionEnded();
    method public void onSessionStarted(androidx.window.area.WindowAreaSession session);
  }

  @androidx.window.core.ExperimentalWindowApi public final class WindowAreaStatus {
    field public static final androidx.window.area.WindowAreaStatus AVAILABLE;
    field public static final androidx.window.area.WindowAreaStatus.Companion Companion;
    field public static final androidx.window.area.WindowAreaStatus UNAVAILABLE;
    field public static final androidx.window.area.WindowAreaStatus UNSUPPORTED;
  }

  public static final class WindowAreaStatus.Companion {
  }

}

package androidx.window.core {

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level.WARNING) @kotlin.annotation.MustBeDocumented @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalWindowApi {
  }

}

package androidx.window.embedding {

  @androidx.window.core.ExperimentalWindowApi public final class ActivityFilter {
    ctor public ActivityFilter(android.content.ComponentName componentName, String? intentAction);
    method public boolean matchesActivity(android.app.Activity activity);
    method public <T extends android.app.Activity> boolean matchesClassName(Class<T> clazz);
    method public <T extends android.app.Activity> boolean matchesClassNameOrWildCard(Class<T>? clazz);
    method public boolean matchesIntent(android.content.Intent intent);
  }

  @androidx.window.core.ExperimentalWindowApi public final class ActivityRule extends androidx.window.embedding.EmbeddingRule {
    ctor @Deprecated public ActivityRule(java.util.Set<androidx.window.embedding.ActivityFilter> filters, optional boolean alwaysExpand);
    method public boolean getAlwaysExpand();
    method public java.util.Set<androidx.window.embedding.ActivityFilter> getFilters();
    property public final boolean alwaysExpand;
    property public final java.util.Set<androidx.window.embedding.ActivityFilter> filters;
  }

  public static final class ActivityRule.Builder {
    ctor public ActivityRule.Builder(java.util.Set<androidx.window.embedding.ActivityFilter> filters);
    method public androidx.window.embedding.ActivityRule build();
    method public androidx.window.embedding.ActivityRule.Builder setAlwaysExpand(boolean alwaysExpand);
  }

  @androidx.window.core.ExperimentalWindowApi public final class ActivityStack {
    ctor public ActivityStack(java.util.List<? extends android.app.Activity> activities, optional boolean isEmpty);
    method public operator boolean contains(android.app.Activity activity);
    method public boolean isEmpty();
  }

  @androidx.window.core.ExperimentalWindowApi public abstract class EmbeddingRule {
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitAttributes {
    method public androidx.window.embedding.SplitAttributes.LayoutDirection getLayoutDirection();
    method public androidx.window.embedding.SplitAttributes.SplitType getSplitType();
    property public final androidx.window.embedding.SplitAttributes.LayoutDirection layoutDirection;
    property public final androidx.window.embedding.SplitAttributes.SplitType splitType;
    field public static final androidx.window.embedding.SplitAttributes.Companion Companion;
  }

  public static final class SplitAttributes.Builder {
    ctor public SplitAttributes.Builder();
    method public androidx.window.embedding.SplitAttributes build();
    method public androidx.window.embedding.SplitAttributes.Builder setLayoutDirection(androidx.window.embedding.SplitAttributes.LayoutDirection layoutDirection);
    method public androidx.window.embedding.SplitAttributes.Builder setSplitType(androidx.window.embedding.SplitAttributes.SplitType type);
  }

  public static final class SplitAttributes.Companion {
  }

  public static final class SplitAttributes.LayoutDirection {
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection BOTTOM_TO_TOP;
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection.Companion Companion;
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection LEFT_TO_RIGHT;
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection LOCALE;
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection RIGHT_TO_LEFT;
    field public static final androidx.window.embedding.SplitAttributes.LayoutDirection TOP_TO_BOTTOM;
  }

  public static final class SplitAttributes.LayoutDirection.Companion {
  }

  public static class SplitAttributes.SplitType {
    method public static final androidx.window.embedding.SplitAttributes.SplitType.ExpandContainersSplitType expandContainers();
    method public static final androidx.window.embedding.SplitAttributes.SplitType.RatioSplitType ratio(@FloatRange(from=0.0, to=1.0, fromInclusive=false, toInclusive=false) float ratio);
    method public static final androidx.window.embedding.SplitAttributes.SplitType.HingeSplitType splitByHinge(optional androidx.window.embedding.SplitAttributes.SplitType fallbackSplitType);
    method public static final androidx.window.embedding.SplitAttributes.SplitType.RatioSplitType splitEqually();
    field public static final androidx.window.embedding.SplitAttributes.SplitType.Companion Companion;
  }

  public static final class SplitAttributes.SplitType.Companion {
    method public androidx.window.embedding.SplitAttributes.SplitType.ExpandContainersSplitType expandContainers();
    method public androidx.window.embedding.SplitAttributes.SplitType.RatioSplitType ratio(@FloatRange(from=0.0, to=1.0, fromInclusive=false, toInclusive=false) float ratio);
    method public androidx.window.embedding.SplitAttributes.SplitType.HingeSplitType splitByHinge(optional androidx.window.embedding.SplitAttributes.SplitType fallbackSplitType);
    method public androidx.window.embedding.SplitAttributes.SplitType.RatioSplitType splitEqually();
  }

  public static final class SplitAttributes.SplitType.ExpandContainersSplitType extends androidx.window.embedding.SplitAttributes.SplitType {
  }

  public static final class SplitAttributes.SplitType.HingeSplitType extends androidx.window.embedding.SplitAttributes.SplitType {
    method public androidx.window.embedding.SplitAttributes.SplitType getFallbackSplitType();
    property public final androidx.window.embedding.SplitAttributes.SplitType fallbackSplitType;
  }

  public static final class SplitAttributes.SplitType.RatioSplitType extends androidx.window.embedding.SplitAttributes.SplitType {
    method public float getRatio();
    property public final float ratio;
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitController {
    method public void addSplitListener(android.app.Activity activity, java.util.concurrent.Executor executor, androidx.core.util.Consumer<java.util.List<androidx.window.embedding.SplitInfo>> consumer);
    method public void clearRegisteredRules();
    method public static androidx.window.embedding.SplitController getInstance();
    method public java.util.Set<androidx.window.embedding.EmbeddingRule> getSplitRules();
    method public static void initialize(android.content.Context context, int staticRuleResourceId);
    method public boolean isActivityEmbedded(android.app.Activity activity);
    method public boolean isSplitSupported();
    method public void registerRule(androidx.window.embedding.EmbeddingRule rule);
    method public void removeSplitListener(androidx.core.util.Consumer<java.util.List<androidx.window.embedding.SplitInfo>> consumer);
    method public void unregisterRule(androidx.window.embedding.EmbeddingRule rule);
    field public static final androidx.window.embedding.SplitController.Companion Companion;
  }

  public static final class SplitController.Companion {
    method public androidx.window.embedding.SplitController getInstance();
    method public void initialize(android.content.Context context, int staticRuleResourceId);
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitInfo {
    method public operator boolean contains(android.app.Activity activity);
    method public androidx.window.embedding.ActivityStack getPrimaryActivityStack();
    method public androidx.window.embedding.ActivityStack getSecondaryActivityStack();
    method public float getSplitRatio();
    property public final androidx.window.embedding.ActivityStack primaryActivityStack;
    property public final androidx.window.embedding.ActivityStack secondaryActivityStack;
    property public final float splitRatio;
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitPairFilter {
    ctor public SplitPairFilter(android.content.ComponentName primaryActivityName, android.content.ComponentName secondaryActivityName, String? secondaryActivityIntentAction);
    method public android.content.ComponentName getPrimaryActivityName();
    method public String? getSecondaryActivityIntentAction();
    method public android.content.ComponentName getSecondaryActivityName();
    method public boolean matchesActivityIntentPair(android.app.Activity primaryActivity, android.content.Intent secondaryActivityIntent);
    method public boolean matchesActivityPair(android.app.Activity primaryActivity, android.app.Activity secondaryActivity);
    property public final android.content.ComponentName primaryActivityName;
    property public final String? secondaryActivityIntentAction;
    property public final android.content.ComponentName secondaryActivityName;
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitPairRule extends androidx.window.embedding.SplitRule {
    ctor @Deprecated public SplitPairRule(java.util.Set<androidx.window.embedding.SplitPairFilter> filters, optional int finishPrimaryWithSecondary, optional int finishSecondaryWithPrimary, optional boolean clearTop, @IntRange(from=0L) int minWidth, @IntRange(from=0L) int minSmallestWidth, optional @FloatRange(from=0.0, to=1.0) float splitRatio, optional int layoutDir);
    method public boolean getClearTop();
    method public java.util.Set<androidx.window.embedding.SplitPairFilter> getFilters();
    method public int getFinishPrimaryWithSecondary();
    method public int getFinishSecondaryWithPrimary();
    property public final boolean clearTop;
    property public final java.util.Set<androidx.window.embedding.SplitPairFilter> filters;
    property public final int finishPrimaryWithSecondary;
    property public final int finishSecondaryWithPrimary;
  }

  public static final class SplitPairRule.Builder {
    ctor public SplitPairRule.Builder(java.util.Set<androidx.window.embedding.SplitPairFilter> filters, @IntRange(from=0L) int minWidth, @IntRange(from=0L) int minSmallestWidth);
    method public androidx.window.embedding.SplitPairRule build();
    method public androidx.window.embedding.SplitPairRule.Builder setClearTop(boolean clearTop);
    method public androidx.window.embedding.SplitPairRule.Builder setDefaultSplitAttributes(androidx.window.embedding.SplitAttributes defaultSplitAttributes);
    method public androidx.window.embedding.SplitPairRule.Builder setFinishPrimaryWithSecondary(int finishPrimaryWithSecondary);
    method public androidx.window.embedding.SplitPairRule.Builder setFinishSecondaryWithPrimary(int finishSecondaryWithPrimary);
  }

  @androidx.window.core.ExperimentalWindowApi public final class SplitPlaceholderRule extends androidx.window.embedding.SplitRule {
    ctor @Deprecated public SplitPlaceholderRule(java.util.Set<androidx.window.embedding.ActivityFilter> filters, android.content.Intent placeholderIntent, boolean isSticky, optional int finishPrimaryWithPlaceholder, optional @IntRange(from=0L) int minWidth, optional @IntRange(from=0L) int minSmallestWidth, optional @FloatRange(from=0.0, to=1.0) float splitRatio, optional @IntRange(from=0L, to=3L) int layoutDirection);
    method public java.util.Set<androidx.window.embedding.ActivityFilter> getFilters();
    method public int getFinishPrimaryWithPlaceholder();
    method public android.content.Intent getPlaceholderIntent();
    method public boolean isSticky();
    property public final java.util.Set<androidx.window.embedding.ActivityFilter> filters;
    property public final int finishPrimaryWithPlaceholder;
    property public final boolean isSticky;
    property public final android.content.Intent placeholderIntent;
  }

  public static final class SplitPlaceholderRule.Builder {
    ctor public SplitPlaceholderRule.Builder(java.util.Set<androidx.window.embedding.ActivityFilter> filters, android.content.Intent placeholderIntent, @IntRange(from=0L) int minWidth, @IntRange(from=0L) int minSmallestWidth);
    method public androidx.window.embedding.SplitPlaceholderRule build();
    method public androidx.window.embedding.SplitPlaceholderRule.Builder setDefaultSplitAttributes(androidx.window.embedding.SplitAttributes defaultSplitAttributes);
    method public androidx.window.embedding.SplitPlaceholderRule.Builder setFinishPrimaryWithPlaceholder(int finishPrimaryWithPlaceholder);
    method public androidx.window.embedding.SplitPlaceholderRule.Builder setSticky(boolean isSticky);
  }

  @androidx.window.core.ExperimentalWindowApi public class SplitRule extends androidx.window.embedding.EmbeddingRule {
    method public final androidx.window.embedding.SplitAttributes getDefaultSplitAttributes();
    method public final int getMinSmallestWidth();
    method public final int getMinWidth();
    property public final androidx.window.embedding.SplitAttributes defaultSplitAttributes;
    property public final int minSmallestWidth;
    property public final int minWidth;
    field public static final androidx.window.embedding.SplitRule.Companion Companion;
    field public static final int FINISH_ADJACENT = 2; // 0x2
    field public static final int FINISH_ALWAYS = 1; // 0x1
    field public static final int FINISH_NEVER = 0; // 0x0
  }

  public static final class SplitRule.Companion {
  }

}

package androidx.window.layout {

  public interface DisplayFeature {
    method public android.graphics.Rect getBounds();
    property public abstract android.graphics.Rect bounds;
  }

  public interface FoldingFeature extends androidx.window.layout.DisplayFeature {
    method public androidx.window.layout.FoldingFeature.OcclusionType getOcclusionType();
    method public androidx.window.layout.FoldingFeature.Orientation getOrientation();
    method public androidx.window.layout.FoldingFeature.State getState();
    method public boolean isSeparating();
    property public abstract boolean isSeparating;
    property public abstract androidx.window.layout.FoldingFeature.OcclusionType occlusionType;
    property public abstract androidx.window.layout.FoldingFeature.Orientation orientation;
    property public abstract androidx.window.layout.FoldingFeature.State state;
  }

  public static final class FoldingFeature.OcclusionType {
    field public static final androidx.window.layout.FoldingFeature.OcclusionType.Companion Companion;
    field public static final androidx.window.layout.FoldingFeature.OcclusionType FULL;
    field public static final androidx.window.layout.FoldingFeature.OcclusionType NONE;
  }

  public static final class FoldingFeature.OcclusionType.Companion {
  }

  public static final class FoldingFeature.Orientation {
    field public static final androidx.window.layout.FoldingFeature.Orientation.Companion Companion;
    field public static final androidx.window.layout.FoldingFeature.Orientation HORIZONTAL;
    field public static final androidx.window.layout.FoldingFeature.Orientation VERTICAL;
  }

  public static final class FoldingFeature.Orientation.Companion {
  }

  public static final class FoldingFeature.State {
    field public static final androidx.window.layout.FoldingFeature.State.Companion Companion;
    field public static final androidx.window.layout.FoldingFeature.State FLAT;
    field public static final androidx.window.layout.FoldingFeature.State HALF_OPENED;
  }

  public static final class FoldingFeature.State.Companion {
  }

  public interface WindowInfoTracker {
    method public default static androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context context);
    method public kotlinx.coroutines.flow.Flow<androidx.window.layout.WindowLayoutInfo> windowLayoutInfo(android.app.Activity activity);
    field public static final androidx.window.layout.WindowInfoTracker.Companion Companion;
  }

  public static final class WindowInfoTracker.Companion {
    method public androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context context);
  }

  public final class WindowLayoutInfo {
    method public java.util.List<androidx.window.layout.DisplayFeature> getDisplayFeatures();
    property public final java.util.List<androidx.window.layout.DisplayFeature> displayFeatures;
  }

  public final class WindowMetrics {
    method public android.graphics.Rect getBounds();
    method @RequiresApi(android.os.Build.VERSION_CODES.R) @androidx.window.core.ExperimentalWindowApi public androidx.core.view.WindowInsetsCompat getWindowInsets();
    property public final android.graphics.Rect bounds;
  }

  public interface WindowMetricsCalculator {
    method public androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity activity);
    method public androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity activity);
    method public default static androidx.window.layout.WindowMetricsCalculator getOrCreate();
    field public static final androidx.window.layout.WindowMetricsCalculator.Companion Companion;
  }

  public static final class WindowMetricsCalculator.Companion {
    method public androidx.window.layout.WindowMetricsCalculator getOrCreate();
  }

}

