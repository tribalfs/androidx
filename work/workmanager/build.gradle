/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.LibraryGroups
import androidx.build.LibraryVersions
import androidx.build.AndroidXExtension

import static androidx.build.dependencies.DependenciesKt.*
import androidx.build.Publish

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("kotlin-android")
}

android {
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }
    buildTypes.all {
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
        //TODO: b/130307237 test coverage breaks robolectric
        debug {
            testCoverageEnabled = false
        }
        release {
            testCoverageEnabled = false
        }
    }
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/src/schemas".toString()]
            }
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/src/schemas".toString())
    }
}

dependencies {
    // Using -PuseMaxDepVersions does not use the right version of the annotation processor
    // Remove this workaround after b/127495641 is fixed
    if (project.hasProperty('useMaxDepVersions')) {
        annotationProcessor(project(":room:room-compiler"))
        implementation(project(":room:room-runtime"))
        androidTestImplementation(project(":room:room-testing"))
    } else {
        annotationProcessor(WORK_ARCH_ROOM_COMPILER)
        implementation(WORK_ARCH_ROOM_RUNTIME)
        androidTestImplementation(WORK_ARCH_ROOM_TESTING)
    }
    api(GUAVA_LISTENABLE_FUTURE)
    api(ARCH_LIFECYCLE_LIVEDATA)
    implementation(ANDROIDX_CORE)
    implementation(ARCH_LIFECYCLE_SERVICE)
    androidTestImplementation(KOTLIN_STDLIB)
    androidTestImplementation(ANDROIDX_TEST_EXT_JUNIT)
    androidTestImplementation(ANDROIDX_TEST_CORE)
    androidTestImplementation(WORK_ARCH_CORE_TESTING)
    androidTestImplementation(ANDROIDX_TEST_RUNNER)
    androidTestImplementation(ESPRESSO_CORE)
    androidTestImplementation(MOCKITO_CORE, libs.exclude_bytebuddy) // DexMaker has its own MockMaker
    androidTestImplementation(DEXMAKER_MOCKITO, libs.exclude_bytebuddy) // DexMaker has its own MockMaker
    testImplementation(JUNIT)
}

androidx {
    name = "Android WorkManager Runtime"
    publish = Publish.SNAPSHOT_AND_RELEASE
    mavenVersion = LibraryVersions.WORK
    mavenGroup = LibraryGroups.WORK
    inceptionYear = "2018"
    description = "Android WorkManager runtime library"
    url = AndroidXExtension.ARCHITECTURE_URL
    failOnDeprecationWarnings = false
    trackRestrictedAPIs = false
}
